!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=36)}({0:function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var i=n(1);class r{constructor(t,e={}){this._component=i.a.parse(this._base(e)),this._tag="#"+e.id,this._parentSelector=t,this._info=e,this._init(),document.querySelector(this._parentSelector).appendChild(this._component)}_init(){this._initListeners(this._info.listeners)}_initListeners(t){t&&t.forEach(t=>{this._component.addEventListener(t.type,t.action)})}_base(t){throw new Error("the method fieldsTempalte must be implemented")}}},1:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));class i{static parse(t){return(new DOMParser).parseFromString(t,"text/html").documentElement.querySelector("body").firstChild}}},11:function(t,e,n){"use strict"},2:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));class i{constructor(t,e){this._type=t,this._action=e}get type(){return this._type}get action(){return this._action}}},36:function(t,e,n){"use strict";n.r(e);var i=n(7),r=n(5),s=n(1);class o{constructor(t,e){this.email=t,this.password=e}}class a extends r.a{constructor(t,...e){super(t,{id:"authenticationForm",formClass:"form-signin needs-validation",listeners:e}),this.updateFields(),this._isInvalid=!1}getAuthenticationDTO(){let t=this.getData();return new o(t.email,t.password)}invalidFormData(){this._isInvalid=!0,this.updateFields()}_template(){let t=`\n        <div>\n            ${this._isInvalid?'\n                <div class="alert alert-warning" role="alert">\n                    E-mail ou senha invalidos!\n                </div>\n                ':""}\n\n\n            <div class="form-group">\n                <label for="email">Email</label>\n                <input type="email" min="3" max="20" class="form-control ${this._isInvalid?"is-invalid":""}" id="email" name="email" required>\n            </div>\n            <div class="form-group">\n                <label for="password">Senha</label>\n                <input type="password" min="3" max="20" class="form-control  ${this._isInvalid?"is-invalid":""}" id="password" name="password" required>\n            </div>\n\n            <button type='submit' class='btn btn-primary btn-lg btn-block'>Entrar</button>\n        </div>\n        `;return s.a.parse(t)}}var l=n(2),u=n(4);new class{constructor(){this._authService=new i.a,this._redirectAuthenticateds(),this._form=new a(".authenticationForm",new l.a("submit",t=>{t.preventDefault(),this.sigin()}))}_redirectAuthenticateds(){this._authService.hasValidToken().then(()=>{window.location.href="/customers.html"}).catch(t=>{})}sigin(){let t=this._form.getAuthenticationDTO(),e=new u.a;this._authService.authenticate(t).then(()=>{window.location.href="/customers.html",e.storeItem("email",t.email)}).catch(()=>{this._form.invalidFormData()})}}},4:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));n(11),n(7);class i{addToken(t,e){let n=`${t} ${e}`;window.localStorage.setItem("msaloonwbtoken",n)}storeItem(t,e){window.localStorage.setItem(t,e)}cleanToken(){window.localStorage.setItem("msaloonwbtoken",null)}get token(){return window.localStorage.getItem("msaloonwbtoken")}getStoredItem(t){return window.localStorage.getItem(t)}post(t,e){let n=this._buildTransactionDetails("POST",e);return this._buildFetchTransaction(t,n)}get(t){let e=this._buildTransactionDetails("GET",null);return this._buildFetchTransaction(t,e)}put(t,e){let n=this._buildTransactionDetails("PUT",e);return this._buildFetchTransaction(t,n)}delete(t){let e=this._buildTransactionDetails("DELETE",null);return fetch(t,e).then(t=>{if(t.ok)return!0;throw new Error("A transactional error has been happened.")})}_buildTransactionHeaders(){return new Headers({"Content-type":"Application/json",Authorization:this.token})}_buildTransactionDetails(t,e){return{method:t,body:e,headers:this._buildTransactionHeaders()}}_buildFetchTransaction(t,e){return fetch(t,e).then(t=>{if(t.ok)return t.json().then(t=>t).catch(t=>!0);throw new Error("A transactional error has been happened.")})}}},5:function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var i=n(0);class r extends i.a{updateFields(){document.querySelector(this._tag+" .fields").innerHTML="",document.querySelector(this._tag+" .fields").appendChild(this._template())}submit(){document.querySelector(this._tag).submit()}reset(){document.querySelector(this._tag).reset()}getData(){let t=[];return $(this._tag).serializeArray().forEach(e=>{t[e.name]=e.value}),t}getDataAsParams(){return $(this._tag).serialize()}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".fields").appendChild(this._info.initialContent),this._info.buttons&&this._info.initialButtons&&this._info.initialButtons.forEach(t=>this._component.querySelector(".buttons").appendChild(t))}_base(t){return`\n        <form id=${t.id} ${t.formClass?`class='${t.formClass}'`:""}>\n           <div class='fields'></div>\n           <div class='buttons'>\n                ${t.defaultButtons?'\n                <button type="submit" class="btn btn-primary">Salvar</button>\n                <button type="reset" class="btn btn-secondary">Limpar</button>\n                ':""}\n           </div>\n        </form>\n        `}_template(){throw new Error("the method fieldsTempalte must be implemented")}}},7:function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var i=n(4);class r{constructor(){this._serverURL="http://localhost:8080/auth",this._webtoken="msaloonwbtoken",this._http=new i.a}hasValidToken(){return this._http.get(this._serverURL)}authenticate(t){let e={method:"POST",body:JSON.stringify(t),headers:{"Content-type":"Application/json"}};return fetch(this._serverURL,e).then(t=>{if(t.ok&&200==t.status)return t.json();throw new Error("The signin data is not correct")}).then(t=>{this._http.addToken(t.type,t.token)})}logout(){this._http.cleanToken()}redirectToLoginPage(){window.location.href="/login.html"}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,