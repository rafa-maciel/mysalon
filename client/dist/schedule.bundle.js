!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=34)}({0:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(1);class i{constructor(e,t={}){this._component=r.a.parse(this._base(t)),this._tag="#"+t.id,this._parentSelector=e,this._info=t,this._init(),document.querySelector(this._parentSelector).appendChild(this._component)}_init(){this._initListeners(this._info.listeners)}_initListeners(e){e&&e.forEach(e=>{this._component.addEventListener(e.type,e.action)})}_base(e){throw new Error("the method fieldsTempalte must be implemented")}}},1:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));class r{static parse(e){return(new DOMParser).parseFromString(e,"text/html").documentElement.querySelector("body").firstChild}}},10:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(0);class i extends r.a{constructor(e){super(e)}_base(e){return'\n        <nav class="sidebar">\n          <div class="sidebar-sticky">\n            <ul class="nav flex-column">\n              <li class="nav-item">\n                <a class="nav-link active" href="./schedule.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>\n                  Dashboard <span class="sr-only">(current)</span>\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./customers.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>\n                  Clientes\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./professionals.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Profissionais\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./vendors.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Fornecedores\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./purchases.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Compras\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./appointments.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Atendimentos (Consultas)\n                </a>\n              </li>\n            </ul>\n    \n            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">\n              <span>Minha Conta</span>\n            </h6>\n            <ul class="nav flex-column mb-2">\n              <li class="nav-item">\n                <a class="nav-link" href="./profile.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>\n                  Meu Perfil\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        '}}class o extends r.a{constructor(e,t){super(e),this._initHeaderNavigation(t)}_initHeaderNavigation(e){this._component.querySelector("a.logout").addEventListener(e.type,e.action)}_base(e){return'\n        <nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">\n            <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">My Saloon Web</a>\n            <input class="form-control form-control-dark w-100" type="text" placeholder="Pesquisar" aria-label="Pesquisar">\n            <ul class="navbar-nav px-3">\n                <li class="nav-item text-nowrap">\n                <a class="nav-link logout" href="#">Logoff</a>\n                </li>\n            </ul>\n        </nav>\n        '}}var s=n(2),a=n(7),l=n(1);class u extends r.a{constructor(){super("#headerNavigation"),this._initLoaderComponent()}start(){this._component.appendChild(this._loaderComponent),this._component.classList.add("pre-loader-running")}stop(){this._component.innerHTML="",this._component.classList.remove("pre-loader-running")}run(e){this.start(),e.then(()=>{this.stop()})}_initLoaderComponent(){this._loaderComponent=l.a.parse('\n        <div class="loader-panel">\n            <div id="loader4">\n                <span class="loader loader-1"></span>\n                <span class="loader loader-2"></span>\n                <span class="loader loader-3"></span>\n                <span class="loader loader-4"></span>\n            </div>\n        </div>\n        ')}_base(){return'\n        <div class="row" id="preLoader">\n            \n        </div>\n        '}}class c{constructor(){this._preLoader=new u,this._authService=new a.a,this._validAuthenticatedClient(),this._headerNav=new o("#headerNavigation",new s.a("click",e=>{this.doLogoff()})),this._dashboardNav=new i("#dashboardNavigation"),this._init()}doLogoff(){this._authService.logout(),this._authService.redirectToLoginPage()}_init(){throw new Error("the _init() method must be implemented")}_validAuthenticatedClient(){this._authService.hasValidToken().catch(()=>{this._authService.redirectToLoginPage()})}}},11:function(e,t,n){"use strict"},2:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));class r{constructor(e,t){this._type=e,this._action=t}get type(){return this._type}get action(){return this._action}}},34:function(e,t,n){"use strict";n.r(t);var r=n(10),i=n(0);n(1);i.a;
/*!
FullCalendar Core Package v4.4.2
Docs & License: https://fullcalendar.io/
(c) 2019 Adam Shaw
*/var o={className:!0,colSpan:!0,rowSpan:!0},s={"<tr":"tbody","<td":"tr"};function a(e,t,n){var r=document.createElement(e);if(t)for(var i in t)"style"===i?T(r,t[i]):o[i]?r[i]=t[i]:r.setAttribute(i,t[i]);return"string"==typeof n?r.innerHTML=n:null!=n&&d(r,n),r}function l(e){e=e.trim();var t=document.createElement(c(e));return t.innerHTML=e,t.firstChild}function u(e){return Array.prototype.slice.call(function(e){e=e.trim();var t=document.createElement(c(e));return t.innerHTML=e,t.childNodes}(e))}function c(e){return s[e.substr(0,3)]||"div"}function d(e,t){for(var n=f(t),r=0;r<n.length;r++)e.appendChild(n[r])}function p(e,t){for(var n=f(t),r=e.firstChild||null,i=0;i<n.length;i++)e.insertBefore(n[i],r)}function h(e,t){for(var n=f(t),r=e.nextSibling||null,i=0;i<n.length;i++)e.parentNode.insertBefore(n[i],r)}function f(e){return"string"==typeof e?u(e):e instanceof Node?[e]:Array.prototype.slice.call(e)}function v(e){e.parentNode&&e.parentNode.removeChild(e)}var g=Element.prototype.matches||Element.prototype.matchesSelector||Element.prototype.msMatchesSelector,y=Element.prototype.closest||function(e){var t=this;if(!document.documentElement.contains(t))return null;do{if(S(t,e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null};function m(e,t){return y.call(e,t)}function S(e,t){return g.call(e,t)}function E(e,t){for(var n=e instanceof HTMLElement?[e]:e,r=[],i=0;i<n.length;i++)for(var o=n[i].querySelectorAll(t),s=0;s<o.length;s++)r.push(o[s]);return r}function b(e,t){for(var n=e instanceof HTMLElement?[e]:e,r=[],i=0;i<n.length;i++)for(var o=n[i].children,s=0;s<o.length;s++){var a=o[s];t&&!S(a,t)||r.push(a)}return r}var w=/(top|left|right|bottom|width|height)$/i;function T(e,t){for(var n in t)D(e,n,t[n])}function D(e,t,n){null==n?e.style[t]="":"number"==typeof n&&w.test(t)?e.style[t]=n+"px":e.style[t]=n}var C=null;function R(){return null===C&&(C=function(){var e=a("div",{style:{position:"absolute",top:-1e3,left:0,border:0,padding:0,overflow:"scroll",direction:"rtl"}},"<div></div>");document.body.appendChild(e);var t=e.firstChild.getBoundingClientRect().left>e.getBoundingClientRect().left;return v(e),t}()),C}function k(e){return e=Math.max(0,e),e=Math.round(e)}function I(e,t){void 0===t&&(t=!1);var n=window.getComputedStyle(e),r=parseInt(n.borderLeftWidth,10)||0,i=parseInt(n.borderRightWidth,10)||0,o=parseInt(n.borderTopWidth,10)||0,s=parseInt(n.borderBottomWidth,10)||0,a=k(e.offsetWidth-e.clientWidth-r-i),l={borderLeft:r,borderRight:i,borderTop:o,borderBottom:s,scrollbarBottom:k(e.offsetHeight-e.clientHeight-o-s),scrollbarLeft:0,scrollbarRight:0};return R()&&"rtl"===n.direction?l.scrollbarLeft=a:l.scrollbarRight=a,t&&(l.paddingLeft=parseInt(n.paddingLeft,10)||0,l.paddingRight=parseInt(n.paddingRight,10)||0,l.paddingTop=parseInt(n.paddingTop,10)||0,l.paddingBottom=parseInt(n.paddingBottom,10)||0),l}function _(e){var t=e.getBoundingClientRect();return{left:t.left+window.pageXOffset,top:t.top+window.pageYOffset,right:t.right+window.pageXOffset,bottom:t.bottom+window.pageYOffset}}function M(e){return e.getBoundingClientRect().height+x(e)}function x(e){var t=window.getComputedStyle(e);return parseInt(t.marginTop,10)+parseInt(t.marginBottom,10)}function P(e){return function(e){for(var t=[];e instanceof HTMLElement;){var n=window.getComputedStyle(e);if("fixed"===n.position)break;/(auto|scroll)/.test(n.overflow+n.overflowY+n.overflowX)&&t.push(e),e=e.parentNode}return t}(e).map((function(e){return function(e,t){void 0===t&&(t=!1);var n=_(e),r=I(e,t),i={left:n.left+r.borderLeft+r.scrollbarLeft,right:n.right-r.borderRight-r.scrollbarRight,top:n.top+r.borderTop,bottom:n.bottom-r.borderBottom-r.scrollbarBottom};return t&&(i.left+=r.paddingLeft,i.right-=r.paddingRight,i.top+=r.paddingTop,i.bottom-=r.paddingBottom),i}(e)})).concat({left:window.pageXOffset,right:window.pageXOffset+document.documentElement.clientWidth,top:window.pageYOffset,bottom:window.pageYOffset+document.documentElement.clientHeight}).reduce((function(e,t){return function(e,t){var n={left:Math.max(e.left,t.left),right:Math.min(e.right,t.right),top:Math.max(e.top,t.top),bottom:Math.min(e.bottom,t.bottom)};return n.left<n.right&&n.top<n.bottom&&n}(e,t)||t}))}function O(e,t,n,r){function i(e){var t=m(e.target,n);t&&r.call(t,e,t)}return e.addEventListener(t,i),function(){e.removeEventListener(t,i)}}var H=["sun","mon","tue","wed","thu","fri","sat"];function N(e,t){var n=G(e);return n[2]+=7*t,Z(n)}function L(e,t){var n=G(e);return n[2]+=t,Z(n)}function z(e,t){var n=G(e);return n[6]+=t,Z(n)}function U(e,t){return(t.valueOf()-e.valueOf())/864e5}function B(e,t){return q(e)===q(t)?Math.round(U(e,t)):null}function V(e){return Z([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()])}function A(e,t,n,r){var i=Z([t,0,1+F(t,n,r)]),o=V(e),s=Math.round(U(i,o));return Math.floor(s/7)+1}function F(e,t,n){var r=7+t-n;return-((7+Z([e,0,r]).getUTCDay()-t)%7)+r-1}function W(e){return[e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()]}function j(e){return new Date(e[0],e[1]||0,null==e[2]?1:e[2],e[3]||0,e[4]||0,e[5]||0)}function G(e){return[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()]}function Z(e){return 1===e.length&&(e=e.concat([0])),new Date(Date.UTC.apply(Date,e))}function Y(e){return!isNaN(e.valueOf())}function q(e){return 1e3*e.getUTCHours()*60*60+1e3*e.getUTCMinutes()*60+1e3*e.getUTCSeconds()+e.getUTCMilliseconds()}var X=/^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;function J(e,t){var n;return"string"==typeof e?function(e){var t=X.exec(e);if(t){var n=t[1]?-1:1;return{years:0,months:0,days:n*(t[2]?parseInt(t[2],10):0),milliseconds:n*(60*(t[3]?parseInt(t[3],10):0)*60*1e3+60*(t[4]?parseInt(t[4],10):0)*1e3+1e3*(t[5]?parseInt(t[5],10):0)+(t[6]?parseInt(t[6],10):0))}}return null}(e):"object"==typeof e&&e?K(e):"number"==typeof e?K(((n={})[t||"milliseconds"]=e,n)):null}function K(e){return{years:e.years||e.year||0,months:e.months||e.month||0,days:(e.days||e.day||0)+7*$(e),milliseconds:60*(e.hours||e.hour||0)*60*1e3+60*(e.minutes||e.minute||0)*1e3+1e3*(e.seconds||e.second||0)+(e.milliseconds||e.millisecond||e.ms||0)}}function $(e){return e.weeks||e.week||0}function Q(e,t){return e.years===t.years&&e.months===t.months&&e.days===t.days&&e.milliseconds===t.milliseconds}function ee(e){return te(e)/864e5}function te(e){return 31536e6*e.years+2592e6*e.months+864e5*e.days+e.milliseconds}function ne(e,t){var n=e.milliseconds;if(n){if(n%1e3!=0)return{unit:"millisecond",value:n};if(n%6e4!=0)return{unit:"second",value:n/1e3};if(n%36e5!=0)return{unit:"minute",value:n/6e4};if(n)return{unit:"hour",value:n/36e5}}return e.days?t||e.days%7!=0?{unit:"day",value:e.days}:{unit:"week",value:e.days/7}:e.months?{unit:"month",value:e.months}:e.years?{unit:"year",value:e.years}:{unit:"millisecond",value:0}}function re(e,t,n){var r=Math.floor(t/e.length),i=Math.floor(t-r*(e.length-1)),o=[],s=[],a=[],l=0;ie(e),e.forEach((function(t,n){var u=n===e.length-1?i:r,c=t.getBoundingClientRect().height,d=c+x(t);d<u?(o.push(t),s.push(d),a.push(c)):l+=d})),n&&(t-=l,r=Math.floor(t/o.length),i=Math.floor(t-r*(o.length-1))),o.forEach((function(e,t){var n=t===o.length-1?i:r,l=s[t],u=n-(l-a[t]);l<n&&(e.style.height=u+"px")}))}function ie(e){e.forEach((function(e){e.style.height=""}))}function oe(e,t,n){return n.func?n.func(e,t):function(e,t){if(!e&&!t)return 0;if(null==t)return-1;if(null==e)return 1;if("string"==typeof e||"string"==typeof t)return String(e).localeCompare(String(t));return e-t}(e[n.field],t[n.field])*(n.order||1)}function se(e){return e.charAt(0).toUpperCase()+e.slice(1)}function ae(e,t){var n=String(e);return"000".substr(0,t-n.length)+n}function le(e){return e%1==0}function ue(e,t,n){if("function"==typeof e&&(e=[e]),e){var r=void 0,i=void 0;for(r=0;r<e.length;r++)i=e[r].apply(t,n)||i;return i}}function ce(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0;n<e.length;n++)if(void 0!==e[n])return e[n]}function de(e,t){var n,r,i,o,s,a=function(){var l=(new Date).valueOf()-o;l<t?n=setTimeout(a,t-l):(n=null,s=e.apply(i,r),i=r=null)};return function(){return i=this,r=arguments,o=(new Date).valueOf(),n||(n=setTimeout(a,t)),s}}function pe(e,t,n,r){void 0===n&&(n={});var i={};for(var o in t){var s=t[o];void 0!==e[o]?i[o]=s===Function?"function"==typeof e[o]?e[o]:null:s?s(e[o]):e[o]:void 0!==n[o]?i[o]=n[o]:s===String?i[o]="":s&&s!==Number&&s!==Boolean&&s!==Function?i[o]=s(null):i[o]=null}if(r)for(var o in e)void 0===t[o]&&(r[o]=e[o]);return i}function he(e){var t=Math.floor(U(e.start,e.end))||1,n=V(e.start);return{start:n,end:L(n,t)}}function fe(e,t){void 0===t&&(t=J(0));var n=null,r=null;if(e.end){r=V(e.end);var i=e.end.valueOf()-r.valueOf();i&&i>=te(t)&&(r=L(r,1))}return e.start&&(n=V(e.start),r&&r<=n&&(r=L(n,1))),{start:n,end:r}}function ve(e,t,n,r){return"year"===r?J(n.diffWholeYears(e,t),"year"):"month"===r?J(n.diffWholeMonths(e,t),"month"):(o=t,s=V(i=e),a=V(o),{years:0,months:0,days:Math.round(U(s,a)),milliseconds:o.valueOf()-a.valueOf()-(i.valueOf()-s.valueOf())});var i,o,s,a}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var ge=function(e,t){return(ge=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function ye(e,t){function n(){this.constructor=e}ge(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var me=function(){return(me=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function Se(e,t,n,r,i){var o=i[e.recurringDef.typeId].expand(e.recurringDef.typeData,{start:r.subtract(n.start,t),end:n.end},r);return e.allDay&&(o=o.map(V)),o}var Ee=Object.prototype.hasOwnProperty;function be(e,t){var n,r,i,o,s,a,l={};if(t)for(n=0;n<t.length;n++){for(r=t[n],i=[],o=e.length-1;o>=0;o--)if("object"==typeof(s=e[o][r])&&s)i.unshift(s);else if(void 0!==s){l[r]=s;break}i.length&&(l[r]=be(i))}for(n=e.length-1;n>=0;n--)for(r in a=e[n])r in l||(l[r]=a[r]);return l}function we(e,t){var n={};for(var r in e)t(e[r],r)&&(n[r]=e[r]);return n}function Te(e,t){var n={};for(var r in e)n[r]=t(e[r],r);return n}function De(e){for(var t={},n=0,r=e;n<r.length;n++){t[r[n]]=!0}return t}function Ce(e){var t=[];for(var n in e)t.push(e[n]);return t}function Re(e,t){for(var n in e)if(Ee.call(e,n)&&!(n in t))return!1;for(var n in t)if(Ee.call(t,n)&&e[n]!==t[n])return!1;return!0}function ke(e,t,n,r){for(var i={defs:{},instances:{}},o=0,s=e;o<s.length;o++){var a=Ut(s[o],t,n,r);a&&Ie(a,i)}return i}function Ie(e,t){return void 0===t&&(t={defs:{},instances:{}}),t.defs[e.def.defId]=e.def,e.instance&&(t.instances[e.instance.instanceId]=e.instance),t}function _e(e,t,n){var r=n.dateEnv,i=e.defs,o=e.instances;for(var s in o=we(o,(function(e){return!i[e.defId].recurringDef})),i){var a=i[s];if(a.recurringDef){var l=a.recurringDef.duration;l||(l=a.allDay?n.defaultAllDayEventDuration:n.defaultTimedEventDuration);for(var u=0,c=Se(a,l,t,n.dateEnv,n.pluginSystem.hooks.recurringTypes);u<c.length;u++){var d=c[u],p=Vt(s,{start:d,end:r.add(d,l)});o[p.instanceId]=p}}}return{defs:i,instances:o}}function Me(e,t){var n=e.instances[t];if(n){var r=e.defs[n.defId],i=Oe(e,(function(e){return t=r,n=e,Boolean(t.groupId&&t.groupId===n.groupId);var t,n}));return i.defs[r.defId]=r,i.instances[n.instanceId]=n,i}return{defs:{},instances:{}}}function xe(e,t){var n;if(t){n=[];for(var r=0,i=e;r<i.length;r++){var o=i[r],s=t(o);s?n.push(s):null==s&&n.push(o)}}else n=e;return n}function Pe(e,t){return{defs:me({},e.defs,t.defs),instances:me({},e.instances,t.instances)}}function Oe(e,t){var n=we(e.defs,t),r=we(e.instances,(function(e){return n[e.defId]}));return{defs:n,instances:r}}function He(e,t){var n=null,r=null;return e.start&&(n=t.createMarker(e.start)),e.end&&(r=t.createMarker(e.end)),n||r?n&&r&&r<n?null:{start:n,end:r}:null}function Ne(e,t){var n,r,i=[],o=t.start;for(e.sort(Le),n=0;n<e.length;n++)(r=e[n]).start>o&&i.push({start:o,end:r.start}),r.end>o&&(o=r.end);return o<t.end&&i.push({start:o,end:t.end}),i}function Le(e,t){return e.start.valueOf()-t.start.valueOf()}function ze(e,t){var n=e.start,r=e.end,i=null;return null!==t.start&&(n=null===n?t.start:new Date(Math.max(n.valueOf(),t.start.valueOf()))),null!=t.end&&(r=null===r?t.end:new Date(Math.min(r.valueOf(),t.end.valueOf()))),(null===n||null===r||n<r)&&(i={start:n,end:r}),i}function Ue(e,t){return(null===e.start?null:e.start.valueOf())===(null===t.start?null:t.start.valueOf())&&(null===e.end?null:e.end.valueOf())===(null===t.end?null:t.end.valueOf())}function Be(e,t){return(null===e.end||null===t.start||e.end>t.start)&&(null===e.start||null===t.end||e.start<t.end)}function Ve(e,t){return(null===e.start||null!==t.start&&t.start>=e.start)&&(null===e.end||null!==t.end&&t.end<=e.end)}function Ae(e,t){return(null===e.start||t>=e.start)&&(null===e.end||t<e.end)}function Fe(e,t){var n,r=e.length;if(r!==t.length)return!1;for(n=0;n<r;n++)if(e[n]!==t[n])return!1;return!0}function We(e){var t,n;return function(){return t&&Fe(t,arguments)||(t=arguments,n=e.apply(this,arguments)),n}}var je={week:3,separator:0,omitZeroMinute:0,meridiem:0,omitCommas:0},Ge={timeZoneName:7,era:6,year:5,month:4,day:2,weekday:2,hour:1,minute:1,second:1},Ze=/\s*([ap])\.?m\.?/i,Ye=/,/g,qe=/\s+/g,Xe=/\u200e/g,Je=/UTC|GMT/,Ke=function(){function e(e){var t={},n={},r=0;for(var i in e)i in je?(n[i]=e[i],r=Math.max(je[i],r)):(t[i]=e[i],i in Ge&&(r=Math.max(Ge[i],r)));this.standardDateProps=t,this.extendedSettings=n,this.severity=r,this.buildFormattingFunc=We($e)}return e.prototype.format=function(e,t){return this.buildFormattingFunc(this.standardDateProps,this.extendedSettings,t)(e)},e.prototype.formatRange=function(e,t,n){var r=this.standardDateProps,i=this.extendedSettings,o=function(e,t,n){if(n.getMarkerYear(e)!==n.getMarkerYear(t))return 5;if(n.getMarkerMonth(e)!==n.getMarkerMonth(t))return 4;if(n.getMarkerDay(e)!==n.getMarkerDay(t))return 2;if(q(e)!==q(t))return 1;return 0}(e.marker,t.marker,n.calendarSystem);if(!o)return this.format(e,n);var s=o;!(s>1)||"numeric"!==r.year&&"2-digit"!==r.year||"numeric"!==r.month&&"2-digit"!==r.month||"numeric"!==r.day&&"2-digit"!==r.day||(s=1);var a=this.format(e,n),l=this.format(t,n);if(a===l)return a;var u=$e(function(e,t){var n={};for(var r in e)(!(r in Ge)||Ge[r]<=t)&&(n[r]=e[r]);return n}(r,s),i,n),c=u(e),d=u(t),p=function(e,t,n,r){var i=0;for(;i<e.length;){var o=e.indexOf(t,i);if(-1===o)break;var s=e.substr(0,o);i=o+t.length;for(var a=e.substr(i),l=0;l<n.length;){var u=n.indexOf(r,l);if(-1===u)break;var c=n.substr(0,u);l=u+r.length;var d=n.substr(l);if(s===c&&a===d)return{before:s,after:a}}}return null}(a,c,l,d),h=i.separator||"";return p?p.before+c+h+d+p.after:a+h+l},e.prototype.getLargestUnit=function(){switch(this.severity){case 7:case 6:case 5:return"year";case 4:return"month";case 3:return"week";default:return"day"}},e}();function $e(e,t,n){var r=Object.keys(e).length;return 1===r&&"short"===e.timeZoneName?function(e){return nt(e.timeZoneOffset)}:0===r&&t.week?function(e){return function(e,t,n,r){var i=[];"narrow"===r?i.push(t):"short"===r&&i.push(t," ");i.push(n.simpleNumberFormat.format(e)),n.options.isRtl&&i.reverse();return i.join("")}(n.computeWeekNumber(e.marker),n.weekLabel,n.locale,t.week)}:function(e,t,n){e=me({},e),t=me({},t),function(e,t){e.timeZoneName&&(e.hour||(e.hour="2-digit"),e.minute||(e.minute="2-digit"));"long"===e.timeZoneName&&(e.timeZoneName="short");t.omitZeroMinute&&(e.second||e.millisecond)&&delete t.omitZeroMinute}(e,t),e.timeZone="UTC";var r,i=new Intl.DateTimeFormat(n.locale.codes,e);if(t.omitZeroMinute){var o=me({},e);delete o.minute,r=new Intl.DateTimeFormat(n.locale.codes,o)}return function(o){var s=o.marker;return function(e,t,n,r,i){e=e.replace(Xe,""),"short"===n.timeZoneName&&(e=function(e,t){var n=!1;e=e.replace(Je,(function(){return n=!0,t})),n||(e+=" "+t);return e}(e,"UTC"===i.timeZone||null==t.timeZoneOffset?"UTC":nt(t.timeZoneOffset)));r.omitCommas&&(e=e.replace(Ye,"").trim());r.omitZeroMinute&&(e=e.replace(":00",""));!1===r.meridiem?e=e.replace(Ze,"").trim():"narrow"===r.meridiem?e=e.replace(Ze,(function(e,t){return t.toLocaleLowerCase()})):"short"===r.meridiem?e=e.replace(Ze,(function(e,t){return t.toLocaleLowerCase()+"m"})):"lowercase"===r.meridiem&&(e=e.replace(Ze,(function(e){return e.toLocaleLowerCase()})));return e=(e=e.replace(qe," ")).trim()}((r&&!s.getUTCMinutes()?r:i).format(s),o,e,t,n)}}(e,t,n)}var Qe=function(){function e(e,t){this.cmdStr=e,this.separator=t}return e.prototype.format=function(e,t){return t.cmdFormatter(this.cmdStr,rt(e,null,t,this.separator))},e.prototype.formatRange=function(e,t,n){return n.cmdFormatter(this.cmdStr,rt(e,t,n,this.separator))},e}(),et=function(){function e(e){this.func=e}return e.prototype.format=function(e,t){return this.func(rt(e,null,t))},e.prototype.formatRange=function(e,t,n){return this.func(rt(e,t,n))},e}();function tt(e,t){return"object"==typeof e&&e?("string"==typeof t&&(e=me({separator:t},e)),new Ke(e)):"string"==typeof e?new Qe(e,t):"function"==typeof e?new et(e):void 0}function nt(e,t){void 0===t&&(t=!1);var n=e<0?"-":"+",r=Math.abs(e),i=Math.floor(r/60),o=Math.round(r%60);return t?n+ae(i,2)+":"+ae(o,2):"GMT"+n+i+(o?":"+ae(o,2):"")}function rt(e,t,n,r){var i=it(e,n.calendarSystem);return{date:i,start:i,end:t?it(t,n.calendarSystem):null,timeZone:n.timeZone,localeCodes:n.locale.codes,separator:r}}function it(e,t){var n=t.markerToArray(e.marker);return{marker:e.marker,timeZoneOffset:e.timeZoneOffset,array:n,year:n[0],month:n[1],day:n[2],hour:n[3],minute:n[4],second:n[5],millisecond:n[6]}}var ot=function(){function e(e,t){this.calendar=e,this.internalEventSource=t}return e.prototype.remove=function(){this.calendar.dispatch({type:"REMOVE_EVENT_SOURCE",sourceId:this.internalEventSource.sourceId})},e.prototype.refetch=function(){this.calendar.dispatch({type:"FETCH_EVENT_SOURCES",sourceIds:[this.internalEventSource.sourceId]})},Object.defineProperty(e.prototype,"id",{get:function(){return this.internalEventSource.publicId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"url",{get:function(){return this.internalEventSource.meta.url},enumerable:!0,configurable:!0}),e}(),st=function(){function e(e,t,n){this._calendar=e,this._def=t,this._instance=n||null}return e.prototype.setProp=function(e,t){var n,r;if(e in Lt);else if(e in Nt)"function"==typeof Nt[e]&&(t=Nt[e](t)),this.mutate({standardProps:(n={},n[e]=t,n)});else if(e in _t){var i=void 0;"function"==typeof _t[e]&&(t=_t[e](t)),"color"===e?i={backgroundColor:t,borderColor:t}:"editable"===e?i={startEditable:t,durationEditable:t}:((r={})[e]=t,i=r),this.mutate({standardProps:{ui:i}})}},e.prototype.setExtendedProp=function(e,t){var n;this.mutate({extendedProps:(n={},n[e]=t,n)})},e.prototype.setStart=function(e,t){void 0===t&&(t={});var n=this._calendar.dateEnv,r=n.createMarker(e);if(r&&this._instance){var i=ve(this._instance.range.start,r,n,t.granularity);t.maintainDuration?this.mutate({datesDelta:i}):this.mutate({startDelta:i})}},e.prototype.setEnd=function(e,t){void 0===t&&(t={});var n,r=this._calendar.dateEnv;if((null==e||(n=r.createMarker(e)))&&this._instance)if(n){var i=ve(this._instance.range.end,n,r,t.granularity);this.mutate({endDelta:i})}else this.mutate({standardProps:{hasEnd:!1}})},e.prototype.setDates=function(e,t,n){void 0===n&&(n={});var r,i=this._calendar.dateEnv,o={allDay:n.allDay},s=i.createMarker(e);if(s&&(null==t||(r=i.createMarker(t)))&&this._instance){var a=this._instance.range;!0===n.allDay&&(a=he(a));var l=ve(a.start,s,i,n.granularity);if(r){var u=ve(a.end,r,i,n.granularity);Q(l,u)?this.mutate({datesDelta:l,standardProps:o}):this.mutate({startDelta:l,endDelta:u,standardProps:o})}else o.hasEnd=!1,this.mutate({datesDelta:l,standardProps:o})}},e.prototype.moveStart=function(e){var t=J(e);t&&this.mutate({startDelta:t})},e.prototype.moveEnd=function(e){var t=J(e);t&&this.mutate({endDelta:t})},e.prototype.moveDates=function(e){var t=J(e);t&&this.mutate({datesDelta:t})},e.prototype.setAllDay=function(e,t){void 0===t&&(t={});var n={allDay:e},r=t.maintainDuration;null==r&&(r=this._calendar.opt("allDayMaintainDuration")),this._def.allDay!==e&&(n.hasEnd=r),this.mutate({standardProps:n})},e.prototype.formatRange=function(e){var t=this._calendar.dateEnv,n=this._instance,r=tt(e,this._calendar.opt("defaultRangeSeparator"));return this._def.hasEnd?t.formatRange(n.range.start,n.range.end,r,{forcedStartTzo:n.forcedStartTzo,forcedEndTzo:n.forcedEndTzo}):t.format(n.range.start,r,{forcedTzo:n.forcedStartTzo})},e.prototype.mutate=function(e){var t=this._def,n=this._instance;if(n){this._calendar.dispatch({type:"MUTATE_EVENTS",instanceId:n.instanceId,mutation:e,fromApi:!0});var r=this._calendar.state.eventStore;this._def=r.defs[t.defId],this._instance=r.instances[n.instanceId]}},e.prototype.remove=function(){this._calendar.dispatch({type:"REMOVE_EVENT_DEF",defId:this._def.defId})},Object.defineProperty(e.prototype,"source",{get:function(){var e=this._def.sourceId;return e?new ot(this._calendar,this._calendar.state.eventSources[e]):null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return this._instance?this._calendar.dateEnv.toDate(this._instance.range.start):null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._instance&&this._def.hasEnd?this._calendar.dateEnv.toDate(this._instance.range.end):null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._def.publicId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"groupId",{get:function(){return this._def.groupId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"allDay",{get:function(){return this._def.allDay},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"title",{get:function(){return this._def.title},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"url",{get:function(){return this._def.url},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rendering",{get:function(){return this._def.rendering},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"startEditable",{get:function(){return this._def.ui.startEditable},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"durationEditable",{get:function(){return this._def.ui.durationEditable},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"constraint",{get:function(){return this._def.ui.constraints[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"overlap",{get:function(){return this._def.ui.overlap},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"allow",{get:function(){return this._def.ui.allows[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"backgroundColor",{get:function(){return this._def.ui.backgroundColor},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"borderColor",{get:function(){return this._def.ui.borderColor},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textColor",{get:function(){return this._def.ui.textColor},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classNames",{get:function(){return this._def.ui.classNames},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extendedProps",{get:function(){return this._def.extendedProps},enumerable:!0,configurable:!0}),e}();function at(e,t,n,r){var i={},o={},s={},a=[],l=[],u=dt(e.defs,t);for(var c in e.defs){"inverse-background"===(E=e.defs[c]).rendering&&(E.groupId?(i[E.groupId]=[],s[E.groupId]||(s[E.groupId]=E)):o[c]=[])}for(var d in e.instances){var p=e.instances[d],h=u[(E=e.defs[p.defId]).defId],f=p.range,v=!E.allDay&&r?fe(f,r):f,g=ze(v,n);g&&("inverse-background"===E.rendering?E.groupId?i[E.groupId].push(g):o[p.defId].push(g):("background"===E.rendering?a:l).push({def:E,ui:h,instance:p,range:g,isStart:v.start&&v.start.valueOf()===g.start.valueOf(),isEnd:v.end&&v.end.valueOf()===g.end.valueOf()}))}for(var y in i)for(var m=0,S=Ne(i[y],n);m<S.length;m++){var E,b=S[m];h=u[(E=s[y]).defId];a.push({def:E,ui:h,instance:null,range:b,isStart:!1,isEnd:!1})}for(var c in o)for(var w=0,T=Ne(o[c],n);w<T.length;w++){b=T[w];a.push({def:e.defs[c],ui:u[c],instance:null,range:b,isStart:!1,isEnd:!1})}return{bg:a,fg:l}}function lt(e,t,n){var r=e.calendar,i=e.view;r.hasPublicHandlers("eventRender")&&(t=t.filter((function(e){var t=r.publiclyTrigger("eventRender",[{event:new st(r,e.eventRange.def,e.eventRange.instance),isMirror:n,isStart:e.isStart,isEnd:e.isEnd,el:e.el,view:i}]);return!1!==t&&(t&&!0!==t&&(e.el=t),!0)})));for(var o=0,s=t;o<s.length;o++){var a=s[o];ut(a.el,a)}return t}function ut(e,t){e.fcSeg=t}function ct(e){return e.fcSeg||null}function dt(e,t){return Te(e,(function(e){return pt(e,t)}))}function pt(e,t){var n=[];return t[""]&&n.push(t[""]),t[e.defId]&&n.push(t[e.defId]),n.push(e.ui),Ot(n)}function ht(e,t,n){var r=e.calendar,i=e.view;if(r.hasPublicHandlers("eventPositioned"))for(var o=0,s=t;o<s.length;o++){var a=s[o];r.publiclyTriggerAfterSizing("eventPositioned",[{event:new st(r,a.eventRange.def,a.eventRange.instance),isMirror:n,isStart:a.isStart,isEnd:a.isEnd,el:a.el,view:i}])}r.state.eventSourceLoadingLevel||(r.afterSizingTriggers._eventsPositioned=[null])}function ft(e,t,n){for(var r=e.calendar,i=e.view,o=0,s=t;o<s.length;o++){var a=s[o];r.trigger("eventElRemove",a.el)}if(r.hasPublicHandlers("eventDestroy"))for(var l=0,u=t;l<u.length;l++){a=u[l];r.publiclyTrigger("eventDestroy",[{event:new st(r,a.eventRange.def,a.eventRange.instance),isMirror:n,el:a.el,view:i}])}}function vt(e,t,n,r,i){var o=n.standardProps||{};null==o.hasEnd&&t.durationEditable&&(n.startDelta||n.endDelta)&&(o.hasEnd=!0);var s=me({},e,o,{ui:me({},e.ui,o.ui)});n.extendedProps&&(s.extendedProps=me({},s.extendedProps,n.extendedProps));for(var a=0,l=r;a<l.length;a++){(0,l[a])(s,n,i)}return!s.hasEnd&&i.opt("forceEventDuration")&&(s.hasEnd=!0),s}function gt(e,t,n,r,i){var o=i.dateEnv,s=r.standardProps&&!0===r.standardProps.allDay,a=r.standardProps&&!1===r.standardProps.hasEnd,l=me({},e);return s&&(l.range=he(l.range)),r.datesDelta&&n.startEditable&&(l.range={start:o.add(l.range.start,r.datesDelta),end:o.add(l.range.end,r.datesDelta)}),r.startDelta&&n.durationEditable&&(l.range={start:o.add(l.range.start,r.startDelta),end:l.range.end}),r.endDelta&&n.durationEditable&&(l.range={start:l.range.start,end:o.add(l.range.end,r.endDelta)}),a&&(l.range={start:l.range.start,end:i.getDefaultEventEnd(t.allDay,l.range.start)}),t.allDay&&(l.range={start:V(l.range.start),end:V(l.range.end)}),l.range.end<l.range.start&&(l.range.end=i.getDefaultEventEnd(t.allDay,l.range.start)),l}function yt(e,t,n,r,i){switch(t.type){case"RECEIVE_EVENTS":return function(e,t,n,r,i,o){if(t&&n===t.latestFetchId){var s=ke(function(e,t,n){var r=n.opt("eventDataTransform"),i=t?t.eventDataTransform:null;return i&&(e=xe(e,i)),r&&(e=xe(e,r)),e}(i,t,o),t.sourceId,o);return r&&(s=_e(s,r,o)),Pe(mt(e,t.sourceId),s)}return e}(e,n[t.sourceId],t.fetchId,t.fetchRange,t.rawEvents,i);case"ADD_EVENTS":return function(e,t,n,r){n&&(t=_e(t,n,r));return Pe(e,t)}(e,t.eventStore,r?r.activeRange:null,i);case"MERGE_EVENTS":return Pe(e,t.eventStore);case"PREV":case"NEXT":case"SET_DATE":case"SET_VIEW_TYPE":return r?_e(e,r.activeRange,i):e;case"CHANGE_TIMEZONE":return function(e,t,n){var r=e.defs,i=Te(e.instances,(function(e){var i=r[e.defId];return i.allDay||i.recurringDef?e:me({},e,{range:{start:n.createMarker(t.toDate(e.range.start,e.forcedStartTzo)),end:n.createMarker(t.toDate(e.range.end,e.forcedEndTzo))},forcedStartTzo:n.canComputeOffset?null:e.forcedStartTzo,forcedEndTzo:n.canComputeOffset?null:e.forcedEndTzo})}));return{defs:r,instances:i}}(e,t.oldDateEnv,i.dateEnv);case"MUTATE_EVENTS":return function(e,t,n,r,i){var o=Me(e,t),s=r?{"":{startEditable:!0,durationEditable:!0,constraints:[],overlap:null,allows:[],backgroundColor:"",borderColor:"",textColor:"",classNames:[]}}:i.eventUiBases;return o=function(e,t,n,r){var i=dt(e.defs,t),o={defs:{},instances:{}};for(var s in e.defs){var a=e.defs[s];o.defs[s]=vt(a,i[s],n,r.pluginSystem.hooks.eventDefMutationAppliers,r)}for(var l in e.instances){var u=e.instances[l];a=o.defs[u.defId];o.instances[l]=gt(u,a,i[u.defId],n,r)}return o}(o,s,n,i),Pe(e,o)}(e,t.instanceId,t.mutation,t.fromApi,i);case"REMOVE_EVENT_INSTANCES":return St(e,t.instances);case"REMOVE_EVENT_DEF":return Oe(e,(function(e){return e.defId!==t.defId}));case"REMOVE_EVENT_SOURCE":return mt(e,t.sourceId);case"REMOVE_ALL_EVENT_SOURCES":return Oe(e,(function(e){return!e.sourceId}));case"REMOVE_ALL_EVENTS":return{defs:{},instances:{}};case"RESET_EVENTS":return{defs:e.defs,instances:e.instances};default:return e}}function mt(e,t){return Oe(e,(function(e){return e.sourceId!==t}))}function St(e,t){return{defs:e.defs,instances:we(e.instances,(function(e){return!t[e.instanceId]}))}}function Et(e,t){var n=t.view,r=me({businessHours:n?n.props.businessHours:{defs:{},instances:{}},dateSelection:"",eventStore:t.state.eventStore,eventUiBases:t.eventUiBases,eventSelection:"",eventDrag:null,eventResize:null},e);return(t.pluginSystem.hooks.isPropsValid||bt)(r,t)}function bt(e,t,n,r){return void 0===n&&(n={}),!(e.eventDrag&&!function(e,t,n,r){var i=e.eventDrag,o=i.mutatedEvents,s=o.defs,a=o.instances,l=dt(s,i.isEvent?e.eventUiBases:{"":t.selectionConfig});r&&(l=Te(l,r));var u=St(e.eventStore,i.affectedEvents.instances),c=u.defs,d=u.instances,p=dt(c,e.eventUiBases);for(var h in a){var f=a[h],v=f.range,g=l[f.defId],y=s[f.defId];if(!wt(g.constraints,v,u,e.businessHours,t))return!1;var m=t.opt("eventOverlap");for(var S in"function"!=typeof m&&(m=null),d){var E=d[S];if(Be(v,E.range)){if(!1===p[E.defId].overlap&&i.isEvent)return!1;if(!1===g.overlap)return!1;if(m&&!m(new st(t,c[E.defId],E),new st(t,y,f)))return!1}}for(var b=t.state.eventStore,w=0,T=g.allows;w<T.length;w++){var D=T[w],C=me({},n,{range:f.range,allDay:y.allDay}),R=b.defs[y.defId],k=b.instances[h],I=void 0;if(I=R?new st(t,R,k):new st(t,y),!D(t.buildDateSpanApi(C),I))return!1}}return!0}(e,t,n,r))&&!(e.dateSelection&&!function(e,t,n,r){var i=e.eventStore,o=i.defs,s=i.instances,a=e.dateSelection,l=a.range,u=t.selectionConfig;r&&(u=r(u));if(!wt(u.constraints,l,i,e.businessHours,t))return!1;var c=t.opt("selectOverlap");"function"!=typeof c&&(c=null);for(var d in s){var p=s[d];if(Be(l,p.range)){if(!1===u.overlap)return!1;if(c&&!c(new st(t,o[p.defId],p)))return!1}}for(var h=0,f=u.allows;h<f.length;h++){var v=f[h],g=me({},n,a);if(!v(t.buildDateSpanApi(g),null))return!1}return!0}(e,t,n,r))}function wt(e,t,n,r,i){for(var o=0,s=e;o<s.length;o++){if(!Ct(Tt(s[o],t,n,r,i),t))return!1}return!0}function Tt(e,t,n,r,i){return"businessHours"===e?Dt(_e(r,t,i)):"string"==typeof e?Dt(Oe(n,(function(t){return t.groupId===e}))):"object"==typeof e&&e?Dt(_e(e,t,i)):[]}function Dt(e){var t=e.instances,n=[];for(var r in t)n.push(t[r].range);return n}function Ct(e,t){for(var n=0,r=e;n<r.length;n++){if(Ve(r[n],t))return!0}return!1}function Rt(e){return(e+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/'/g,"&#039;").replace(/"/g,"&quot;").replace(/\n/g,"<br />")}function kt(e){var t=[];for(var n in e){var r=e[n];null!=r&&""!==r&&t.push(n+":"+r)}return t.join(";")}function It(e){return Array.isArray(e)?e:"string"==typeof e?e.split(/\s+/):[]}var _t={editable:Boolean,startEditable:Boolean,durationEditable:Boolean,constraint:null,overlap:null,allow:null,className:It,classNames:It,color:String,backgroundColor:String,borderColor:String,textColor:String};function Mt(e,t,n){var r=pe(e,_t,{},n),i=function(e,t){return Array.isArray(e)?ke(e,"",t,!0):"object"==typeof e&&e?ke([e],"",t,!0):null!=e?String(e):null}(r.constraint,t);return{startEditable:null!=r.startEditable?r.startEditable:r.editable,durationEditable:null!=r.durationEditable?r.durationEditable:r.editable,constraints:null!=i?[i]:[],overlap:r.overlap,allows:null!=r.allow?[r.allow]:[],backgroundColor:r.backgroundColor||r.color,borderColor:r.borderColor||r.color,textColor:r.textColor,classNames:r.classNames.concat(r.className)}}function xt(e,t,n,r){var i={},o={};for(var s in _t){var a=e+se(s);i[s]=t[a],o[a]=!0}if("event"===e&&(i.editable=t.editable),r)for(var s in t)o[s]||(r[s]=t[s]);return Mt(i,n)}var Pt={startEditable:null,durationEditable:null,constraints:[],overlap:null,allows:[],backgroundColor:"",borderColor:"",textColor:"",classNames:[]};function Ot(e){return e.reduce(Ht,Pt)}function Ht(e,t){return{startEditable:null!=t.startEditable?t.startEditable:e.startEditable,durationEditable:null!=t.durationEditable?t.durationEditable:e.durationEditable,constraints:e.constraints.concat(t.constraints),overlap:"boolean"==typeof t.overlap?t.overlap:e.overlap,allows:e.allows.concat(t.allows),backgroundColor:t.backgroundColor||e.backgroundColor,borderColor:t.borderColor||e.borderColor,textColor:t.textColor||e.textColor,classNames:e.classNames.concat(t.classNames)}}var Nt={id:String,groupId:String,title:String,url:String,rendering:String,extendedProps:null},Lt={start:null,date:null,end:null,allDay:null},zt=0;function Ut(e,t,n,r){var i=function(e,t){var n=null;if(e){var r=t.state.eventSources[e];n=r.allDayDefault}null==n&&(n=t.opt("allDayDefault"));return n}(t,n),o={},s=function(e,t,n,r,i){for(var o=0;o<r.length;o++){var s={},a=r[o].parse(e,s,n);if(a){var l=s.allDay;return delete s.allDay,null==l&&null==(l=t)&&null==(l=a.allDayGuess)&&(l=!1),me(i,s),{allDay:l,duration:a.duration,typeData:a.typeData,typeId:o}}}return null}(e,i,n.dateEnv,n.pluginSystem.hooks.recurringTypes,o);if(s)return(a=Bt(o,t,s.allDay,Boolean(s.duration),n)).recurringDef={typeId:s.typeId,typeData:s.typeData,duration:s.duration},{def:a,instance:null};var a,l={},u=function(e,t,n,r,i){var o,s,a=function(e,t){var n=pe(e,Lt,{},t);return n.start=null!==n.start?n.start:n.date,delete n.date,n}(e,r),l=a.allDay,u=null,c=!1,d=null;if(o=n.dateEnv.createMarkerMeta(a.start))u=o.marker;else if(!i)return null;null!=a.end&&(s=n.dateEnv.createMarkerMeta(a.end));null==l&&(l=null!=t?t:(!o||o.isTimeUnspecified)&&(!s||s.isTimeUnspecified));l&&u&&(u=V(u));s&&(d=s.marker,l&&(d=V(d)),u&&d<=u&&(d=null));d?c=!0:i||(c=n.opt("forceEventDuration")||!1,d=n.dateEnv.add(u,l?n.defaultAllDayEventDuration:n.defaultTimedEventDuration));return{allDay:l,hasEnd:c,range:{start:u,end:d},forcedStartTzo:o?o.forcedTzo:null,forcedEndTzo:s?s.forcedTzo:null}}(e,i,n,l,r);return u?{def:a=Bt(l,t,u.allDay,u.hasEnd,n),instance:Vt(a.defId,u.range,u.forcedStartTzo,u.forcedEndTzo)}:null}function Bt(e,t,n,r,i){var o={},s=function(e,t,n){var r={},i=pe(e,Nt,{},r),o=Mt(r,t,n);return i.publicId=i.id,delete i.id,i.ui=o,i}(e,i,o);s.defId=String(zt++),s.sourceId=t,s.allDay=n,s.hasEnd=r;for(var a=0,l=i.pluginSystem.hooks.eventDefParsers;a<l.length;a++){var u={};(0,l[a])(s,o,u),o=u}return s.extendedProps=me(o,s.extendedProps||{}),Object.freeze(s.ui.classNames),Object.freeze(s.extendedProps),s}function Vt(e,t,n,r){return{instanceId:String(zt++),defId:e,range:t,forcedStartTzo:null==n?null:n,forcedEndTzo:null==r?null:r}}var At={startTime:"09:00",endTime:"17:00",daysOfWeek:[1,2,3,4,5],rendering:"inverse-background",classNames:"fc-nonbusiness",groupId:"_businessHours"};function Ft(e,t){return ke(function(e){var t;t=!0===e?[{}]:Array.isArray(e)?e.filter((function(e){return e.daysOfWeek})):"object"==typeof e&&e?[e]:[];return t=t.map((function(e){return me({},At,e)}))}(e),"",t)}function Wt(e,t,n){void 0===n&&(n=[]);var r,i,o=[];function s(){if(i){for(var e=0,n=o;e<n.length;e++){n[e].unrender()}t&&t.apply(r,i),i=null}}function a(){i&&Fe(i,arguments)||(s(),r=this,i=arguments,e.apply(this,arguments))}a.dependents=o,a.unrender=s;for(var l=0,u=n;l<u.length;l++){u[l].dependents.push(a)}return a}var jt={defs:{},instances:{}};!function(){function e(){this.getKeysForEventDefs=We(this._getKeysForEventDefs),this.splitDateSelection=We(this._splitDateSpan),this.splitEventStore=We(this._splitEventStore),this.splitIndividualUi=We(this._splitIndividualUi),this.splitEventDrag=We(this._splitInteraction),this.splitEventResize=We(this._splitInteraction),this.eventUiBuilders={}}e.prototype.splitProps=function(e){var t=this,n=this.getKeyInfo(e),r=this.getKeysForEventDefs(e.eventStore),i=this.splitDateSelection(e.dateSelection),o=this.splitIndividualUi(e.eventUiBases,r),s=this.splitEventStore(e.eventStore,r),a=this.splitEventDrag(e.eventDrag),l=this.splitEventResize(e.eventResize),u={};for(var c in this.eventUiBuilders=Te(n,(function(e,n){return t.eventUiBuilders[n]||We(Gt)})),n){var d=n[c],p=s[c]||jt,h=this.eventUiBuilders[c];u[c]={businessHours:d.businessHours||e.businessHours,dateSelection:i[c]||null,eventStore:p,eventUiBases:h(e.eventUiBases[""],d.ui,o[c]),eventSelection:p.instances[e.eventSelection]?e.eventSelection:"",eventDrag:a[c]||null,eventResize:l[c]||null}}return u},e.prototype._splitDateSpan=function(e){var t={};if(e)for(var n=0,r=this.getKeysForDateSpan(e);n<r.length;n++){t[r[n]]=e}return t},e.prototype._getKeysForEventDefs=function(e){var t=this;return Te(e.defs,(function(e){return t.getKeysForEventDef(e)}))},e.prototype._splitEventStore=function(e,t){var n=e.defs,r=e.instances,i={};for(var o in n)for(var s=0,a=t[o];s<a.length;s++){i[p=a[s]]||(i[p]={defs:{},instances:{}}),i[p].defs[o]=n[o]}for(var l in r)for(var u=r[l],c=0,d=t[u.defId];c<d.length;c++){var p;i[p=d[c]]&&(i[p].instances[l]=u)}return i},e.prototype._splitIndividualUi=function(e,t){var n={};for(var r in e)if(r)for(var i=0,o=t[r];i<o.length;i++){var s=o[i];n[s]||(n[s]={}),n[s][r]=e[r]}return n},e.prototype._splitInteraction=function(e){var t={};if(e){var n=this._splitEventStore(e.affectedEvents,this._getKeysForEventDefs(e.affectedEvents)),r=this._getKeysForEventDefs(e.mutatedEvents),i=this._splitEventStore(e.mutatedEvents,r),o=function(r){t[r]||(t[r]={affectedEvents:n[r]||jt,mutatedEvents:i[r]||jt,isEvent:e.isEvent,origSeg:e.origSeg})};for(var s in n)o(s);for(var s in i)o(s)}return t}}();function Gt(e,t,n){var r=[];e&&r.push(e),t&&r.push(t);var i={"":Ot(r)};return n&&me(i,n),i}function Zt(e,t,n,r,i){var o,s,a,l;return n instanceof Date?o=n:(o=n.date,s=n.type,a=n.forceOff),l={date:t.formatIso(o,{omitTime:!0}),type:s||"day"},"string"==typeof r&&(i=r,r=null),r=r?" "+function(e){var t=[];for(var n in e){var r=e[n];null!=r&&t.push(n+'="'+Rt(r)+'"')}return t.join(" ")}(r):"",i=i||"",!a&&e.navLinks?"<a"+r+' data-goto="'+Rt(JSON.stringify(l))+'">'+i+"</a>":"<span"+r+">"+i+"</span>"}function Yt(e,t,n,r){var i,o,s=n.calendar,a=n.options,l=n.theme,u=n.dateEnv,c=[];return Ae(t.activeRange,e)?(c.push("fc-"+H[e.getUTCDay()]),a.monthMode&&u.getMonth(e)!==u.getMonth(t.currentRange.start)&&c.push("fc-other-month"),o=L(i=V(s.getNow()),1),e<i?c.push("fc-past"):e>=o?c.push("fc-future"):(c.push("fc-today"),!0!==r&&c.push(l.getClass("today")))):c.push("fc-disabled-day"),c}var qt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ye(t,e),t.prototype.on=function(e,t){return Xt(this._handlers||(this._handlers={}),e,t),this},t.prototype.one=function(e,t){return Xt(this._oneHandlers||(this._oneHandlers={}),e,t),this},t.prototype.off=function(e,t){return this._handlers&&Jt(this._handlers,e,t),this._oneHandlers&&Jt(this._oneHandlers,e,t),this},t.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return this.triggerWith(e,this,t),this},t.prototype.triggerWith=function(e,t,n){return this._handlers&&ue(this._handlers[e],t,n),this._oneHandlers&&(ue(this._oneHandlers[e],t,n),delete this._oneHandlers[e]),this},t.prototype.hasHandlers=function(e){return this._handlers&&this._handlers[e]&&this._handlers[e].length||this._oneHandlers&&this._oneHandlers[e]&&this._oneHandlers[e].length},t}(function(){function e(){}return e.mixInto=function(e){this.mixIntoObj(e.prototype)},e.mixIntoObj=function(e){var t=this;Object.getOwnPropertyNames(this.prototype).forEach((function(n){e[n]||(e[n]=t.prototype[n])}))},e.mixOver=function(e){var t=this;Object.getOwnPropertyNames(this.prototype).forEach((function(n){e.prototype[n]=t.prototype[n]}))},e}());function Xt(e,t,n){(e[t]||(e[t]=[])).push(n)}function Jt(e,t,n){n?e[t]&&(e[t]=e[t].filter((function(e){return e!==n}))):delete e[t]}var Kt=function(){function e(e,t,n,r){this.originEl=e,this.els=t,this.isHorizontal=n,this.isVertical=r}return e.prototype.build=function(){var e=this.originEl,t=this.originClientRect=e.getBoundingClientRect();this.isHorizontal&&this.buildElHorizontals(t.left),this.isVertical&&this.buildElVerticals(t.top)},e.prototype.buildElHorizontals=function(e){for(var t=[],n=[],r=0,i=this.els;r<i.length;r++){var o=i[r].getBoundingClientRect();t.push(o.left-e),n.push(o.right-e)}this.lefts=t,this.rights=n},e.prototype.buildElVerticals=function(e){for(var t=[],n=[],r=0,i=this.els;r<i.length;r++){var o=i[r].getBoundingClientRect();t.push(o.top-e),n.push(o.bottom-e)}this.tops=t,this.bottoms=n},e.prototype.leftToIndex=function(e){var t,n=this.lefts,r=this.rights,i=n.length;for(t=0;t<i;t++)if(e>=n[t]&&e<r[t])return t},e.prototype.topToIndex=function(e){var t,n=this.tops,r=this.bottoms,i=n.length;for(t=0;t<i;t++)if(e>=n[t]&&e<r[t])return t},e.prototype.getWidth=function(e){return this.rights[e]-this.lefts[e]},e.prototype.getHeight=function(e){return this.bottoms[e]-this.tops[e]},e}(),$t=function(){function e(){}return e.prototype.getMaxScrollTop=function(){return this.getScrollHeight()-this.getClientHeight()},e.prototype.getMaxScrollLeft=function(){return this.getScrollWidth()-this.getClientWidth()},e.prototype.canScrollVertically=function(){return this.getMaxScrollTop()>0},e.prototype.canScrollHorizontally=function(){return this.getMaxScrollLeft()>0},e.prototype.canScrollUp=function(){return this.getScrollTop()>0},e.prototype.canScrollDown=function(){return this.getScrollTop()<this.getMaxScrollTop()},e.prototype.canScrollLeft=function(){return this.getScrollLeft()>0},e.prototype.canScrollRight=function(){return this.getScrollLeft()<this.getMaxScrollLeft()},e}(),Qt=function(e){function t(t){var n=e.call(this)||this;return n.el=t,n}return ye(t,e),t.prototype.getScrollTop=function(){return this.el.scrollTop},t.prototype.getScrollLeft=function(){return this.el.scrollLeft},t.prototype.setScrollTop=function(e){this.el.scrollTop=e},t.prototype.setScrollLeft=function(e){this.el.scrollLeft=e},t.prototype.getScrollWidth=function(){return this.el.scrollWidth},t.prototype.getScrollHeight=function(){return this.el.scrollHeight},t.prototype.getClientHeight=function(){return this.el.clientHeight},t.prototype.getClientWidth=function(){return this.el.clientWidth},t}($t),en=(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}ye(t,e),t.prototype.getScrollTop=function(){return window.pageYOffset},t.prototype.getScrollLeft=function(){return window.pageXOffset},t.prototype.setScrollTop=function(e){window.scroll(window.pageXOffset,e)},t.prototype.setScrollLeft=function(e){window.scroll(e,window.pageYOffset)},t.prototype.getScrollWidth=function(){return document.documentElement.scrollWidth},t.prototype.getScrollHeight=function(){return document.documentElement.scrollHeight},t.prototype.getClientHeight=function(){return document.documentElement.clientHeight},t.prototype.getClientWidth=function(){return document.documentElement.clientWidth}}($t),function(e){function t(t,n){var r=e.call(this,a("div",{className:"fc-scroller"}))||this;return r.overflowX=t,r.overflowY=n,r.applyOverflow(),r}return ye(t,e),t.prototype.clear=function(){this.setHeight("auto"),this.applyOverflow()},t.prototype.destroy=function(){v(this.el)},t.prototype.applyOverflow=function(){T(this.el,{overflowX:this.overflowX,overflowY:this.overflowY})},t.prototype.lockOverflow=function(e){var t=this.overflowX,n=this.overflowY;e=e||this.getScrollbarWidths(),"auto"===t&&(t=e.bottom||this.canScrollHorizontally()?"scroll":"hidden"),"auto"===n&&(n=e.left||e.right||this.canScrollVertically()?"scroll":"hidden"),T(this.el,{overflowX:t,overflowY:n})},t.prototype.setHeight=function(e){D(this.el,"height",e)},t.prototype.getScrollbarWidths=function(){var e=I(this.el);return{left:e.scrollbarLeft,right:e.scrollbarRight,bottom:e.scrollbarBottom}},t}(Qt)),tn=function(){function e(e){this.calendarOptions=e,this.processIconOverride()}return e.prototype.processIconOverride=function(){this.iconOverrideOption&&this.setIconOverride(this.calendarOptions[this.iconOverrideOption])},e.prototype.setIconOverride=function(e){var t,n;if("object"==typeof e&&e){for(n in t=me({},this.iconClasses),e)t[n]=this.applyIconOverridePrefix(e[n]);this.iconClasses=t}else!1===e&&(this.iconClasses={})},e.prototype.applyIconOverridePrefix=function(e){var t=this.iconOverridePrefix;return t&&0!==e.indexOf(t)&&(e=t+e),e},e.prototype.getClass=function(e){return this.classes[e]||""},e.prototype.getIconClass=function(e){var t=this.iconClasses[e];return t?this.baseIconClass+" "+t:""},e.prototype.getCustomButtonIconClass=function(e){var t;return this.iconOverrideCustomButtonOption&&(t=e[this.iconOverrideCustomButtonOption])?this.baseIconClass+" "+this.applyIconOverridePrefix(t):""},e}();tn.prototype.classes={},tn.prototype.iconClasses={},tn.prototype.baseIconClass="",tn.prototype.iconOverridePrefix="";var nn=0,rn=function(){function e(e,t,n,r,i){this.calendar=e,this.theme=t,this.dateEnv=n,this.options=r,this.view=i,this.isRtl="rtl"===r.dir,this.eventOrderSpecs=function(e){var t,n,r=[],i=[];for("string"==typeof e?i=e.split(/\s*,\s*/):"function"==typeof e?i=[e]:Array.isArray(e)&&(i=e),t=0;t<i.length;t++)"string"==typeof(n=i[t])?r.push("-"===n.charAt(0)?{field:n.substring(1),order:-1}:{field:n,order:1}):"function"==typeof n&&r.push({func:n});return r}(r.eventOrder),this.nextDayThreshold=J(r.nextDayThreshold)}return e.prototype.extend=function(t,n){return new e(this.calendar,this.theme,this.dateEnv,t||this.options,n||this.view)},e}(),on=function(){function e(){this.everRendered=!1,this.uid=String(nn++)}return e.addEqualityFuncs=function(e){this.prototype.equalityFuncs=me({},this.prototype.equalityFuncs,e)},e.prototype.receiveProps=function(e,t){this.receiveContext(t);var n=function(e,t,n){var r={},i=!1;for(var o in t)o in e&&(e[o]===t[o]||n[o]&&n[o](e[o],t[o]))?r[o]=e[o]:(r[o]=t[o],i=!0);for(var o in e)if(!(o in t)){i=!0;break}return{anyChanges:i,comboProps:r}}(this.props||{},e,this.equalityFuncs),r=n.anyChanges,i=n.comboProps;this.props=i,r&&(this.everRendered&&this.beforeUpdate(),this.render(i,t),this.everRendered&&this.afterUpdate()),this.everRendered=!0},e.prototype.receiveContext=function(e){var t=this.context;this.context=e,t||this.firstContext(e)},e.prototype.render=function(e,t){},e.prototype.firstContext=function(e){},e.prototype.beforeUpdate=function(){},e.prototype.afterUpdate=function(){},e.prototype.destroy=function(){},e}();on.prototype.equalityFuncs={};var sn=function(e){function t(t){var n=e.call(this)||this;return n.el=t,n}return ye(t,e),t.prototype.destroy=function(){e.prototype.destroy.call(this),v(this.el)},t.prototype.buildPositionCaches=function(){},t.prototype.queryHit=function(e,t,n,r){return null},t.prototype.isInteractionValid=function(e){var t=this.context.calendar,n=this.props.dateProfile,r=e.mutatedEvents.instances;if(n)for(var i in r)if(!Ve(n.validRange,r[i].range))return!1;return function(e,t){return Et({eventDrag:e},t)}(e,t)},t.prototype.isDateSelectionValid=function(e){var t=this.context.calendar,n=this.props.dateProfile;return!(n&&!Ve(n.validRange,e.range))&&function(e,t){return Et({dateSelection:e},t)}(e,t)},t.prototype.isValidSegDownEl=function(e){return!this.props.eventDrag&&!this.props.eventResize&&!m(e,".fc-mirror")&&(this.isPopover()||!this.isInPopover(e))},t.prototype.isValidDateDownEl=function(e){var t=m(e,this.fgSegSelector);return(!t||t.classList.contains("fc-mirror"))&&!m(e,".fc-more")&&!m(e,"a[data-goto]")&&!this.isInPopover(e)},t.prototype.isPopover=function(){return this.el.classList.contains("fc-popover")},t.prototype.isInPopover=function(e){return Boolean(m(e,".fc-popover"))},t}(on);sn.prototype.fgSegSelector=".fc-event-container > *",sn.prototype.bgSegSelector=".fc-bgevent:not(.fc-nonbusiness)";var an=0;function ln(e){return{id:String(an++),deps:e.deps||[],reducers:e.reducers||[],eventDefParsers:e.eventDefParsers||[],isDraggableTransformers:e.isDraggableTransformers||[],eventDragMutationMassagers:e.eventDragMutationMassagers||[],eventDefMutationAppliers:e.eventDefMutationAppliers||[],dateSelectionTransformers:e.dateSelectionTransformers||[],datePointTransforms:e.datePointTransforms||[],dateSpanTransforms:e.dateSpanTransforms||[],views:e.views||{},viewPropsTransformers:e.viewPropsTransformers||[],isPropsValid:e.isPropsValid||null,externalDefTransforms:e.externalDefTransforms||[],eventResizeJoinTransforms:e.eventResizeJoinTransforms||[],viewContainerModifiers:e.viewContainerModifiers||[],eventDropTransformers:e.eventDropTransformers||[],componentInteractions:e.componentInteractions||[],calendarInteractions:e.calendarInteractions||[],themeClasses:e.themeClasses||{},eventSourceDefs:e.eventSourceDefs||[],cmdFormatter:e.cmdFormatter,recurringTypes:e.recurringTypes||[],namedTimeZonedImpl:e.namedTimeZonedImpl,defaultView:e.defaultView||"",elementDraggingImpl:e.elementDraggingImpl,optionChangeHandlers:e.optionChangeHandlers||{}}}var un=function(){function e(){this.hooks={reducers:[],eventDefParsers:[],isDraggableTransformers:[],eventDragMutationMassagers:[],eventDefMutationAppliers:[],dateSelectionTransformers:[],datePointTransforms:[],dateSpanTransforms:[],views:{},viewPropsTransformers:[],isPropsValid:null,externalDefTransforms:[],eventResizeJoinTransforms:[],viewContainerModifiers:[],eventDropTransformers:[],componentInteractions:[],calendarInteractions:[],themeClasses:{},eventSourceDefs:[],cmdFormatter:null,recurringTypes:[],namedTimeZonedImpl:null,defaultView:"",elementDraggingImpl:null,optionChangeHandlers:{}},this.addedHash={}}return e.prototype.add=function(e){if(!this.addedHash[e.id]){this.addedHash[e.id]=!0;for(var t=0,n=e.deps;t<n.length;t++){var r=n[t];this.add(r)}this.hooks=(i=this.hooks,o=e,{reducers:i.reducers.concat(o.reducers),eventDefParsers:i.eventDefParsers.concat(o.eventDefParsers),isDraggableTransformers:i.isDraggableTransformers.concat(o.isDraggableTransformers),eventDragMutationMassagers:i.eventDragMutationMassagers.concat(o.eventDragMutationMassagers),eventDefMutationAppliers:i.eventDefMutationAppliers.concat(o.eventDefMutationAppliers),dateSelectionTransformers:i.dateSelectionTransformers.concat(o.dateSelectionTransformers),datePointTransforms:i.datePointTransforms.concat(o.datePointTransforms),dateSpanTransforms:i.dateSpanTransforms.concat(o.dateSpanTransforms),views:me({},i.views,o.views),viewPropsTransformers:i.viewPropsTransformers.concat(o.viewPropsTransformers),isPropsValid:o.isPropsValid||i.isPropsValid,externalDefTransforms:i.externalDefTransforms.concat(o.externalDefTransforms),eventResizeJoinTransforms:i.eventResizeJoinTransforms.concat(o.eventResizeJoinTransforms),viewContainerModifiers:i.viewContainerModifiers.concat(o.viewContainerModifiers),eventDropTransformers:i.eventDropTransformers.concat(o.eventDropTransformers),calendarInteractions:i.calendarInteractions.concat(o.calendarInteractions),componentInteractions:i.componentInteractions.concat(o.componentInteractions),themeClasses:me({},i.themeClasses,o.themeClasses),eventSourceDefs:i.eventSourceDefs.concat(o.eventSourceDefs),cmdFormatter:o.cmdFormatter||i.cmdFormatter,recurringTypes:i.recurringTypes.concat(o.recurringTypes),namedTimeZonedImpl:o.namedTimeZonedImpl||i.namedTimeZonedImpl,defaultView:i.defaultView||o.defaultView,elementDraggingImpl:i.elementDraggingImpl||o.elementDraggingImpl,optionChangeHandlers:me({},i.optionChangeHandlers,o.optionChangeHandlers)})}var i,o},e}();var cn=ln({eventSourceDefs:[{ignoreRange:!0,parseMeta:function(e){return Array.isArray(e)?e:Array.isArray(e.events)?e.events:null},fetch:function(e,t){t({rawEvents:e.eventSource.meta})}}]}),dn=ln({eventSourceDefs:[{parseMeta:function(e){return"function"==typeof e?e:"function"==typeof e.events?e.events:null},fetch:function(e,t,n){var r=e.calendar.dateEnv;!function(e,t,n){var r=!1,i=function(){r||(r=!0,t.apply(this,arguments))},o=function(){r||(r=!0,n&&n.apply(this,arguments))},s=e(i,o);s&&"function"==typeof s.then&&s.then(i,o)}(e.eventSource.meta.bind(null,{start:r.toDate(e.range.start),end:r.toDate(e.range.end),startStr:r.formatIso(e.range.start),endStr:r.formatIso(e.range.end),timeZone:r.timeZone}),(function(e){t({rawEvents:e})}),n)}}]});function pn(e,t,n,r,i){var o=null;"GET"===(e=e.toUpperCase())?t=function(e,t){return e+(-1===e.indexOf("?")?"?":"&")+hn(t)}(t,n):o=hn(n);var s=new XMLHttpRequest;s.open(e,t,!0),"GET"!==e&&s.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),s.onload=function(){if(s.status>=200&&s.status<400)try{var e=JSON.parse(s.responseText);r(e,s)}catch(e){i("Failure parsing JSON",s)}else i("Request failed",s)},s.onerror=function(){i("Request failed",s)},s.send(o)}function hn(e){var t=[];for(var n in e)t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.join("&")}var fn=ln({eventSourceDefs:[{parseMeta:function(e){if("string"==typeof e)e={url:e};else if(!e||"object"!=typeof e||!e.url)return null;return{url:e.url,method:(e.method||"GET").toUpperCase(),extraParams:e.extraParams,startParam:e.startParam,endParam:e.endParam,timeZoneParam:e.timeZoneParam}},fetch:function(e,t,n){var r=e.eventSource.meta,i=function(e,t,n){var r,i,o,s,a=n.dateEnv,l={};null==(r=e.startParam)&&(r=n.opt("startParam"));null==(i=e.endParam)&&(i=n.opt("endParam"));null==(o=e.timeZoneParam)&&(o=n.opt("timeZoneParam"));s="function"==typeof e.extraParams?e.extraParams():e.extraParams||{};me(l,s),l[r]=a.formatIso(t.start),l[i]=a.formatIso(t.end),"local"!==a.timeZone&&(l[o]=a.timeZone);return l}(r,e.range,e.calendar);pn(r.method,r.url,i,(function(e,n){t({rawEvents:e,xhr:n})}),(function(e,t){n({message:e,xhr:t})}))}}]});var vn=ln({recurringTypes:[{parse:function(e,t,n){var r,i,o=n.createMarker.bind(n),s=pe(e,{daysOfWeek:null,startTime:J,endTime:J,startRecur:o,endRecur:o},{},t),a=!1;for(var l in s)if(null!=s[l]){a=!0;break}if(a){var u=null;return"duration"in t&&(u=J(t.duration),delete t.duration),!u&&s.startTime&&s.endTime&&(r=s.endTime,i=s.startTime,u={years:r.years-i.years,months:r.months-i.months,days:r.days-i.days,milliseconds:r.milliseconds-i.milliseconds}),{allDayGuess:Boolean(!s.startTime&&!s.endTime),duration:u,typeData:s}}return null},expand:function(e,t,n){var r=ze(t,{start:e.startRecur,end:e.endRecur});return r?function(e,t,n,r){var i=e?De(e):null,o=V(n.start),s=n.end,a=[];for(;o<s;){var l=void 0;i&&!i[o.getUTCDay()]||(l=t?r.add(o,t):o,a.push(l)),o=L(o,1)}return a}(e.daysOfWeek,e.startTime,r,n):[]}}]});var gn=ln({optionChangeHandlers:{events:function(e,t,n){yn([e],t,n)},eventSources:yn,plugins:function(e,t){t.addPluginInputs(e)}}});function yn(e,t,n){for(var r=Ce(t.state.eventSources),i=[],o=0,s=e;o<s.length;o++){for(var a=s[o],l=!1,u=0;u<r.length;u++)if(n(r[u]._raw,a)){r.splice(u,1),l=!0;break}l||i.push(a)}for(var c=0,d=r;c<d.length;c++){var p=d[c];t.dispatch({type:"REMOVE_EVENT_SOURCE",sourceId:p.sourceId})}for(var h=0,f=i;h<f.length;h++){var v=f[h];t.addEventSource(v)}}var mn={defaultRangeSeparator:" - ",titleRangeSeparator:" – ",defaultTimedEventDuration:"01:00:00",defaultAllDayEventDuration:{day:1},forceEventDuration:!1,nextDayThreshold:"00:00:00",columnHeader:!0,defaultView:"",aspectRatio:1.35,header:{left:"title",center:"",right:"today prev,next"},weekends:!0,weekNumbers:!1,weekNumberCalculation:"local",editable:!1,scrollTime:"06:00:00",minTime:"00:00:00",maxTime:"24:00:00",showNonCurrentDates:!0,lazyFetching:!0,startParam:"start",endParam:"end",timeZoneParam:"timeZone",timeZone:"local",locales:[],locale:"",timeGridEventMinHeight:0,themeSystem:"standard",dragRevertDuration:500,dragScroll:!0,allDayMaintainDuration:!1,unselectAuto:!0,dropAccept:"*",eventOrder:"start,-duration,allDay,title",eventLimit:!1,eventLimitClick:"popover",dayPopoverFormat:{month:"long",day:"numeric",year:"numeric"},handleWindowResize:!0,windowResizeDelay:100,longPressDelay:1e3,eventDragMinDistance:5},Sn={header:{left:"next,prev today",center:"",right:"title"},buttonIcons:{prev:"fc-icon-chevron-right",next:"fc-icon-chevron-left",prevYear:"fc-icon-chevrons-right",nextYear:"fc-icon-chevrons-left"}},En=["header","footer","buttonText","buttonIcons"];var bn=[cn,dn,fn,vn,gn];var wn={code:"en",week:{dow:0,doy:4},dir:"ltr",buttonText:{prev:"prev",next:"next",prevYear:"prev year",nextYear:"next year",year:"year",today:"today",month:"month",week:"week",day:"day",list:"list"},weekLabel:"W",allDayText:"all-day",eventLimitText:"more",noEventsMessage:"No events to display"};function Tn(e){for(var t=e.length>0?e[0].code:"en",n=window.FullCalendarLocalesAll||[],r=window.FullCalendarLocales||{},i=n.concat(Ce(r),e),o={en:wn},s=0,a=i;s<a.length;s++){var l=a[s];o[l.code]=l}return{map:o,defaultCode:t}}function Dn(e,t){return"object"!=typeof e||Array.isArray(e)?function(e,t){var n=[].concat(e||[]),r=function(e,t){for(var n=0;n<e.length;n++)for(var r=e[n].toLocaleLowerCase().split("-"),i=r.length;i>0;i--){var o=r.slice(0,i).join("-");if(t[o])return t[o]}return null}(n,t)||wn;return Cn(e,n,r)}(e,t):Cn(e.code,[e.code],e)}function Cn(e,t,n){var r=be([wn,n],["buttonText"]);delete r.code;var i=r.week;return delete r.week,{codeArg:e,codes:t,week:i,simpleNumberFormat:new Intl.NumberFormat(e),options:r}}var Rn=function(){function e(e){this.overrides=me({},e),this.dynamicOverrides={},this.compute()}return e.prototype.mutate=function(e,t,n){if(Object.keys(e).length||t.length){var r=n?this.dynamicOverrides:this.overrides;me(r,e);for(var i=0,o=t;i<o.length;i++){delete r[o[i]]}this.compute()}},e.prototype.compute=function(){var e=ce(this.dynamicOverrides.locales,this.overrides.locales,mn.locales),t=ce(this.dynamicOverrides.locale,this.overrides.locale,mn.locale),n=Tn(e),r=Dn(t||n.defaultCode,n.map).options,i="rtl"===ce(this.dynamicOverrides.dir,this.overrides.dir,r.dir)?Sn:{};this.dirDefaults=i,this.localeDefaults=r,this.computed=be([mn,i,r,this.overrides,this.dynamicOverrides],En)},e}(),kn={};var In,_n=function(){function e(){}return e.prototype.getMarkerYear=function(e){return e.getUTCFullYear()},e.prototype.getMarkerMonth=function(e){return e.getUTCMonth()},e.prototype.getMarkerDay=function(e){return e.getUTCDate()},e.prototype.arrayToMarker=function(e){return Z(e)},e.prototype.markerToArray=function(e){return G(e)},e}();In=_n,kn["gregory"]=In;var Mn=/^\s*(\d{4})(-(\d{2})(-(\d{2})([T ](\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;var xn=function(){function e(e){var t=this.timeZone=e.timeZone,n="local"!==t&&"UTC"!==t;e.namedTimeZoneImpl&&n&&(this.namedTimeZoneImpl=new e.namedTimeZoneImpl(t)),this.canComputeOffset=Boolean(!n||this.namedTimeZoneImpl),this.calendarSystem=function(e){return new kn[e]}(e.calendarSystem),this.locale=e.locale,this.weekDow=e.locale.week.dow,this.weekDoy=e.locale.week.doy,"ISO"===e.weekNumberCalculation&&(this.weekDow=1,this.weekDoy=4),"number"==typeof e.firstDay&&(this.weekDow=e.firstDay),"function"==typeof e.weekNumberCalculation&&(this.weekNumberFunc=e.weekNumberCalculation),this.weekLabel=null!=e.weekLabel?e.weekLabel:e.locale.options.weekLabel,this.cmdFormatter=e.cmdFormatter}return e.prototype.createMarker=function(e){var t=this.createMarkerMeta(e);return null===t?null:t.marker},e.prototype.createNowMarker=function(){return this.canComputeOffset?this.timestampToMarker((new Date).valueOf()):Z(W(new Date))},e.prototype.createMarkerMeta=function(e){if("string"==typeof e)return this.parse(e);var t=null;return"number"==typeof e?t=this.timestampToMarker(e):e instanceof Date?(e=e.valueOf(),isNaN(e)||(t=this.timestampToMarker(e))):Array.isArray(e)&&(t=Z(e)),null!==t&&Y(t)?{marker:t,isTimeUnspecified:!1,forcedTzo:null}:null},e.prototype.parse=function(e){var t=function(e){var t=Mn.exec(e);if(t){var n=new Date(Date.UTC(Number(t[1]),t[3]?Number(t[3])-1:0,Number(t[5]||1),Number(t[7]||0),Number(t[8]||0),Number(t[10]||0),t[12]?1e3*Number("0."+t[12]):0));if(Y(n)){var r=null;return t[13]&&(r=("-"===t[15]?-1:1)*(60*Number(t[16]||0)+Number(t[18]||0))),{marker:n,isTimeUnspecified:!t[6],timeZoneOffset:r}}}return null}(e);if(null===t)return null;var n=t.marker,r=null;return null!==t.timeZoneOffset&&(this.canComputeOffset?n=this.timestampToMarker(n.valueOf()-60*t.timeZoneOffset*1e3):r=t.timeZoneOffset),{marker:n,isTimeUnspecified:t.isTimeUnspecified,forcedTzo:r}},e.prototype.getYear=function(e){return this.calendarSystem.getMarkerYear(e)},e.prototype.getMonth=function(e){return this.calendarSystem.getMarkerMonth(e)},e.prototype.add=function(e,t){var n=this.calendarSystem.markerToArray(e);return n[0]+=t.years,n[1]+=t.months,n[2]+=t.days,n[6]+=t.milliseconds,this.calendarSystem.arrayToMarker(n)},e.prototype.subtract=function(e,t){var n=this.calendarSystem.markerToArray(e);return n[0]-=t.years,n[1]-=t.months,n[2]-=t.days,n[6]-=t.milliseconds,this.calendarSystem.arrayToMarker(n)},e.prototype.addYears=function(e,t){var n=this.calendarSystem.markerToArray(e);return n[0]+=t,this.calendarSystem.arrayToMarker(n)},e.prototype.addMonths=function(e,t){var n=this.calendarSystem.markerToArray(e);return n[1]+=t,this.calendarSystem.arrayToMarker(n)},e.prototype.diffWholeYears=function(e,t){var n=this.calendarSystem;return q(e)===q(t)&&n.getMarkerDay(e)===n.getMarkerDay(t)&&n.getMarkerMonth(e)===n.getMarkerMonth(t)?n.getMarkerYear(t)-n.getMarkerYear(e):null},e.prototype.diffWholeMonths=function(e,t){var n=this.calendarSystem;return q(e)===q(t)&&n.getMarkerDay(e)===n.getMarkerDay(t)?n.getMarkerMonth(t)-n.getMarkerMonth(e)+12*(n.getMarkerYear(t)-n.getMarkerYear(e)):null},e.prototype.greatestWholeUnit=function(e,t){var n=this.diffWholeYears(e,t);return null!==n?{unit:"year",value:n}:null!==(n=this.diffWholeMonths(e,t))?{unit:"month",value:n}:null!==(n=function(e,t){var n=B(e,t);return null!==n&&n%7==0?n/7:null}(e,t))?{unit:"week",value:n}:null!==(n=B(e,t))?{unit:"day",value:n}:le(n=function(e,t){return(t.valueOf()-e.valueOf())/36e5}(e,t))?{unit:"hour",value:n}:le(n=function(e,t){return(t.valueOf()-e.valueOf())/6e4}(e,t))?{unit:"minute",value:n}:le(n=function(e,t){return(t.valueOf()-e.valueOf())/1e3}(e,t))?{unit:"second",value:n}:{unit:"millisecond",value:t.valueOf()-e.valueOf()}},e.prototype.countDurationsBetween=function(e,t,n){var r;return n.years&&null!==(r=this.diffWholeYears(e,t))?r/(ee(n)/365):n.months&&null!==(r=this.diffWholeMonths(e,t))?r/function(e){return ee(e)/30}(n):n.days&&null!==(r=B(e,t))?r/ee(n):(t.valueOf()-e.valueOf())/te(n)},e.prototype.startOf=function(e,t){return"year"===t?this.startOfYear(e):"month"===t?this.startOfMonth(e):"week"===t?this.startOfWeek(e):"day"===t?V(e):"hour"===t?function(e){return Z([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours()])}(e):"minute"===t?function(e){return Z([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes()])}(e):"second"===t?function(e){return Z([e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate(),e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds()])}(e):void 0},e.prototype.startOfYear=function(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e)])},e.prototype.startOfMonth=function(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e),this.calendarSystem.getMarkerMonth(e)])},e.prototype.startOfWeek=function(e){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(e),this.calendarSystem.getMarkerMonth(e),e.getUTCDate()-(e.getUTCDay()-this.weekDow+7)%7])},e.prototype.computeWeekNumber=function(e){return this.weekNumberFunc?this.weekNumberFunc(this.toDate(e)):function(e,t,n){var r=e.getUTCFullYear(),i=A(e,r,t,n);if(i<1)return A(e,r-1,t,n);var o=A(e,r+1,t,n);return o>=1?Math.min(i,o):i}(e,this.weekDow,this.weekDoy)},e.prototype.format=function(e,t,n){return void 0===n&&(n={}),t.format({marker:e,timeZoneOffset:null!=n.forcedTzo?n.forcedTzo:this.offsetForMarker(e)},this)},e.prototype.formatRange=function(e,t,n,r){return void 0===r&&(r={}),r.isEndExclusive&&(t=z(t,-1)),n.formatRange({marker:e,timeZoneOffset:null!=r.forcedStartTzo?r.forcedStartTzo:this.offsetForMarker(e)},{marker:t,timeZoneOffset:null!=r.forcedEndTzo?r.forcedEndTzo:this.offsetForMarker(t)},this)},e.prototype.formatIso=function(e,t){void 0===t&&(t={});var n=null;return t.omitTimeZoneOffset||(n=null!=t.forcedTzo?t.forcedTzo:this.offsetForMarker(e)),function(e,t,n){void 0===n&&(n=!1);var r=e.toISOString();return r=r.replace(".000",""),n&&(r=r.replace("T00:00:00Z","")),r.length>10&&(null==t?r=r.replace("Z",""):0!==t&&(r=r.replace("Z",nt(t,!0)))),r}(e,n,t.omitTime)},e.prototype.timestampToMarker=function(e){return"local"===this.timeZone?Z(W(new Date(e))):"UTC"!==this.timeZone&&this.namedTimeZoneImpl?Z(this.namedTimeZoneImpl.timestampToArray(e)):new Date(e)},e.prototype.offsetForMarker=function(e){return"local"===this.timeZone?-j(G(e)).getTimezoneOffset():"UTC"===this.timeZone?0:this.namedTimeZoneImpl?this.namedTimeZoneImpl.offsetForArray(G(e)):null},e.prototype.toDate=function(e,t){return"local"===this.timeZone?j(G(e)):"UTC"===this.timeZone?new Date(e.valueOf()):this.namedTimeZoneImpl?new Date(e.valueOf()-1e3*this.namedTimeZoneImpl.offsetForArray(G(e))*60):new Date(e.valueOf()-(t||0))},e}(),Pn={id:String,allDayDefault:Boolean,eventDataTransform:Function,success:Function,failure:Function},On=0;function Hn(e,t){return!t.pluginSystem.hooks.eventSourceDefs[e.sourceDefId].ignoreRange}function Nn(e,t){for(var n=t.pluginSystem.hooks.eventSourceDefs,r=n.length-1;r>=0;r--){var i=n[r].parseMeta(e);if(i){var o=Ln("object"==typeof e?e:{},i,r,t);return o._raw=e,o}}return null}function Ln(e,t,n,r){var i={},o=pe(e,Pn,{},i),s={},a=Mt(i,r,s);return o.isFetching=!1,o.latestFetchId="",o.fetchRange=null,o.publicId=String(e.id||""),o.sourceId=String(On++),o.sourceDefId=n,o.meta=t,o.ui=a,o.extendedProps=s,o}function zn(e,t,n,r){switch(t.type){case"ADD_EVENT_SOURCES":return function(e,t,n,r){for(var i={},o=0,s=t;o<s.length;o++){var a=s[o];i[a.sourceId]=a}n&&(i=Bn(i,n,r));return me({},e,i)}(e,t.sources,n?n.activeRange:null,r);case"REMOVE_EVENT_SOURCE":return i=e,o=t.sourceId,we(i,(function(e){return e.sourceId!==o}));case"PREV":case"NEXT":case"SET_DATE":case"SET_VIEW_TYPE":return n?Bn(e,n.activeRange,r):e;case"FETCH_EVENT_SOURCES":case"CHANGE_TIMEZONE":return Vn(e,t.sourceIds?De(t.sourceIds):function(e,t){return we(e,(function(e){return Hn(e,t)}))}(e,r),n?n.activeRange:null,r);case"RECEIVE_EVENTS":case"RECEIVE_EVENT_ERROR":return function(e,t,n,r){var i,o=e[t];if(o&&n===o.latestFetchId)return me({},e,((i={})[t]=me({},o,{isFetching:!1,fetchRange:r}),i));return e}(e,t.sourceId,t.fetchId,t.fetchRange);case"REMOVE_ALL_EVENT_SOURCES":return{};default:return e}var i,o}var Un=0;function Bn(e,t,n){return Vn(e,we(e,(function(e){return function(e,t,n){return Hn(e,n)?!n.opt("lazyFetching")||!e.fetchRange||e.isFetching||t.start<e.fetchRange.start||t.end>e.fetchRange.end:!e.latestFetchId}(e,t,n)})),t,n)}function Vn(e,t,n,r){var i={};for(var o in e){var s=e[o];t[o]?i[o]=An(s,n,r):i[o]=s}return i}function An(e,t,n){var r=n.pluginSystem.hooks.eventSourceDefs[e.sourceDefId],i=String(Un++);return r.fetch({eventSource:e,calendar:n,range:t},(function(r){var o,s,a=r.rawEvents,l=n.opt("eventSourceSuccess");e.success&&(s=e.success(a,r.xhr)),l&&(o=l(a,r.xhr)),a=s||o||a,n.dispatch({type:"RECEIVE_EVENTS",sourceId:e.sourceId,fetchId:i,fetchRange:t,rawEvents:a})}),(function(r){var o=n.opt("eventSourceFailure");console.warn(r.message,r),e.failure&&e.failure(r),o&&o(r),n.dispatch({type:"RECEIVE_EVENT_ERROR",sourceId:e.sourceId,fetchId:i,fetchRange:t,error:r})})),me({},e,{isFetching:!0,latestFetchId:i})}var Fn=function(){function e(e,t){this.viewSpec=e,this.options=e.options,this.dateEnv=t.dateEnv,this.calendar=t,this.initHiddenDays()}return e.prototype.buildPrev=function(e,t){var n=this.dateEnv,r=n.subtract(n.startOf(t,e.currentRangeUnit),e.dateIncrement);return this.build(r,-1)},e.prototype.buildNext=function(e,t){var n=this.dateEnv,r=n.add(n.startOf(t,e.currentRangeUnit),e.dateIncrement);return this.build(r,1)},e.prototype.build=function(e,t,n){var r;void 0===n&&(n=!1);var i,o,s,a,l,u,c,d,p;return r=this.buildValidRange(),r=this.trimHiddenDays(r),n&&(d=e,e=null!=(p=r).start&&d<p.start?p.start:null!=p.end&&d>=p.end?new Date(p.end.valueOf()-1):d),s=this.buildCurrentRangeInfo(e,t),a=/^(year|month|week|day)$/.test(s.unit),l=this.buildRenderRange(this.trimHiddenDays(s.range),s.unit,a),u=l=this.trimHiddenDays(l),this.options.showNonCurrentDates||(u=ze(u,s.range)),i=J(this.options.minTime),o=J(this.options.maxTime),u=ze(u=this.adjustActiveRange(u,i,o),r),c=Be(s.range,r),{validRange:r,currentRange:s.range,currentRangeUnit:s.unit,isRangeAllDay:a,activeRange:u,renderRange:l,minTime:i,maxTime:o,isValid:c,dateIncrement:this.buildDateIncrement(s.duration)}},e.prototype.buildValidRange=function(){return this.getRangeOption("validRange",this.calendar.getNow())||{start:null,end:null}},e.prototype.buildCurrentRangeInfo=function(e,t){var n,r=this.viewSpec,i=this.dateEnv,o=null,s=null,a=null;return r.duration?(o=r.duration,s=r.durationUnit,a=this.buildRangeFromDuration(e,t,o,s)):(n=this.options.dayCount)?(s="day",a=this.buildRangeFromDayCount(e,t,n)):(a=this.buildCustomVisibleRange(e))?s=i.greatestWholeUnit(a.start,a.end).unit:(s=ne(o=this.getFallbackDuration()).unit,a=this.buildRangeFromDuration(e,t,o,s)),{duration:o,unit:s,range:a}},e.prototype.getFallbackDuration=function(){return J({day:1})},e.prototype.adjustActiveRange=function(e,t,n){var r=this.dateEnv,i=e.start,o=e.end;return this.viewSpec.class.prototype.usesMinMaxTime&&(ee(t)<0&&(i=V(i),i=r.add(i,t)),ee(n)>1&&(o=L(o=V(o),-1),o=r.add(o,n))),{start:i,end:o}},e.prototype.buildRangeFromDuration=function(e,t,n,r){var i,o,s,a,l,u=this.dateEnv,c=this.options.dateAlignment;function d(){s=u.startOf(e,c),a=u.add(s,n),l={start:s,end:a}}return c||((i=this.options.dateIncrement)?(o=J(i),c=te(o)<te(n)?ne(o,!$(i)).unit:r):c=r),ee(n)<=1&&this.isHiddenDay(s)&&(s=V(s=this.skipHiddenDays(s,t))),d(),this.trimHiddenDays(l)||(e=this.skipHiddenDays(e,t),d()),l},e.prototype.buildRangeFromDayCount=function(e,t,n){var r,i=this.dateEnv,o=this.options.dateAlignment,s=0,a=e;o&&(a=i.startOf(a,o)),a=V(a),r=a=this.skipHiddenDays(a,t);do{r=L(r,1),this.isHiddenDay(r)||s++}while(s<n);return{start:a,end:r}},e.prototype.buildCustomVisibleRange=function(e){var t=this.dateEnv,n=this.getRangeOption("visibleRange",t.toDate(e));return!n||null!=n.start&&null!=n.end?n:null},e.prototype.buildRenderRange=function(e,t,n){return e},e.prototype.buildDateIncrement=function(e){var t,n=this.options.dateIncrement;return n?J(n):(t=this.options.dateAlignment)?J(1,t):e||J({days:1})},e.prototype.getRangeOption=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this.options[e];return"function"==typeof r&&(r=r.apply(null,t)),r&&(r=He(r,this.dateEnv)),r&&(r=fe(r)),r},e.prototype.initHiddenDays=function(){var e,t=this.options.hiddenDays||[],n=[],r=0;for(!1===this.options.weekends&&t.push(0,6),e=0;e<7;e++)(n[e]=-1!==t.indexOf(e))||r++;if(!r)throw new Error("invalid hiddenDays");this.isHiddenDayHash=n},e.prototype.trimHiddenDays=function(e){var t=e.start,n=e.end;return t&&(t=this.skipHiddenDays(t)),n&&(n=this.skipHiddenDays(n,-1,!0)),null==t||null==n||t<n?{start:t,end:n}:null},e.prototype.isHiddenDay=function(e){return e instanceof Date&&(e=e.getUTCDay()),this.isHiddenDayHash[e]},e.prototype.skipHiddenDays=function(e,t,n){for(void 0===t&&(t=1),void 0===n&&(n=!1);this.isHiddenDayHash[(e.getUTCDay()+(n?t:0)+7)%7];)e=L(e,t);return e},e}();function Wn(e,t,n){for(var r=function(e,t){switch(t.type){case"SET_VIEW_TYPE":return t.viewType;default:return e}}(e.viewType,t),i=function(e,t,n,r,i){var o;switch(t.type){case"PREV":o=i.dateProfileGenerators[r].buildPrev(e,n);break;case"NEXT":o=i.dateProfileGenerators[r].buildNext(e,n);break;case"SET_DATE":e.activeRange&&Ae(e.currentRange,t.dateMarker)||(o=i.dateProfileGenerators[r].build(t.dateMarker,void 0,!0));break;case"SET_VIEW_TYPE":var s=i.dateProfileGenerators[r];if(!s)throw new Error(r?'The FullCalendar view "'+r+'" does not exist. Make sure your plugins are loaded correctly.':"No available FullCalendar view plugins.");o=s.build(t.dateMarker||n,void 0,!0)}return!o||!o.isValid||e&&(a=e,l=o,Ue(a.validRange,l.validRange)&&Ue(a.activeRange,l.activeRange)&&Ue(a.renderRange,l.renderRange)&&Q(a.minTime,l.minTime)&&Q(a.maxTime,l.maxTime))?e:o;var a,l}(e.dateProfile,t,e.currentDate,r,n),o=zn(e.eventSources,t,i,n),s=me({},e,{viewType:r,dateProfile:i,currentDate:jn(e.currentDate,t,i),eventSources:o,eventStore:yt(e.eventStore,t,o,i,n),dateSelection:Gn(e.dateSelection,t,n),eventSelection:Zn(e.eventSelection,t),eventDrag:Yn(e.eventDrag,t,o,n),eventResize:qn(e.eventResize,t,o,n),eventSourceLoadingLevel:Xn(o),loadingLevel:Xn(o)}),a=0,l=n.pluginSystem.hooks.reducers;a<l.length;a++){s=(0,l[a])(s,t,n)}return s}function jn(e,t,n){switch(t.type){case"PREV":case"NEXT":return Ae(n.currentRange,e)?e:n.currentRange.start;case"SET_DATE":case"SET_VIEW_TYPE":var r=t.dateMarker||e;return n.activeRange&&!Ae(n.activeRange,r)?n.currentRange.start:r;default:return e}}function Gn(e,t,n){switch(t.type){case"SELECT_DATES":return t.selection;case"UNSELECT_DATES":return null;default:return e}}function Zn(e,t){switch(t.type){case"SELECT_EVENT":return t.eventInstanceId;case"UNSELECT_EVENT":return"";default:return e}}function Yn(e,t,n,r){switch(t.type){case"SET_EVENT_DRAG":var i=t.state;return{affectedEvents:i.affectedEvents,mutatedEvents:i.mutatedEvents,isEvent:i.isEvent,origSeg:i.origSeg};case"UNSET_EVENT_DRAG":return null;default:return e}}function qn(e,t,n,r){switch(t.type){case"SET_EVENT_RESIZE":var i=t.state;return{affectedEvents:i.affectedEvents,mutatedEvents:i.mutatedEvents,isEvent:i.isEvent,origSeg:i.origSeg};case"UNSET_EVENT_RESIZE":return null;default:return e}}function Xn(e){var t=0;for(var n in e)e[n].isFetching&&t++;return t}var Jn={start:null,end:null,allDay:Boolean};function Kn(e,t,n){var r=function(e,t){var n={},r=pe(e,Jn,{},n),i=r.start?t.createMarkerMeta(r.start):null,o=r.end?t.createMarkerMeta(r.end):null,s=r.allDay;null==s&&(s=i&&i.isTimeUnspecified&&(!o||o.isTimeUnspecified));return n.range={start:i?i.marker:null,end:o?o.marker:null},n.allDay=s,n}(e,t),i=r.range;if(!i.start)return null;if(!i.end){if(null==n)return null;i.end=t.add(i.start,n)}return r}function $n(e,t,n){var r=Bt({editable:!1},"",e.allDay,!0,n);return{def:r,ui:pt(r,t),instance:Vt(r.defId,e.range),range:e.range,isStart:!0,isEnd:!0}}function Qn(e,t,n,r){if(t[e])return t[e];var i=function(e,t,n,r){var i=n[e],o=r[e],s=function(e){return i&&null!==i[e]?i[e]:o&&null!==o[e]?o[e]:null},a=s("class"),l=s("superType");!l&&a&&(l=er(a,r)||er(a,n));var u=null;if(l){if(l===e)throw new Error("Can't have a custom view type that references itself");u=Qn(l,t,n,r)}!a&&u&&(a=u.class);if(!a)return null;return{type:e,class:a,defaults:me({},u?u.defaults:{},i?i.options:{}),overrides:me({},u?u.overrides:{},o?o.options:{})}}(e,t,n,r);return i&&(t[e]=i),i}function er(e,t){var n=Object.getPrototypeOf(e.prototype);for(var r in t){var i=t[r];if(i.class&&i.class.prototype===n)return r}return""}function tr(e){return Te(e,rr)}var nr={type:String,class:null};function rr(e){"function"==typeof e&&(e={class:e});var t={},n=pe(e,nr,{},t);return{superType:n.type,class:n.class,options:t}}function ir(e,t){var n=tr(e),r=tr(t.overrides.views);return Te(function(e,t){var n,r={};for(n in e)Qn(n,r,e,t);for(n in t)Qn(n,r,e,t);return r}(n,r),(function(e){return function(e,t,n){var r=e.overrides.duration||e.defaults.duration||n.dynamicOverrides.duration||n.overrides.duration,i=null,o="",s="",a={};if(r&&(i=J(r))){var l=ne(i,!$(r));o=l.unit,1===l.value&&(s=o,a=t[o]?t[o].options:{})}var u=function(t){var n=t.buttonText||{},r=e.defaults.buttonTextKey;return null!=r&&null!=n[r]?n[r]:null!=n[e.type]?n[e.type]:null!=n[s]?n[s]:void 0};return{type:e.type,class:e.class,duration:i,durationUnit:o,singleUnit:s,options:me({},mn,e.defaults,n.dirDefaults,n.localeDefaults,n.overrides,a,e.overrides,n.dynamicOverrides),buttonTextOverride:u(n.dynamicOverrides)||u(n.overrides)||e.overrides.buttonText,buttonTextDefault:u(n.localeDefaults)||u(n.dirDefaults)||e.defaults.buttonText||u(mn)||e.type}}(e,r,t)}))}var or=function(e){function t(t){var n=e.call(this)||this;return n._renderLayout=Wt(n.renderLayout,n.unrenderLayout),n._updateTitle=Wt(n.updateTitle,null,[n._renderLayout]),n._updateActiveButton=Wt(n.updateActiveButton,null,[n._renderLayout]),n._updateToday=Wt(n.updateToday,null,[n._renderLayout]),n._updatePrev=Wt(n.updatePrev,null,[n._renderLayout]),n._updateNext=Wt(n.updateNext,null,[n._renderLayout]),n.el=a("div",{className:"fc-toolbar "+t}),n}return ye(t,e),t.prototype.destroy=function(){e.prototype.destroy.call(this),this._renderLayout.unrender(),v(this.el)},t.prototype.render=function(e){this._renderLayout(e.layout),this._updateTitle(e.title),this._updateActiveButton(e.activeButton),this._updateToday(e.isTodayEnabled),this._updatePrev(e.isPrevEnabled),this._updateNext(e.isNextEnabled)},t.prototype.renderLayout=function(e){var t=this.el;this.viewsWithButtons=[],d(t,this.renderSection("left",e.left)),d(t,this.renderSection("center",e.center)),d(t,this.renderSection("right",e.right))},t.prototype.unrenderLayout=function(){this.el.innerHTML=""},t.prototype.renderSection=function(e,t){var n=this,r=this.context,i=r.theme,o=r.calendar,s=o.optionsManager,u=o.viewSpecs,c=a("div",{className:"fc-"+e}),p=s.computed.customButtons||{},h=s.overrides.buttonText||{},f=s.computed.buttonText||{};return t&&t.split(" ").forEach((function(e,t){var r,s=[],a=!0;if(e.split(",").forEach((function(e,t){var r,c,d,v,g,y,m,S,E;"title"===e?(s.push(l("<h2>&nbsp;</h2>")),a=!1):((r=p[e])?(d=function(e){r.click&&r.click.call(S,e)},(v=i.getCustomButtonIconClass(r))||(v=i.getIconClass(e))||(g=r.text)):(c=u[e])?(n.viewsWithButtons.push(e),d=function(){o.changeView(e)},(g=c.buttonTextOverride)||(v=i.getIconClass(e))||(g=c.buttonTextDefault)):o[e]&&(d=function(){o[e]()},(g=h[e])||(v=i.getIconClass(e))||(g=f[e])),d&&(m=["fc-"+e+"-button",i.getClass("button")],g?(y=Rt(g),E=""):v&&(y="<span class='"+v+"'></span>",E=' aria-label="'+e+'"'),(S=l('<button type="button" class="'+m.join(" ")+'"'+E+">"+y+"</button>")).addEventListener("click",d),s.push(S)))})),s.length>1){r=document.createElement("div");var v=i.getClass("buttonGroup");a&&v&&r.classList.add(v),d(r,s),c.appendChild(r)}else d(c,s)})),c},t.prototype.updateToday=function(e){this.toggleButtonEnabled("today",e)},t.prototype.updatePrev=function(e){this.toggleButtonEnabled("prev",e)},t.prototype.updateNext=function(e){this.toggleButtonEnabled("next",e)},t.prototype.updateTitle=function(e){E(this.el,"h2").forEach((function(t){t.innerText=e}))},t.prototype.updateActiveButton=function(e){var t=this.context.theme.getClass("buttonActive");E(this.el,"button").forEach((function(n){e&&n.classList.contains("fc-"+e+"-button")?n.classList.add(t):n.classList.remove(t)}))},t.prototype.toggleButtonEnabled=function(e,t){E(this.el,".fc-"+e+"-button").forEach((function(e){e.disabled=!t}))},t}(on),sr=function(e){function t(t){var n=e.call(this)||this;return n.elClassNames=[],n.renderSkeleton=Wt(n._renderSkeleton,n._unrenderSkeleton),n.renderToolbars=Wt(n._renderToolbars,n._unrenderToolbars,[n.renderSkeleton]),n.buildComponentContext=We(lr),n.buildViewPropTransformers=We(ur),n.el=t,n.computeTitle=We(ar),n.parseBusinessHours=We((function(e){return Ft(e,n.context.calendar)})),n}return ye(t,e),t.prototype.render=function(e,t){this.freezeHeight();var n=this.computeTitle(e.dateProfile,e.viewSpec.options);this.renderSkeleton(t),this.renderToolbars(e.viewSpec,e.dateProfile,e.currentDate,n),this.renderView(e,n),this.updateSize(),this.thawHeight()},t.prototype.destroy=function(){this.header&&this.header.destroy(),this.footer&&this.footer.destroy(),this.renderSkeleton.unrender(),e.prototype.destroy.call(this)},t.prototype._renderSkeleton=function(e){this.updateElClassNames(e),p(this.el,this.contentEl=a("div",{className:"fc-view-container"}));for(var t=e.calendar,n=0,r=t.pluginSystem.hooks.viewContainerModifiers;n<r.length;n++){(0,r[n])(this.contentEl,t)}},t.prototype._unrenderSkeleton=function(){this.view&&(this.savedScroll=this.view.queryScroll(),this.view.destroy(),this.view=null),v(this.contentEl),this.removeElClassNames()},t.prototype.removeElClassNames=function(){for(var e=this.el.classList,t=0,n=this.elClassNames;t<n.length;t++){var r=n[t];e.remove(r)}this.elClassNames=[]},t.prototype.updateElClassNames=function(e){this.removeElClassNames();var t=e.theme,n=e.options;this.elClassNames=["fc","fc-"+n.dir,t.getClass("widget")];for(var r=this.el.classList,i=0,o=this.elClassNames;i<o.length;i++){var s=o[i];r.add(s)}},t.prototype._renderToolbars=function(e,t,n,r){var i=this.context,o=this.header,s=this.footer,a=i.options,l=i.calendar,u=a.header,c=a.footer,h=this.props.dateProfileGenerator,f=l.getNow(),v=h.build(f),g=h.buildPrev(t,n),y=h.buildNext(t,n),m={title:r,activeButton:e.type,isTodayEnabled:v.isValid&&!Ae(t.currentRange,f),isPrevEnabled:g.isValid,isNextEnabled:y.isValid};u?(o||(o=this.header=new or("fc-header-toolbar"),p(this.el,o.el)),o.receiveProps(me({layout:u},m),i)):o&&(o.destroy(),o=this.header=null),c?(s||(s=this.footer=new or("fc-footer-toolbar"),d(this.el,s.el)),s.receiveProps(me({layout:c},m),i)):s&&(s.destroy(),s=this.footer=null)},t.prototype._unrenderToolbars=function(){this.header&&(this.header.destroy(),this.header=null),this.footer&&(this.footer.destroy(),this.footer=null)},t.prototype.renderView=function(e,t){var n=this.view,r=this.context,i=r.calendar,o=r.options,s=e.viewSpec,a=e.dateProfileGenerator;n&&n.viewSpec===s||(n&&n.destroy(),n=this.view=new s.class(s,this.contentEl),this.savedScroll&&(n.addScroll(this.savedScroll,!0),this.savedScroll=null)),n.title=t;for(var l={dateProfileGenerator:a,dateProfile:e.dateProfile,businessHours:this.parseBusinessHours(s.options.businessHours),eventStore:e.eventStore,eventUiBases:e.eventUiBases,dateSelection:e.dateSelection,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize},u=0,c=this.buildViewPropTransformers(i.pluginSystem.hooks.viewPropsTransformers);u<c.length;u++){var d=c[u];me(l,d.transform(l,s,e,o))}n.receiveProps(l,this.buildComponentContext(this.context,s,n))},t.prototype.updateSize=function(e){void 0===e&&(e=!1);var t=this.view;t&&((e||null==this.isHeightAuto)&&this.computeHeightVars(),t.updateSize(e,this.viewHeight,this.isHeightAuto),t.updateNowIndicator(),t.popScroll(e))},t.prototype.computeHeightVars=function(){var e=this.context.calendar,t=e.opt("height"),n=e.opt("contentHeight");if(this.isHeightAuto="auto"===t||"auto"===n,"number"==typeof n)this.viewHeight=n;else if("function"==typeof n)this.viewHeight=n();else if("number"==typeof t)this.viewHeight=t-this.queryToolbarsHeight();else if("function"==typeof t)this.viewHeight=t()-this.queryToolbarsHeight();else if("parent"===t){var r=this.el.parentNode;this.viewHeight=r.getBoundingClientRect().height-this.queryToolbarsHeight()}else this.viewHeight=Math.round(this.contentEl.getBoundingClientRect().width/Math.max(e.opt("aspectRatio"),.5))},t.prototype.queryToolbarsHeight=function(){var e=0;return this.header&&(e+=M(this.header.el)),this.footer&&(e+=M(this.footer.el)),e},t.prototype.freezeHeight=function(){T(this.el,{height:this.el.getBoundingClientRect().height,overflow:"hidden"})},t.prototype.thawHeight=function(){T(this.el,{height:"",overflow:""})},t}(on);function ar(e,t){var n;return n=/^(year|month)$/.test(e.currentRangeUnit)?e.currentRange:e.activeRange,this.context.dateEnv.formatRange(n.start,n.end,tt(t.titleFormat||function(e){var t=e.currentRangeUnit;if("year"===t)return{year:"numeric"};if("month"===t)return{year:"numeric",month:"long"};var n=B(e.currentRange.start,e.currentRange.end);return null!==n&&n>1?{year:"numeric",month:"short",day:"numeric"}:{year:"numeric",month:"long",day:"numeric"}}(e),t.titleRangeSeparator),{isEndExclusive:e.isRangeAllDay})}function lr(e,t,n){return e.extend(t.options,n)}function ur(e){return e.map((function(e){return new e}))}var cr=function(){function e(e){this.component=e.component}return e.prototype.destroy=function(){},e}();var dr={},pr=function(e){function t(t){var n=e.call(this,t)||this;n.handleSegClick=function(e,t){var r=n.component,i=r.context,o=i.calendar,s=i.view,a=ct(t);if(a&&r.isValidSegDownEl(e.target)){var l=m(e.target,".fc-has-url"),u=l?l.querySelector("a[href]").href:"";o.publiclyTrigger("eventClick",[{el:t,event:new st(r.context.calendar,a.eventRange.def,a.eventRange.instance),jsEvent:e,view:s}]),u&&!e.defaultPrevented&&(window.location.href=u)}};var r=t.component;return n.destroy=O(r.el,"click",r.fgSegSelector+","+r.bgSegSelector,n.handleSegClick),n}return ye(t,e),t}(cr),hr=function(e){function t(t){var n=e.call(this,t)||this;n.handleEventElRemove=function(e){e===n.currentSegEl&&n.handleSegLeave(null,n.currentSegEl)},n.handleSegEnter=function(e,t){ct(t)&&(t.classList.add("fc-allow-mouse-resize"),n.currentSegEl=t,n.triggerEvent("eventMouseEnter",e,t))},n.handleSegLeave=function(e,t){n.currentSegEl&&(t.classList.remove("fc-allow-mouse-resize"),n.currentSegEl=null,n.triggerEvent("eventMouseLeave",e,t))};var r,i,o,s,a,l=t.component;return n.removeHoverListeners=(r=l.el,i=l.fgSegSelector+","+l.bgSegSelector,o=n.handleSegEnter,s=n.handleSegLeave,O(r,"mouseover",i,(function(e,t){if(t!==a){a=t,o(e,t);var n=function(e){a=null,s(e,t),t.removeEventListener("mouseleave",n)};t.addEventListener("mouseleave",n)}}))),l.context.calendar.on("eventElRemove",n.handleEventElRemove),n}return ye(t,e),t.prototype.destroy=function(){this.removeHoverListeners(),this.component.context.calendar.off("eventElRemove",this.handleEventElRemove)},t.prototype.triggerEvent=function(e,t,n){var r=this.component,i=r.context,o=i.calendar,s=i.view,a=ct(n);t&&!r.isValidSegDownEl(t.target)||o.publiclyTrigger(e,[{el:n,event:new st(o,a.eventRange.def,a.eventRange.instance),jsEvent:t,view:s}])},t}(cr),fr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ye(t,e),t}(tn);fr.prototype.classes={widget:"fc-unthemed",widgetHeader:"fc-widget-header",widgetContent:"fc-widget-content",buttonGroup:"fc-button-group",button:"fc-button fc-button-primary",buttonActive:"fc-button-active",popoverHeader:"fc-widget-header",popoverContent:"fc-widget-content",headerRow:"fc-widget-header",dayRow:"fc-widget-content",listView:"fc-widget-content"},fr.prototype.baseIconClass="fc-icon",fr.prototype.iconClasses={close:"fc-icon-x",prev:"fc-icon-chevron-left",next:"fc-icon-chevron-right",prevYear:"fc-icon-chevrons-left",nextYear:"fc-icon-chevrons-right"},fr.prototype.iconOverrideOption="buttonIcons",fr.prototype.iconOverrideCustomButtonOption="icon",fr.prototype.iconOverridePrefix="fc-icon-";var vr=function(){function e(e,t){var n,r,i,o=this;this.buildComponentContext=We(gr),this.parseRawLocales=We(Tn),this.buildLocale=We(Dn),this.buildDateEnv=We(yr),this.buildTheme=We(mr),this.buildEventUiSingleBase=We(this._buildEventUiSingleBase),this.buildSelectionConfig=We(this._buildSelectionConfig),this.buildEventUiBySource=(n=Er,r=Re,i=null,function(){var e=n.apply(this,arguments);return(null===i||i!==e&&!r(i,e))&&(i=e),i}),this.buildEventUiBases=We(br),this.interactionsStore={},this.actionQueue=[],this.isReducing=!1,this.needsRerender=!1,this.isRendering=!1,this.renderingPauseDepth=0,this.buildDelayedRerender=We(Sr),this.afterSizingTriggers={},this.isViewUpdated=!1,this.isDatesUpdated=!1,this.isEventsUpdated=!1,this.el=e,this.optionsManager=new Rn(t||{}),this.pluginSystem=new un,this.addPluginInputs(this.optionsManager.computed.plugins||[]),this.handleOptions(this.optionsManager.computed),this.publiclyTrigger("_init"),this.hydrate(),this.calendarInteractions=this.pluginSystem.hooks.calendarInteractions.map((function(e){return new e(o)}))}return e.prototype.addPluginInputs=function(e){for(var t=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var i=r[n];if("string"==typeof i){var o="FullCalendar"+se(i);window[o]?t.push(window[o].default):console.warn("Plugin file not loaded for "+i)}else t.push(i)}return bn.concat(t)}(e),n=0,r=t;n<r.length;n++){var i=r[n];this.pluginSystem.add(i)}},Object.defineProperty(e.prototype,"view",{get:function(){return this.component?this.component.view:null},enumerable:!0,configurable:!0}),e.prototype.render=function(){this.component?this.requestRerender():(this.component=new sr(this.el),this.renderableEventStore={defs:{},instances:{}},this.bindHandlers(),this.executeRender())},e.prototype.destroy=function(){if(this.component){this.unbindHandlers(),this.component.destroy(),this.component=null;for(var e=0,t=this.calendarInteractions;e<t.length;e++){t[e].destroy()}this.publiclyTrigger("_destroyed")}},e.prototype.bindHandlers=function(){var e=this;this.removeNavLinkListener=O(this.el,"click","a[data-goto]",(function(t,n){var r=n.getAttribute("data-goto");r=r?JSON.parse(r):{};var i=e.dateEnv,o=i.createMarker(r.date),s=r.type,a=e.viewOpt("navLink"+se(s)+"Click");"function"==typeof a?a(i.toDate(o),t):("string"==typeof a&&(s=a),e.zoomTo(o,s))})),this.opt("handleWindowResize")&&window.addEventListener("resize",this.windowResizeProxy=de(this.windowResize.bind(this),this.opt("windowResizeDelay")))},e.prototype.unbindHandlers=function(){this.removeNavLinkListener(),this.windowResizeProxy&&(window.removeEventListener("resize",this.windowResizeProxy),this.windowResizeProxy=null)},e.prototype.hydrate=function(){var e=this;this.state=this.buildInitialState();var t=this.opt("eventSources")||[],n=this.opt("events"),r=[];n&&t.unshift(n);for(var i=0,o=t;i<o.length;i++){var s=Nn(o[i],this);s&&r.push(s)}this.batchRendering((function(){e.dispatch({type:"INIT"}),e.dispatch({type:"ADD_EVENT_SOURCES",sources:r}),e.dispatch({type:"SET_VIEW_TYPE",viewType:e.opt("defaultView")||e.pluginSystem.hooks.defaultView})}))},e.prototype.buildInitialState=function(){return{viewType:null,loadingLevel:0,eventSourceLoadingLevel:0,currentDate:this.getInitialDate(),dateProfile:null,eventSources:{},eventStore:{defs:{},instances:{}},dateSelection:null,eventSelection:"",eventDrag:null,eventResize:null}},e.prototype.dispatch=function(e){if(this.actionQueue.push(e),!this.isReducing){this.isReducing=!0;for(var t=this.state;this.actionQueue.length;)this.state=this.reduce(this.state,this.actionQueue.shift(),this);var n=this.state;this.isReducing=!1,!t.loadingLevel&&n.loadingLevel?this.publiclyTrigger("loading",[!0]):t.loadingLevel&&!n.loadingLevel&&this.publiclyTrigger("loading",[!1]);var r=this.component&&this.component.view;t.eventStore!==n.eventStore&&t.eventStore&&(this.isEventsUpdated=!0),t.dateProfile!==n.dateProfile&&(t.dateProfile&&r&&this.publiclyTrigger("datesDestroy",[{view:r,el:r.el}]),this.isDatesUpdated=!0),t.viewType!==n.viewType&&(t.viewType&&r&&this.publiclyTrigger("viewSkeletonDestroy",[{view:r,el:r.el}]),this.isViewUpdated=!0),this.requestRerender()}},e.prototype.reduce=function(e,t,n){return Wn(e,t,n)},e.prototype.requestRerender=function(){this.needsRerender=!0,this.delayedRerender()},e.prototype.tryRerender=function(){this.component&&this.needsRerender&&!this.renderingPauseDepth&&!this.isRendering&&this.executeRender()},e.prototype.batchRendering=function(e){this.renderingPauseDepth++,e(),this.renderingPauseDepth--,this.needsRerender&&this.requestRerender()},e.prototype.executeRender=function(){this.needsRerender=!1,this.isRendering=!0,this.renderComponent(),this.isRendering=!1,this.needsRerender&&this.delayedRerender()},e.prototype.renderComponent=function(){var e=this.state,t=this.component,n=e.viewType,r=this.viewSpecs[n];if(!r)throw new Error('View type "'+n+'" is not valid');var i=this.renderableEventStore=e.eventSourceLoadingLevel&&!this.opt("progressiveEventRendering")?this.renderableEventStore:e.eventStore,o=this.buildEventUiSingleBase(r.options),s=this.buildEventUiBySource(e.eventSources),a=this.eventUiBases=this.buildEventUiBases(i.defs,o,s);t.receiveProps(me({},e,{viewSpec:r,dateProfileGenerator:this.dateProfileGenerators[n],dateProfile:e.dateProfile,eventStore:i,eventUiBases:a,dateSelection:e.dateSelection,eventSelection:e.eventSelection,eventDrag:e.eventDrag,eventResize:e.eventResize}),this.buildComponentContext(this.theme,this.dateEnv,this.optionsManager.computed)),this.isViewUpdated&&(this.isViewUpdated=!1,this.publiclyTrigger("viewSkeletonRender",[{view:t.view,el:t.view.el}])),this.isDatesUpdated&&(this.isDatesUpdated=!1,this.publiclyTrigger("datesRender",[{view:t.view,el:t.view.el}])),this.isEventsUpdated&&(this.isEventsUpdated=!1),this.releaseAfterSizingTriggers()},e.prototype.setOption=function(e,t){var n;this.mutateOptions(((n={})[e]=t,n),[],!0)},e.prototype.getOption=function(e){return this.optionsManager.computed[e]},e.prototype.opt=function(e){return this.optionsManager.computed[e]},e.prototype.viewOpt=function(e){return this.viewOpts()[e]},e.prototype.viewOpts=function(){return this.viewSpecs[this.state.viewType].options},e.prototype.mutateOptions=function(e,t,n,r){var i=this,o=this.pluginSystem.hooks.optionChangeHandlers,s={},a={},l=this.dateEnv,u=!1,c=!1,d=Boolean(t.length);for(var p in e)o[p]?a[p]=e[p]:s[p]=e[p];for(var h in s)/^(height|contentHeight|aspectRatio)$/.test(h)?c=!0:/^(defaultDate|defaultView)$/.test(h)||(d=!0,"timeZone"===h&&(u=!0));this.optionsManager.mutate(s,t,n),d&&this.handleOptions(this.optionsManager.computed),this.batchRendering((function(){if(d?(u&&i.dispatch({type:"CHANGE_TIMEZONE",oldDateEnv:l}),i.dispatch({type:"SET_VIEW_TYPE",viewType:i.state.viewType})):c&&i.updateSize(),r)for(var e in a)o[e](a[e],i,r)}))},e.prototype.handleOptions=function(e){var t=this,n=this.pluginSystem.hooks;this.defaultAllDayEventDuration=J(e.defaultAllDayEventDuration),this.defaultTimedEventDuration=J(e.defaultTimedEventDuration),this.delayedRerender=this.buildDelayedRerender(e.rerenderDelay),this.theme=this.buildTheme(e);var r=this.parseRawLocales(e.locales);this.availableRawLocales=r.map;var i=this.buildLocale(e.locale||r.defaultCode,r.map);this.dateEnv=this.buildDateEnv(i,e.timeZone,n.namedTimeZonedImpl,e.firstDay,e.weekNumberCalculation,e.weekLabel,n.cmdFormatter),this.selectionConfig=this.buildSelectionConfig(e),this.viewSpecs=ir(n.views,this.optionsManager),this.dateProfileGenerators=Te(this.viewSpecs,(function(e){return new e.class.prototype.dateProfileGeneratorClass(e,t)}))},e.prototype.getAvailableLocaleCodes=function(){return Object.keys(this.availableRawLocales)},e.prototype._buildSelectionConfig=function(e){return xt("select",e,this)},e.prototype._buildEventUiSingleBase=function(e){return e.editable&&(e=me({},e,{eventEditable:!0})),xt("event",e,this)},e.prototype.hasPublicHandlers=function(e){return this.hasHandlers(e)||this.opt(e)},e.prototype.publiclyTrigger=function(e,t){var n=this.opt(e);if(this.triggerWith(e,this,t),n)return n.apply(this,t)},e.prototype.publiclyTriggerAfterSizing=function(e,t){var n=this.afterSizingTriggers;(n[e]||(n[e]=[])).push(t)},e.prototype.releaseAfterSizingTriggers=function(){var e=this.afterSizingTriggers;for(var t in e)for(var n=0,r=e[t];n<r.length;n++){var i=r[n];this.publiclyTrigger(t,i)}this.afterSizingTriggers={}},e.prototype.isValidViewType=function(e){return Boolean(this.viewSpecs[e])},e.prototype.changeView=function(e,t){var n=null;t&&(t.start&&t.end?(this.optionsManager.mutate({visibleRange:t},[]),this.handleOptions(this.optionsManager.computed)):n=this.dateEnv.createMarker(t)),this.unselect(),this.dispatch({type:"SET_VIEW_TYPE",viewType:e,dateMarker:n})},e.prototype.zoomTo=function(e,t){var n;t=t||"day",n=this.viewSpecs[t]||this.getUnitViewSpec(t),this.unselect(),n?this.dispatch({type:"SET_VIEW_TYPE",viewType:n.type,dateMarker:e}):this.dispatch({type:"SET_DATE",dateMarker:e})},e.prototype.getUnitViewSpec=function(e){var t,n,r=this.component,i=[];for(var o in r.header&&i.push.apply(i,r.header.viewsWithButtons),r.footer&&i.push.apply(i,r.footer.viewsWithButtons),this.viewSpecs)i.push(o);for(t=0;t<i.length;t++)if((n=this.viewSpecs[i[t]])&&n.singleUnit===e)return n},e.prototype.getInitialDate=function(){var e=this.opt("defaultDate");return null!=e?this.dateEnv.createMarker(e):this.getNow()},e.prototype.prev=function(){this.unselect(),this.dispatch({type:"PREV"})},e.prototype.next=function(){this.unselect(),this.dispatch({type:"NEXT"})},e.prototype.prevYear=function(){this.unselect(),this.dispatch({type:"SET_DATE",dateMarker:this.dateEnv.addYears(this.state.currentDate,-1)})},e.prototype.nextYear=function(){this.unselect(),this.dispatch({type:"SET_DATE",dateMarker:this.dateEnv.addYears(this.state.currentDate,1)})},e.prototype.today=function(){this.unselect(),this.dispatch({type:"SET_DATE",dateMarker:this.getNow()})},e.prototype.gotoDate=function(e){this.unselect(),this.dispatch({type:"SET_DATE",dateMarker:this.dateEnv.createMarker(e)})},e.prototype.incrementDate=function(e){var t=J(e);t&&(this.unselect(),this.dispatch({type:"SET_DATE",dateMarker:this.dateEnv.add(this.state.currentDate,t)}))},e.prototype.getDate=function(){return this.dateEnv.toDate(this.state.currentDate)},e.prototype.formatDate=function(e,t){var n=this.dateEnv;return n.format(n.createMarker(e),tt(t))},e.prototype.formatRange=function(e,t,n){var r=this.dateEnv;return r.formatRange(r.createMarker(e),r.createMarker(t),tt(n,this.opt("defaultRangeSeparator")),n)},e.prototype.formatIso=function(e,t){var n=this.dateEnv;return n.formatIso(n.createMarker(e),{omitTime:t})},e.prototype.windowResize=function(e){!this.isHandlingWindowResize&&this.component&&e.target===window&&(this.isHandlingWindowResize=!0,this.updateSize(),this.publiclyTrigger("windowResize",[this.view]),this.isHandlingWindowResize=!1)},e.prototype.updateSize=function(){this.component&&this.component.updateSize(!0)},e.prototype.registerInteractiveComponent=function(e,t){var n=function(e,t){return{component:e,el:t.el,useEventCenter:null==t.useEventCenter||t.useEventCenter}}(e,t),r=[pr,hr].concat(this.pluginSystem.hooks.componentInteractions).map((function(e){return new e(n)}));this.interactionsStore[e.uid]=r,dr[e.uid]=n},e.prototype.unregisterInteractiveComponent=function(e){for(var t=0,n=this.interactionsStore[e.uid];t<n.length;t++){n[t].destroy()}delete this.interactionsStore[e.uid],delete dr[e.uid]},e.prototype.select=function(e,t){var n=Kn(null==t?null!=e.start?e:{start:e,end:null}:{start:e,end:t},this.dateEnv,J({days:1}));n&&(this.dispatch({type:"SELECT_DATES",selection:n}),this.triggerDateSelect(n))},e.prototype.unselect=function(e){this.state.dateSelection&&(this.dispatch({type:"UNSELECT_DATES"}),this.triggerDateUnselect(e))},e.prototype.triggerDateSelect=function(e,t){var n=me({},this.buildDateSpanApi(e),{jsEvent:t?t.origEvent:null,view:this.view});this.publiclyTrigger("select",[n])},e.prototype.triggerDateUnselect=function(e){this.publiclyTrigger("unselect",[{jsEvent:e?e.origEvent:null,view:this.view}])},e.prototype.triggerDateClick=function(e,t,n,r){var i=me({},this.buildDatePointApi(e),{dayEl:t,jsEvent:r,view:n});this.publiclyTrigger("dateClick",[i])},e.prototype.buildDatePointApi=function(e){for(var t,n,r={},i=0,o=this.pluginSystem.hooks.datePointTransforms;i<o.length;i++){var s=o[i];me(r,s(e,this))}return me(r,(t=e,{date:(n=this.dateEnv).toDate(t.range.start),dateStr:n.formatIso(t.range.start,{omitTime:t.allDay}),allDay:t.allDay})),r},e.prototype.buildDateSpanApi=function(e){for(var t,n,r={},i=0,o=this.pluginSystem.hooks.dateSpanTransforms;i<o.length;i++){var s=o[i];me(r,s(e,this))}return me(r,(t=e,{start:(n=this.dateEnv).toDate(t.range.start),end:n.toDate(t.range.end),startStr:n.formatIso(t.range.start,{omitTime:t.allDay}),endStr:n.formatIso(t.range.end,{omitTime:t.allDay}),allDay:t.allDay})),r},e.prototype.getNow=function(){var e=this.opt("now");return"function"==typeof e&&(e=e()),null==e?this.dateEnv.createNowMarker():this.dateEnv.createMarker(e)},e.prototype.getDefaultEventEnd=function(e,t){var n=t;return e?(n=V(n),n=this.dateEnv.add(n,this.defaultAllDayEventDuration)):n=this.dateEnv.add(n,this.defaultTimedEventDuration),n},e.prototype.addEvent=function(e,t){if(e instanceof st){var n=e._def,r=e._instance;return this.state.eventStore.defs[n.defId]||this.dispatch({type:"ADD_EVENTS",eventStore:Ie({def:n,instance:r})}),e}var i;if(t instanceof ot)i=t.internalEventSource.sourceId;else if(null!=t){var o=this.getEventSourceById(t);if(!o)return console.warn('Could not find an event source with ID "'+t+'"'),null;i=o.internalEventSource.sourceId}var s=Ut(e,i,this);return s?(this.dispatch({type:"ADD_EVENTS",eventStore:Ie(s)}),new st(this,s.def,s.def.recurringDef?null:s.instance)):null},e.prototype.getEventById=function(e){var t=this.state.eventStore,n=t.defs,r=t.instances;for(var i in e=String(e),n){var o=n[i];if(o.publicId===e){if(o.recurringDef)return new st(this,o,null);for(var s in r){var a=r[s];if(a.defId===o.defId)return new st(this,o,a)}}}return null},e.prototype.getEvents=function(){var e=this.state.eventStore,t=e.defs,n=e.instances,r=[];for(var i in n){var o=n[i],s=t[o.defId];r.push(new st(this,s,o))}return r},e.prototype.removeAllEvents=function(){this.dispatch({type:"REMOVE_ALL_EVENTS"})},e.prototype.rerenderEvents=function(){this.dispatch({type:"RESET_EVENTS"})},e.prototype.getEventSources=function(){var e=this.state.eventSources,t=[];for(var n in e)t.push(new ot(this,e[n]));return t},e.prototype.getEventSourceById=function(e){var t=this.state.eventSources;for(var n in e=String(e),t)if(t[n].publicId===e)return new ot(this,t[n]);return null},e.prototype.addEventSource=function(e){if(e instanceof ot)return this.state.eventSources[e.internalEventSource.sourceId]||this.dispatch({type:"ADD_EVENT_SOURCES",sources:[e.internalEventSource]}),e;var t=Nn(e,this);return t?(this.dispatch({type:"ADD_EVENT_SOURCES",sources:[t]}),new ot(this,t)):null},e.prototype.removeAllEventSources=function(){this.dispatch({type:"REMOVE_ALL_EVENT_SOURCES"})},e.prototype.refetchEvents=function(){this.dispatch({type:"FETCH_EVENT_SOURCES"})},e.prototype.scrollToTime=function(e){var t=J(e);t&&this.component.view.scrollToDuration(t)},e}();function gr(e,t,n){return new rn(this,e,t,n,null)}function yr(e,t,n,r,i,o,s){return new xn({calendarSystem:"gregory",timeZone:t,namedTimeZoneImpl:n,locale:e,weekNumberCalculation:i,firstDay:r,weekLabel:o,cmdFormatter:s})}function mr(e){return new(this.pluginSystem.hooks.themeClasses[e.themeSystem]||fr)(e)}function Sr(e){var t=this.tryRerender.bind(this);return null!=e&&(t=de(t,e)),t}function Er(e){return Te(e,(function(e){return e.ui}))}function br(e,t,n){var r={"":t};for(var i in e){var o=e[i];o.sourceId&&n[o.sourceId]&&(r[i]=n[o.sourceId])}return r}qt.mixInto(vr);var wr=function(e){function t(t,n){var r=e.call(this,a("div",{className:"fc-view fc-"+t.type+"-view"}))||this;return r.renderDatesMem=Wt(r.renderDatesWrap,r.unrenderDatesWrap),r.renderBusinessHoursMem=Wt(r.renderBusinessHours,r.unrenderBusinessHours,[r.renderDatesMem]),r.renderDateSelectionMem=Wt(r.renderDateSelectionWrap,r.unrenderDateSelectionWrap,[r.renderDatesMem]),r.renderEventsMem=Wt(r.renderEvents,r.unrenderEvents,[r.renderDatesMem]),r.renderEventSelectionMem=Wt(r.renderEventSelectionWrap,r.unrenderEventSelectionWrap,[r.renderEventsMem]),r.renderEventDragMem=Wt(r.renderEventDragWrap,r.unrenderEventDragWrap,[r.renderDatesMem]),r.renderEventResizeMem=Wt(r.renderEventResizeWrap,r.unrenderEventResizeWrap,[r.renderDatesMem]),r.viewSpec=t,r.type=t.type,n.appendChild(r.el),r.initialize(),r}return ye(t,e),t.prototype.initialize=function(){},Object.defineProperty(t.prototype,"activeStart",{get:function(){return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.start)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"activeEnd",{get:function(){return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.end)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentStart",{get:function(){return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.start)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentEnd",{get:function(){return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.end)},enumerable:!0,configurable:!0}),t.prototype.render=function(e,t){this.renderDatesMem(e.dateProfile),this.renderBusinessHoursMem(e.businessHours),this.renderDateSelectionMem(e.dateSelection),this.renderEventsMem(e.eventStore),this.renderEventSelectionMem(e.eventSelection),this.renderEventDragMem(e.eventDrag),this.renderEventResizeMem(e.eventResize)},t.prototype.beforeUpdate=function(){this.addScroll(this.queryScroll())},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.renderDatesMem.unrender()},t.prototype.updateSize=function(e,t,n){var r=this.context.calendar;e&&this.addScroll(this.queryScroll()),(e||r.isViewUpdated||r.isDatesUpdated||r.isEventsUpdated)&&this.updateBaseSize(e,t,n)},t.prototype.updateBaseSize=function(e,t,n){},t.prototype.renderDatesWrap=function(e){this.renderDates(e),this.addScroll({duration:J(this.context.options.scrollTime)})},t.prototype.unrenderDatesWrap=function(){this.stopNowIndicator(),this.unrenderDates()},t.prototype.renderDates=function(e){},t.prototype.unrenderDates=function(){},t.prototype.renderBusinessHours=function(e){},t.prototype.unrenderBusinessHours=function(){},t.prototype.renderDateSelectionWrap=function(e){e&&this.renderDateSelection(e)},t.prototype.unrenderDateSelectionWrap=function(e){e&&this.unrenderDateSelection(e)},t.prototype.renderDateSelection=function(e){},t.prototype.unrenderDateSelection=function(e){},t.prototype.renderEvents=function(e){},t.prototype.unrenderEvents=function(){},t.prototype.sliceEvents=function(e,t){var n=this.props;return at(e,n.eventUiBases,n.dateProfile.activeRange,t?this.context.nextDayThreshold:null).fg},t.prototype.renderEventSelectionWrap=function(e){e&&this.renderEventSelection(e)},t.prototype.unrenderEventSelectionWrap=function(e){e&&this.unrenderEventSelection(e)},t.prototype.renderEventSelection=function(e){},t.prototype.unrenderEventSelection=function(e){},t.prototype.renderEventDragWrap=function(e){e&&this.renderEventDrag(e)},t.prototype.unrenderEventDragWrap=function(e){e&&this.unrenderEventDrag(e)},t.prototype.renderEventDrag=function(e){},t.prototype.unrenderEventDrag=function(e){},t.prototype.renderEventResizeWrap=function(e){e&&this.renderEventResize(e)},t.prototype.unrenderEventResizeWrap=function(e){e&&this.unrenderEventResize(e)},t.prototype.renderEventResize=function(e){},t.prototype.unrenderEventResize=function(e){},t.prototype.startNowIndicator=function(e,t){var n,r,i,o=this,s=this.context,a=s.calendar,l=s.dateEnv;s.options.nowIndicator&&!this.initialNowDate&&(n=this.getNowIndicatorUnit(e,t))&&(r=this.updateNowIndicator.bind(this),this.initialNowDate=a.getNow(),this.initialNowQueriedMs=(new Date).valueOf(),i=l.add(l.startOf(this.initialNowDate,n),J(1,n)).valueOf()-this.initialNowDate.valueOf(),this.nowIndicatorTimeoutID=setTimeout((function(){o.nowIndicatorTimeoutID=null,r(),i="second"===n?1e3:6e4,o.nowIndicatorIntervalID=setInterval(r,i)}),i))},t.prototype.updateNowIndicator=function(){this.props.dateProfile&&this.initialNowDate&&(this.unrenderNowIndicator(),this.renderNowIndicator(z(this.initialNowDate,(new Date).valueOf()-this.initialNowQueriedMs)),this.isNowIndicatorRendered=!0)},t.prototype.stopNowIndicator=function(){this.nowIndicatorTimeoutID&&(clearTimeout(this.nowIndicatorTimeoutID),this.nowIndicatorTimeoutID=null),this.nowIndicatorIntervalID&&(clearInterval(this.nowIndicatorIntervalID),this.nowIndicatorIntervalID=null),this.isNowIndicatorRendered&&(this.unrenderNowIndicator(),this.isNowIndicatorRendered=!1)},t.prototype.getNowIndicatorUnit=function(e,t){},t.prototype.renderNowIndicator=function(e){},t.prototype.unrenderNowIndicator=function(){},t.prototype.addScroll=function(e,t){t&&(e.isForced=t),me(this.queuedScroll||(this.queuedScroll={}),e)},t.prototype.popScroll=function(e){this.applyQueuedScroll(e),this.queuedScroll=null},t.prototype.applyQueuedScroll=function(e){this.queuedScroll&&this.applyScroll(this.queuedScroll,e)},t.prototype.queryScroll=function(){var e={};return this.props.dateProfile&&me(e,this.queryDateScroll()),e},t.prototype.applyScroll=function(e,t){var n=e.duration,r=e.isForced;null==n||r||(delete e.duration,this.props.dateProfile&&me(e,this.computeDateScroll(n))),this.props.dateProfile&&this.applyDateScroll(e)},t.prototype.computeDateScroll=function(e){return{}},t.prototype.queryDateScroll=function(){return{}},t.prototype.applyDateScroll=function(e){},t.prototype.scrollToDuration=function(e){this.applyScroll({duration:e},!1)},t}(sn);qt.mixInto(wr),wr.prototype.usesMinMaxTime=!1,wr.prototype.dateProfileGeneratorClass=Fn;var Tr=function(){function e(){this.segs=[],this.isSizeDirty=!1}return e.prototype.renderSegs=function(e,t,n){this.context=e,this.rangeUpdated(),t=this.renderSegEls(t,n),this.segs=t,this.attachSegs(t,n),this.isSizeDirty=!0,ht(this.context,this.segs,Boolean(n))},e.prototype.unrender=function(e,t,n){ft(this.context,this.segs,Boolean(n)),this.detachSegs(this.segs),this.segs=[]},e.prototype.rangeUpdated=function(){var e,t,n=this.context.options;this.eventTimeFormat=tt(n.eventTimeFormat||this.computeEventTimeFormat(),n.defaultRangeSeparator),null==(e=n.displayEventTime)&&(e=this.computeDisplayEventTime()),null==(t=n.displayEventEnd)&&(t=this.computeDisplayEventEnd()),this.displayEventTime=e,this.displayEventEnd=t},e.prototype.renderSegEls=function(e,t){var n,r="";if(e.length){for(n=0;n<e.length;n++)r+=this.renderSegHtml(e[n],t);u(r).forEach((function(t,n){var r=e[n];t&&(r.el=t)})),e=lt(this.context,e,Boolean(t))}return e},e.prototype.getSegClasses=function(e,t,n,r){var i=["fc-event",e.isStart?"fc-start":"fc-not-start",e.isEnd?"fc-end":"fc-not-end"].concat(e.eventRange.ui.classNames);return t&&i.push("fc-draggable"),n&&i.push("fc-resizable"),r&&(i.push("fc-mirror"),r.isDragging&&i.push("fc-dragging"),r.isResizing&&i.push("fc-resizing")),i},e.prototype.getTimeText=function(e,t,n){var r=e.def,i=e.instance;return this._getTimeText(i.range.start,r.hasEnd?i.range.end:null,r.allDay,t,n,i.forcedStartTzo,i.forcedEndTzo)},e.prototype._getTimeText=function(e,t,n,r,i,o,s){var a=this.context.dateEnv;return null==r&&(r=this.eventTimeFormat),null==i&&(i=this.displayEventEnd),this.displayEventTime&&!n?i&&t?a.formatRange(e,t,r,{forcedStartTzo:o,forcedEndTzo:s}):a.format(e,r,{forcedTzo:o}):""},e.prototype.computeEventTimeFormat=function(){return{hour:"numeric",minute:"2-digit",omitZeroMinute:!0}},e.prototype.computeDisplayEventTime=function(){return!0},e.prototype.computeDisplayEventEnd=function(){return!0},e.prototype.getSkinCss=function(e){return{"background-color":e.backgroundColor,"border-color":e.borderColor,color:e.textColor}},e.prototype.sortEventSegs=function(e){var t=this.context.eventOrderSpecs,n=e.map(Dr);return n.sort((function(e,n){return function(e,t,n){var r,i;for(r=0;r<n.length;r++)if(i=oe(e,t,n[r]))return i;return 0}(e,n,t)})),n.map((function(e){return e._seg}))},e.prototype.computeSizes=function(e){(e||this.isSizeDirty)&&this.computeSegSizes(this.segs)},e.prototype.assignSizes=function(e){(e||this.isSizeDirty)&&(this.assignSegSizes(this.segs),this.isSizeDirty=!1)},e.prototype.computeSegSizes=function(e){},e.prototype.assignSegSizes=function(e){},e.prototype.hideByHash=function(e){if(e)for(var t=0,n=this.segs;t<n.length;t++){var r=n[t];e[r.eventRange.instance.instanceId]&&(r.el.style.visibility="hidden")}},e.prototype.showByHash=function(e){if(e)for(var t=0,n=this.segs;t<n.length;t++){var r=n[t];e[r.eventRange.instance.instanceId]&&(r.el.style.visibility="")}},e.prototype.selectByInstanceId=function(e){if(e)for(var t=0,n=this.segs;t<n.length;t++){var r=n[t],i=r.eventRange.instance;i&&i.instanceId===e&&r.el&&r.el.classList.add("fc-selected")}},e.prototype.unselectByInstanceId=function(e){if(e)for(var t=0,n=this.segs;t<n.length;t++){var r=n[t];r.el&&r.el.classList.remove("fc-selected")}},e}();function Dr(e){var t=e.eventRange.def,n=e.eventRange.instance.range,r=n.start?n.start.valueOf():0,i=n.end?n.end.valueOf():0;return me({},t.extendedProps,t,{id:t.publicId,start:r,end:i,duration:i-r,allDay:Number(t.allDay),_seg:e})}var Cr=function(){function e(){this.fillSegTag="div",this.dirtySizeFlags={},this.containerElsByType={},this.segsByType={}}return e.prototype.getSegsByType=function(e){return this.segsByType[e]||[]},e.prototype.renderSegs=function(e,t,n){var r;this.context=t;var i=this.renderSegEls(e,n),o=this.attachSegs(e,i);o&&(r=this.containerElsByType[e]||(this.containerElsByType[e]=[])).push.apply(r,o),this.segsByType[e]=i,"bgEvent"===e&&ht(t,i,!1),this.dirtySizeFlags[e]=!0},e.prototype.unrender=function(e,t){var n=this.segsByType[e];n&&("bgEvent"===e&&ft(t,n,!1),this.detachSegs(e,n))},e.prototype.renderSegEls=function(e,t){var n,r=this,i="";if(t.length){for(n=0;n<t.length;n++)i+=this.renderSegHtml(e,t[n]);u(i).forEach((function(e,n){var r=t[n];e&&(r.el=e)})),"bgEvent"===e&&(t=lt(this.context,t,!1)),t=t.filter((function(e){return S(e.el,r.fillSegTag)}))}return t},e.prototype.renderSegHtml=function(e,t){var n=null,r=[];return"highlight"!==e&&"businessHours"!==e&&(n={"background-color":t.eventRange.ui.backgroundColor}),"highlight"!==e&&(r=r.concat(t.eventRange.ui.classNames)),"businessHours"===e?r.push("fc-bgevent"):r.push("fc-"+e.toLowerCase()),"<"+this.fillSegTag+(r.length?' class="'+r.join(" ")+'"':"")+(n?' style="'+kt(n)+'"':"")+"></"+this.fillSegTag+">"},e.prototype.detachSegs=function(e,t){var n=this.containerElsByType[e];n&&(n.forEach(v),delete this.containerElsByType[e])},e.prototype.computeSizes=function(e){for(var t in this.segsByType)(e||this.dirtySizeFlags[t])&&this.computeSegSizes(this.segsByType[t])},e.prototype.assignSizes=function(e){for(var t in this.segsByType)(e||this.dirtySizeFlags[t])&&this.assignSegSizes(this.segsByType[t]);this.dirtySizeFlags={}},e.prototype.computeSegSizes=function(e){},e.prototype.assignSegSizes=function(e){},e}();!function(){function e(e){this.emitter=new qt}e.prototype.destroy=function(){},e.prototype.setMirrorIsVisible=function(e){},e.prototype.setMirrorNeedsRevert=function(e){},e.prototype.setAutoScrollEnabled=function(e){}}();Boolean;function Rr(e,t,n,r,i,o,s,a){var l,u=o.dateEnv,c=o.theme,d=o.options,p=Ae(t.activeRange,e),h=["fc-day-header",c.getClass("widgetHeader")];return l="function"==typeof d.columnHeaderHtml?d.columnHeaderHtml(u.toDate(e)):"function"==typeof d.columnHeaderText?Rt(d.columnHeaderText(u.toDate(e))):Rt(u.format(e,i)),n?h=h.concat(Yt(e,t,o,!0)):h.push("fc-"+H[e.getUTCDay()]),'<th class="'+h.join(" ")+'"'+(p&&n?' data-date="'+u.formatIso(e,{omitTime:!0})+'"':"")+(s>1?' colspan="'+s+'"':"")+(a?" "+a:"")+">"+(p?Zt(d,u,{date:e,forceOff:!n||1===r},l):l)+"</th>"}var kr=function(e){function t(t){var n=e.call(this)||this;return n.renderSkeleton=Wt(n._renderSkeleton,n._unrenderSkeleton),n.parentEl=t,n}return ye(t,e),t.prototype.render=function(e,t){var n=e.dates,r=e.datesRepDistinctDays,i=[];this.renderSkeleton(t),e.renderIntroHtml&&i.push(e.renderIntroHtml());for(var o=tt(t.options.columnHeaderFormat||function(e,t){return!e||t>10?{weekday:"short"}:t>1?{weekday:"short",month:"numeric",day:"numeric",omitCommas:!0}:{weekday:"long"}}(r,n.length)),s=0,a=n;s<a.length;s++){var l=a[s];i.push(Rr(l,e.dateProfile,r,n.length,o,t))}t.isRtl&&i.reverse(),this.thead.innerHTML="<tr>"+i.join("")+"</tr>"},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.renderSkeleton.unrender()},t.prototype._renderSkeleton=function(e){var t=e.theme,n=this.parentEl;n.innerHTML="",n.appendChild(this.el=l('<div class="fc-row '+t.getClass("headerRow")+'"><table class="'+t.getClass("tableGrid")+'"><thead></thead></table></div>')),this.thead=this.el.querySelector("thead")},t.prototype._unrenderSkeleton=function(){v(this.el)},t}(on),Ir=function(){function e(e,t){for(var n=e.start,r=e.end,i=[],o=[],s=-1;n<r;)t.isHiddenDay(n)?i.push(s+.5):(s++,i.push(s),o.push(n)),n=L(n,1);this.dates=o,this.indices=i,this.cnt=o.length}return e.prototype.sliceRange=function(e){var t=this.getDateDayIndex(e.start),n=this.getDateDayIndex(L(e.end,-1)),r=Math.max(0,t),i=Math.min(this.cnt-1,n);return(r=Math.ceil(r))<=(i=Math.floor(i))?{firstIndex:r,lastIndex:i,isStart:t===r,isEnd:n===i}:null},e.prototype.getDateDayIndex=function(e){var t=this.indices,n=Math.floor(U(this.dates[0],e));return n<0?t[0]-1:n>=t.length?t[t.length-1]+1:t[n]},e}(),_r=function(){function e(e,t){var n,r,i,o=e.dates;if(t){for(r=o[0].getUTCDay(),n=1;n<o.length&&o[n].getUTCDay()!==r;n++);i=Math.ceil(o.length/n)}else i=1,n=o.length;this.rowCnt=i,this.colCnt=n,this.daySeries=e,this.cells=this.buildCells(),this.headerDates=this.buildHeaderDates()}return e.prototype.buildCells=function(){for(var e=[],t=0;t<this.rowCnt;t++){for(var n=[],r=0;r<this.colCnt;r++)n.push(this.buildCell(t,r));e.push(n)}return e},e.prototype.buildCell=function(e,t){return{date:this.daySeries.dates[e*this.colCnt+t]}},e.prototype.buildHeaderDates=function(){for(var e=[],t=0;t<this.colCnt;t++)e.push(this.cells[0][t].date);return e},e.prototype.sliceRange=function(e){var t=this.colCnt,n=this.daySeries.sliceRange(e),r=[];if(n)for(var i=n.firstIndex,o=n.lastIndex,s=i;s<=o;){var a=Math.floor(s/t),l=Math.min((a+1)*t,o+1);r.push({row:a,firstCol:s%t,lastCol:(l-1)%t,isStart:n.isStart&&s===i,isEnd:n.isEnd&&l-1===o}),s=l}return r},e}(),Mr=function(){function e(){this.sliceBusinessHours=We(this._sliceBusinessHours),this.sliceDateSelection=We(this._sliceDateSpan),this.sliceEventStore=We(this._sliceEventStore),this.sliceEventDrag=We(this._sliceInteraction),this.sliceEventResize=We(this._sliceInteraction)}return e.prototype.sliceProps=function(e,t,n,r,i){for(var o=[],s=5;s<arguments.length;s++)o[s-5]=arguments[s];var a=e.eventUiBases,l=this.sliceEventStore.apply(this,[e.eventStore,a,t,n,i].concat(o));return{dateSelectionSegs:this.sliceDateSelection.apply(this,[e.dateSelection,a,i].concat(o)),businessHourSegs:this.sliceBusinessHours.apply(this,[e.businessHours,t,n,r,i].concat(o)),fgEventSegs:l.fg,bgEventSegs:l.bg,eventDrag:this.sliceEventDrag.apply(this,[e.eventDrag,a,t,n,i].concat(o)),eventResize:this.sliceEventResize.apply(this,[e.eventResize,a,t,n,i].concat(o)),eventSelection:e.eventSelection}},e.prototype.sliceNowDate=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return this._sliceDateSpan.apply(this,[{range:{start:e,end:z(e,1)},allDay:!1},{},t].concat(n))},e.prototype._sliceBusinessHours=function(e,t,n,r,i){for(var o=[],s=5;s<arguments.length;s++)o[s-5]=arguments[s];return e?this._sliceEventStore.apply(this,[_e(e,xr(t,Boolean(n)),r),{},t,n,i].concat(o)).bg:[]},e.prototype._sliceEventStore=function(e,t,n,r,i){for(var o=[],s=5;s<arguments.length;s++)o[s-5]=arguments[s];if(e){var a=at(e,t,xr(n,Boolean(r)),r);return{bg:this.sliceEventRanges(a.bg,i,o),fg:this.sliceEventRanges(a.fg,i,o)}}return{bg:[],fg:[]}},e.prototype._sliceInteraction=function(e,t,n,r,i){for(var o=[],s=5;s<arguments.length;s++)o[s-5]=arguments[s];if(!e)return null;var a=at(e.mutatedEvents,t,xr(n,Boolean(r)),r);return{segs:this.sliceEventRanges(a.fg,i,o),affectedInstances:e.affectedEvents.instances,isEvent:e.isEvent,sourceSeg:e.origSeg}},e.prototype._sliceDateSpan=function(e,t,n){for(var r=[],i=3;i<arguments.length;i++)r[i-3]=arguments[i];if(!e)return[];for(var o=$n(e,t,n.context.calendar),s=this.sliceRange.apply(this,[e.range].concat(r)),a=0,l=s;a<l.length;a++){var u=l[a];u.component=n,u.eventRange=o}return s},e.prototype.sliceEventRanges=function(e,t,n){for(var r=[],i=0,o=e;i<o.length;i++){var s=o[i];r.push.apply(r,this.sliceEventRange(s,t,n))}return r},e.prototype.sliceEventRange=function(e,t,n){for(var r=this.sliceRange.apply(this,[e.range].concat(n)),i=0,o=r;i<o.length;i++){var s=o[i];s.component=t,s.eventRange=e,s.isStart=e.isStart&&s.isStart,s.isEnd=e.isEnd&&s.isEnd}return r},e}();function xr(e,t){var n=e.activeRange;return t?n:{start:z(n.start,e.minTime.milliseconds),end:z(n.end,e.maxTime.milliseconds-864e5)}}var Pr=function(e,t){return(Pr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};
/*!
FullCalendar Day Grid Plugin v4.4.2
Docs & License: https://fullcalendar.io/
(c) 2019 Adam Shaw
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function Or(e,t){function n(){this.constructor=e}Pr(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Hr=function(){return(Hr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},Nr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Or(t,e),t.prototype.buildRenderRange=function(t,n,r){var i,o=this.dateEnv,s=e.prototype.buildRenderRange.call(this,t,n,r),a=s.start,l=s.end;(/^(year|month)$/.test(n)&&(a=o.startOfWeek(a),(i=o.startOfWeek(l)).valueOf()!==l.valueOf()&&(l=N(i,1))),this.options.monthMode&&this.options.fixedWeekCount)&&(l=N(l,6-Math.ceil(U(a,l)/7)));return{start:a,end:l}},t}(Fn),Lr=function(){function e(e){var t=this;this.isHidden=!0,this.margin=10,this.documentMousedown=function(e){t.el&&!t.el.contains(e.target)&&t.hide()},this.options=e}return e.prototype.show=function(){this.isHidden&&(this.el||this.render(),this.el.style.display="",this.position(),this.isHidden=!1,this.trigger("show"))},e.prototype.hide=function(){this.isHidden||(this.el.style.display="none",this.isHidden=!0,this.trigger("hide"))},e.prototype.render=function(){var e=this,t=this.options,n=this.el=a("div",{className:"fc-popover "+(t.className||""),style:{top:"0",left:"0"}});"function"==typeof t.content&&t.content(n),t.parentEl.appendChild(n),O(n,"click",".fc-close",(function(t){e.hide()})),t.autoHide&&document.addEventListener("mousedown",this.documentMousedown)},e.prototype.destroy=function(){this.hide(),this.el&&(v(this.el),this.el=null),document.removeEventListener("mousedown",this.documentMousedown)},e.prototype.position=function(){var e,t,n=this.options,r=this.el,i=r.getBoundingClientRect(),o=_(r.offsetParent),s=P(n.parentEl);e=n.top||0,t=void 0!==n.left?n.left:void 0!==n.right?n.right-i.width:0,e=Math.min(e,s.bottom-i.height-this.margin),e=Math.max(e,s.top+this.margin),t=Math.min(t,s.right-i.width-this.margin),t=Math.max(t,s.left+this.margin),T(r,{top:e-o.top,left:t-o.left})},e.prototype.trigger=function(e){this.options[e]&&this.options[e].apply(this,Array.prototype.slice.call(arguments,1))},e}(),zr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Or(t,e),t.prototype.renderSegHtml=function(e,t){var n,r,i=this.context,o=e.eventRange,s=o.def,a=o.ui,l=s.allDay,u=function(e,t,n){for(var r=e.calendar,i=e.view,o=r.pluginSystem.hooks.isDraggableTransformers,s=n.startEditable,a=0,l=o;a<l.length;a++){s=(0,l[a])(s,t,n,i)}return s}(i,s,a),c=l&&e.isStart&&function(e,t,n){return n.durationEditable&&e.options.eventResizableFromStart}(i,0,a),d=l&&e.isEnd&&function(e,t,n){return n.durationEditable}(0,0,a),p=this.getSegClasses(e,u,c||d,t),h=kt(this.getSkinCss(a)),f="";return p.unshift("fc-day-grid-event","fc-h-event"),e.isStart&&(n=this.getTimeText(o))&&(f='<span class="fc-time">'+Rt(n)+"</span>"),r='<span class="fc-title">'+(Rt(s.title||"")||"&nbsp;")+"</span>",'<a class="'+p.join(" ")+'"'+(s.url?' href="'+Rt(s.url)+'"':"")+(h?' style="'+h+'"':"")+'><div class="fc-content">'+("rtl"===i.options.dir?r+" "+f:f+" "+r)+"</div>"+(c?'<div class="fc-resizer fc-start-resizer"></div>':"")+(d?'<div class="fc-resizer fc-end-resizer"></div>':"")+"</a>"},t.prototype.computeEventTimeFormat=function(){return{hour:"numeric",minute:"2-digit",omitZeroMinute:!0,meridiem:"narrow"}},t.prototype.computeDisplayEventEnd=function(){return!1},t}(Tr),Ur=function(e){function t(t){var n=e.call(this)||this;return n.dayGrid=t,n}return Or(t,e),t.prototype.attachSegs=function(e,t){var n=this.rowStructs=this.renderSegRows(e);this.dayGrid.rowEls.forEach((function(e,t){e.querySelector(".fc-content-skeleton > table").appendChild(n[t].tbodyEl)})),t||this.dayGrid.removeSegPopover()},t.prototype.detachSegs=function(){for(var e,t=this.rowStructs||[];e=t.pop();)v(e.tbodyEl);this.rowStructs=null},t.prototype.renderSegRows=function(e){var t,n,r=[];for(t=this.groupSegRows(e),n=0;n<t.length;n++)r.push(this.renderSegRow(n,t[n]));return r},t.prototype.renderSegRow=function(e,t){var n,r,i,o,s,l,u,c=this.context.isRtl,h=this.dayGrid,f=h.colCnt,v=this.buildSegLevels(t),g=Math.max(1,v.length),y=document.createElement("tbody"),m=[],S=[],E=[];function b(e){for(;i<e;)(u=(E[n-1]||[])[i])?u.rowSpan=(u.rowSpan||1)+1:(u=document.createElement("td"),o.appendChild(u)),S[n][i]=u,E[n][i]=u,i++}for(n=0;n<g;n++){if(r=v[n],i=0,o=document.createElement("tr"),m.push([]),S.push([]),E.push([]),r)for(s=0;s<r.length;s++){l=r[s];var w=c?f-1-l.lastCol:l.firstCol,T=c?f-1-l.firstCol:l.lastCol;for(b(w),u=a("td",{className:"fc-event-container"},l.el),w!==T?u.colSpan=T-w+1:E[n][i]=u;i<=T;)S[n][i]=u,m[n][i]=l,i++;o.appendChild(u)}b(f);var D=h.renderProps.renderIntroHtml();D&&(c?d(o,D):p(o,D)),y.appendChild(o)}return{row:e,tbodyEl:y,cellMatrix:S,segMatrix:m,segLevels:v,segs:t}},t.prototype.buildSegLevels=function(e){var t,n,r,i=this.context.isRtl,o=this.dayGrid.colCnt,s=[];for(e=this.sortEventSegs(e),t=0;t<e.length;t++){for(n=e[t],r=0;r<s.length&&Br(n,s[r]);r++);n.level=r,n.leftCol=i?o-1-n.lastCol:n.firstCol,n.rightCol=i?o-1-n.firstCol:n.lastCol,(s[r]||(s[r]=[])).push(n)}for(r=0;r<s.length;r++)s[r].sort(Vr);return s},t.prototype.groupSegRows=function(e){var t,n=[];for(t=0;t<this.dayGrid.rowCnt;t++)n.push([]);for(t=0;t<e.length;t++)n[e[t].row].push(e[t]);return n},t.prototype.computeDisplayEventEnd=function(){return 1===this.dayGrid.colCnt},t}(zr);function Br(e,t){var n,r;for(n=0;n<t.length;n++)if((r=t[n]).firstCol<=e.lastCol&&r.lastCol>=e.firstCol)return!0;return!1}function Vr(e,t){return e.leftCol-t.leftCol}var Ar=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Or(t,e),t.prototype.attachSegs=function(e,t){var n=t.sourceSeg,r=this.rowStructs=this.renderSegRows(e);this.dayGrid.rowEls.forEach((function(e,t){var i,o,s=l('<div class="fc-mirror-skeleton"><table></table></div>');n&&n.row===t?i=n.el:(i=e.querySelector(".fc-content-skeleton tbody"))||(i=e.querySelector(".fc-content-skeleton table")),o=i.getBoundingClientRect().top-e.getBoundingClientRect().top,s.style.top=o+"px",s.querySelector("table").appendChild(r[t].tbodyEl),e.appendChild(s)}))},t}(Ur),Fr=function(e){function t(t){var n=e.call(this)||this;return n.fillSegTag="td",n.dayGrid=t,n}return Or(t,e),t.prototype.renderSegs=function(t,n,r){"bgEvent"===t&&(r=r.filter((function(e){return e.eventRange.def.allDay}))),e.prototype.renderSegs.call(this,t,n,r)},t.prototype.attachSegs=function(e,t){var n,r,i,o=[];for(n=0;n<t.length;n++)r=t[n],i=this.renderFillRow(e,r),this.dayGrid.rowEls[r.row].appendChild(i),o.push(i);return o},t.prototype.renderFillRow=function(e,t){var n,r,i=this.dayGrid,o=this.context.isRtl,s=i.colCnt,a=o?s-1-t.lastCol:t.firstCol,u=(o?s-1-t.firstCol:t.lastCol)+1;r=(n=l('<div class="fc-'+("businessHours"===e?"bgevent":e.toLowerCase())+'-skeleton"><table><tr></tr></table></div>')).getElementsByTagName("tr")[0],a>0&&d(r,new Array(a+1).join('<td style="pointer-events:none"></td>')),t.el.colSpan=u-a,r.appendChild(t.el),u<s&&d(r,new Array(s-u+1).join('<td style="pointer-events:none"></td>'));var c=i.renderProps.renderIntroHtml();return c&&(o?d(r,c):p(r,c)),n},t}(Cr),Wr=function(e){function t(t){var n=e.call(this,t)||this,r=n.eventRenderer=new jr(n),i=n.renderFrame=Wt(n._renderFrame);return n.renderFgEvents=Wt(r.renderSegs.bind(r),r.unrender.bind(r),[i]),n.renderEventSelection=Wt(r.selectByInstanceId.bind(r),r.unselectByInstanceId.bind(r),[n.renderFgEvents]),n.renderEventDrag=Wt(r.hideByHash.bind(r),r.showByHash.bind(r),[i]),n.renderEventResize=Wt(r.hideByHash.bind(r),r.showByHash.bind(r),[i]),n}return Or(t,e),t.prototype.firstContext=function(e){e.calendar.registerInteractiveComponent(this,{el:this.el,useEventCenter:!1})},t.prototype.render=function(e,t){this.renderFrame(e.date),this.renderFgEvents(t,e.fgSegs),this.renderEventSelection(e.eventSelection),this.renderEventDrag(e.eventDragInstances),this.renderEventResize(e.eventResizeInstances)},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.renderFrame.unrender(),this.context.calendar.unregisterInteractiveComponent(this)},t.prototype._renderFrame=function(e){var t=this.context,n=t.theme,r=t.dateEnv,i=t.options,o=r.format(e,tt(i.dayPopoverFormat));this.el.innerHTML='<div class="fc-header '+n.getClass("popoverHeader")+'"><span class="fc-title">'+Rt(o)+'</span><span class="fc-close '+n.getIconClass("close")+'"></span></div><div class="fc-body '+n.getClass("popoverContent")+'"><div class="fc-event-container"></div></div>',this.segContainerEl=this.el.querySelector(".fc-event-container")},t.prototype.queryHit=function(e,t,n,r){var i=this.props.date;if(e<n&&t<r)return{component:this,dateSpan:{allDay:!0,range:{start:i,end:L(i,1)}},dayEl:this.el,rect:{left:0,top:0,right:n,bottom:r},layer:1}},t}(sn),jr=function(e){function t(t){var n=e.call(this)||this;return n.dayTile=t,n}return Or(t,e),t.prototype.attachSegs=function(e){for(var t=0,n=e;t<n.length;t++){var r=n[t];this.dayTile.segContainerEl.appendChild(r.el)}},t.prototype.detachSegs=function(e){for(var t=0,n=e;t<n.length;t++){v(n[t].el)}},t}(zr),Gr=function(){function e(e){this.context=e}return e.prototype.renderHtml=function(e){var t=[];e.renderIntroHtml&&t.push(e.renderIntroHtml());for(var n=0,r=e.cells;n<r.length;n++){var i=r[n];t.push(Zr(i.date,e.dateProfile,this.context,i.htmlAttrs))}return e.cells.length||t.push('<td class="fc-day '+this.context.theme.getClass("widgetContent")+'"></td>'),"rtl"===this.context.options.dir&&t.reverse(),"<tr>"+t.join("")+"</tr>"},e}();function Zr(e,t,n,r){var i=n.dateEnv,o=n.theme,s=Ae(t.activeRange,e),a=Yt(e,t,n);return a.unshift("fc-day",o.getClass("widgetContent")),'<td class="'+a.join(" ")+'"'+(s?' data-date="'+i.formatIso(e,{omitTime:!0})+'"':"")+(r?" "+r:"")+"></td>"}var Yr=tt({day:"numeric"}),qr=tt({week:"numeric"}),Xr=function(e){function t(t,n){var r=e.call(this,t)||this;r.bottomCoordPadding=0,r.isCellSizesDirty=!1,r.renderProps=n;var i=r.eventRenderer=new Ur(r),o=r.fillRenderer=new Fr(r);r.mirrorRenderer=new Ar(r);var s=r.renderCells=Wt(r._renderCells,r._unrenderCells);return r.renderBusinessHours=Wt(o.renderSegs.bind(o,"businessHours"),o.unrender.bind(o,"businessHours"),[s]),r.renderDateSelection=Wt(o.renderSegs.bind(o,"highlight"),o.unrender.bind(o,"highlight"),[s]),r.renderBgEvents=Wt(o.renderSegs.bind(o,"bgEvent"),o.unrender.bind(o,"bgEvent"),[s]),r.renderFgEvents=Wt(i.renderSegs.bind(i),i.unrender.bind(i),[s]),r.renderEventSelection=Wt(i.selectByInstanceId.bind(i),i.unselectByInstanceId.bind(i),[r.renderFgEvents]),r.renderEventDrag=Wt(r._renderEventDrag,r._unrenderEventDrag,[s]),r.renderEventResize=Wt(r._renderEventResize,r._unrenderEventResize,[s]),r}return Or(t,e),t.prototype.render=function(e,t){var n=e.cells;this.rowCnt=n.length,this.colCnt=n[0].length,this.renderCells(n,e.isRigid),this.renderBusinessHours(t,e.businessHourSegs),this.renderDateSelection(t,e.dateSelectionSegs),this.renderBgEvents(t,e.bgEventSegs),this.renderFgEvents(t,e.fgEventSegs),this.renderEventSelection(e.eventSelection),this.renderEventDrag(e.eventDrag),this.renderEventResize(e.eventResize),this.segPopoverTile&&this.updateSegPopoverTile()},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.renderCells.unrender()},t.prototype.getCellRange=function(e,t){var n=this.props.cells[e][t].date;return{start:n,end:L(n,1)}},t.prototype.updateSegPopoverTile=function(e,t){var n=this.props;this.segPopoverTile.receiveProps({date:e||this.segPopoverTile.props.date,fgSegs:t||this.segPopoverTile.props.fgSegs,eventSelection:n.eventSelection,eventDragInstances:n.eventDrag?n.eventDrag.affectedInstances:null,eventResizeInstances:n.eventResize?n.eventResize.affectedInstances:null},this.context)},t.prototype._renderCells=function(e,t){var n,r,i=this.context,o=i.calendar,s=i.view,a=i.isRtl,l=i.dateEnv,u=this.rowCnt,c=this.colCnt,d="";for(n=0;n<u;n++)d+=this.renderDayRowHtml(n,t);for(this.el.innerHTML=d,this.rowEls=E(this.el,".fc-row"),this.cellEls=E(this.el,".fc-day, .fc-disabled-day"),a&&this.cellEls.reverse(),this.rowPositions=new Kt(this.el,this.rowEls,!1,!0),this.colPositions=new Kt(this.el,this.cellEls.slice(0,c),!0,!1),n=0;n<u;n++)for(r=0;r<c;r++)o.publiclyTrigger("dayRender",[{date:l.toDate(e[n][r].date),el:this.getCellEl(n,r),view:s}]);this.isCellSizesDirty=!0},t.prototype._unrenderCells=function(){this.removeSegPopover()},t.prototype.renderDayRowHtml=function(e,t){var n=this.context.theme,r=["fc-row","fc-week",n.getClass("dayRow")];t&&r.push("fc-rigid");var i=new Gr(this.context);return'<div class="'+r.join(" ")+'"><div class="fc-bg"><table class="'+n.getClass("tableGrid")+'">'+i.renderHtml({cells:this.props.cells[e],dateProfile:this.props.dateProfile,renderIntroHtml:this.renderProps.renderBgIntroHtml})+'</table></div><div class="fc-content-skeleton"><table>'+(this.getIsNumbersVisible()?"<thead>"+this.renderNumberTrHtml(e)+"</thead>":"")+"</table></div></div>"},t.prototype.getIsNumbersVisible=function(){return this.getIsDayNumbersVisible()||this.renderProps.cellWeekNumbersVisible||this.renderProps.colWeekNumbersVisible},t.prototype.getIsDayNumbersVisible=function(){return this.rowCnt>1},t.prototype.renderNumberTrHtml=function(e){var t=this.context.isRtl,n=this.renderProps.renderNumberIntroHtml(e,this);return"<tr>"+(t?"":n)+this.renderNumberCellsHtml(e)+(t?n:"")+"</tr>"},t.prototype.renderNumberCellsHtml=function(e){var t,n,r=[];for(t=0;t<this.colCnt;t++)n=this.props.cells[e][t].date,r.push(this.renderNumberCellHtml(n));return this.context.isRtl&&r.reverse(),r.join("")},t.prototype.renderNumberCellHtml=function(e){var t,n,r=this.context,i=r.dateEnv,o=r.options,s="",a=Ae(this.props.dateProfile.activeRange,e),l=this.getIsDayNumbersVisible()&&a;return l||this.renderProps.cellWeekNumbersVisible?((t=Yt(e,this.props.dateProfile,this.context)).unshift("fc-day-top"),this.renderProps.cellWeekNumbersVisible&&(n=i.weekDow),s+='<td class="'+t.join(" ")+'"'+(a?' data-date="'+i.formatIso(e,{omitTime:!0})+'"':"")+">",this.renderProps.cellWeekNumbersVisible&&e.getUTCDay()===n&&(s+=Zt(o,i,{date:e,type:"week"},{class:"fc-week-number"},i.format(e,qr))),l&&(s+=Zt(o,i,e,{class:"fc-day-number"},i.format(e,Yr))),s+="</td>"):"<td></td>"},t.prototype.updateSize=function(e){var t=this.context.calendar,n=this.fillRenderer,r=this.eventRenderer,i=this.mirrorRenderer;(e||this.isCellSizesDirty||t.isEventsUpdated)&&(this.buildPositionCaches(),this.isCellSizesDirty=!1),n.computeSizes(e),r.computeSizes(e),i.computeSizes(e),n.assignSizes(e),r.assignSizes(e),i.assignSizes(e)},t.prototype.buildPositionCaches=function(){this.buildColPositions(),this.buildRowPositions()},t.prototype.buildColPositions=function(){this.colPositions.build()},t.prototype.buildRowPositions=function(){this.rowPositions.build(),this.rowPositions.bottoms[this.rowCnt-1]+=this.bottomCoordPadding},t.prototype.positionToHit=function(e,t){var n=this.colPositions,r=this.rowPositions,i=n.leftToIndex(e),o=r.topToIndex(t);if(null!=o&&null!=i)return{row:o,col:i,dateSpan:{range:this.getCellRange(o,i),allDay:!0},dayEl:this.getCellEl(o,i),relativeRect:{left:n.lefts[i],right:n.rights[i],top:r.tops[o],bottom:r.bottoms[o]}}},t.prototype.getCellEl=function(e,t){return this.cellEls[e*this.colCnt+t]},t.prototype._renderEventDrag=function(e){e&&(this.eventRenderer.hideByHash(e.affectedInstances),this.fillRenderer.renderSegs("highlight",this.context,e.segs))},t.prototype._unrenderEventDrag=function(e){e&&(this.eventRenderer.showByHash(e.affectedInstances),this.fillRenderer.unrender("highlight",this.context))},t.prototype._renderEventResize=function(e){e&&(this.eventRenderer.hideByHash(e.affectedInstances),this.fillRenderer.renderSegs("highlight",this.context,e.segs),this.mirrorRenderer.renderSegs(this.context,e.segs,{isResizing:!0,sourceSeg:e.sourceSeg}))},t.prototype._unrenderEventResize=function(e){e&&(this.eventRenderer.showByHash(e.affectedInstances),this.fillRenderer.unrender("highlight",this.context),this.mirrorRenderer.unrender(this.context,e.segs,{isResizing:!0,sourceSeg:e.sourceSeg}))},t.prototype.removeSegPopover=function(){this.segPopover&&this.segPopover.hide()},t.prototype.limitRows=function(e){var t,n,r=this.eventRenderer.rowStructs||[];for(t=0;t<r.length;t++)this.unlimitRow(t),!1!==(n=!!e&&("number"==typeof e?e:this.computeRowLevelLimit(t)))&&this.limitRow(t,n)},t.prototype.computeRowLevelLimit=function(e){var t,n,r=this.rowEls[e].getBoundingClientRect().bottom,i=b(this.eventRenderer.rowStructs[e].tbodyEl);for(t=0;t<i.length;t++)if((n=i[t]).classList.remove("fc-limited"),n.getBoundingClientRect().bottom>r)return t;return!1},t.prototype.limitRow=function(e,t){var n,r,i,o,s,l,u,c,d,p,f,v,g,y,m,S=this,E=this.colCnt,w=this.context.isRtl,T=this.eventRenderer.rowStructs[e],D=[],C=0,R=function(n){for(;C<n;)(l=S.getCellSegs(e,C,t)).length&&(d=r[t-1][C],m=S.renderMoreLink(e,C,l),y=a("div",null,m),d.appendChild(y),D.push(y)),C++};if(t&&t<T.segLevels.length){for(n=T.segLevels[t-1],r=T.cellMatrix,(i=b(T.tbodyEl).slice(t)).forEach((function(e){e.classList.add("fc-limited")})),o=0;o<n.length;o++){s=n[o];var k=w?E-1-s.lastCol:s.firstCol,I=w?E-1-s.firstCol:s.lastCol;for(R(k),c=[],u=0;C<=I;)l=this.getCellSegs(e,C,t),c.push(l),u+=l.length,C++;if(u){for(p=(d=r[t-1][k]).rowSpan||1,f=[],v=0;v<c.length;v++)g=a("td",{className:"fc-more-cell",rowSpan:p}),l=c[v],m=this.renderMoreLink(e,k+v,[s].concat(l)),y=a("div",null,m),g.appendChild(y),f.push(g),D.push(g);d.classList.add("fc-limited"),h(d,f),i.push(d)}}R(this.colCnt),T.moreEls=D,T.limitedEls=i}},t.prototype.unlimitRow=function(e){var t=this.eventRenderer.rowStructs[e];t.moreEls&&(t.moreEls.forEach(v),t.moreEls=null),t.limitedEls&&(t.limitedEls.forEach((function(e){e.classList.remove("fc-limited")})),t.limitedEls=null)},t.prototype.renderMoreLink=function(e,t,n){var r=this,i=this.context,o=i.calendar,s=i.view,l=i.dateEnv,u=i.options,c=i.isRtl,d=a("a",{className:"fc-more"});return d.innerText=this.getMoreLinkText(n.length),d.addEventListener("click",(function(i){var a=u.eventLimitClick,d=c?r.colCnt-t-1:t,p=r.props.cells[e][d].date,h=i.currentTarget,f=r.getCellEl(e,t),v=r.getCellSegs(e,t),g=r.resliceDaySegs(v,p),y=r.resliceDaySegs(n,p);"function"==typeof a&&(a=o.publiclyTrigger("eventLimitClick",[{date:l.toDate(p),allDay:!0,dayEl:f,moreEl:h,segs:g,hiddenSegs:y,jsEvent:i,view:s}])),"popover"===a?r.showSegPopover(e,t,h,g):"string"==typeof a&&o.zoomTo(p,a)})),d},t.prototype.showSegPopover=function(e,t,n,r){var i,o,s=this,a=this.context,l=a.calendar,u=a.view,c=a.theme,d=a.isRtl,p=d?this.colCnt-t-1:t,h=n.parentNode;i=1===this.rowCnt?u.el:this.rowEls[e],o={className:"fc-more-popover "+c.getClass("popover"),parentEl:u.el,top:_(i).top,autoHide:!0,content:function(t){s.segPopoverTile=new Wr(t),s.updateSegPopoverTile(s.props.cells[e][p].date,r)},hide:function(){s.segPopoverTile.destroy(),s.segPopoverTile=null,s.segPopover.destroy(),s.segPopover=null}},d?o.right=_(h).right+1:o.left=_(h).left-1,this.segPopover=new Lr(o),this.segPopover.show(),l.releaseAfterSizingTriggers()},t.prototype.resliceDaySegs=function(e,t){for(var n={start:t,end:L(t,1)},r=[],i=0,o=e;i<o.length;i++){var s=o[i],a=s.eventRange,l=a.range,u=ze(l,n);u&&r.push(Hr({},s,{eventRange:{def:a.def,ui:Hr({},a.ui,{durationEditable:!1}),instance:a.instance,range:u},isStart:s.isStart&&u.start.valueOf()===l.start.valueOf(),isEnd:s.isEnd&&u.end.valueOf()===l.end.valueOf()}))}return r},t.prototype.getMoreLinkText=function(e){var t=this.context.options.eventLimitText;return"function"==typeof t?t(e):"+"+e+" "+t},t.prototype.getCellSegs=function(e,t,n){for(var r,i=this.eventRenderer.rowStructs[e].segMatrix,o=n||0,s=[];o<i.length;)(r=i[o][t])&&s.push(r),o++;return s},t}(sn),Jr=tt({week:"numeric"}),Kr=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.processOptions=We(t._processOptions),t.renderSkeleton=Wt(t._renderSkeleton,t._unrenderSkeleton),t.renderHeadIntroHtml=function(){var e=t.context,n=e.theme,r=e.options;return t.colWeekNumbersVisible?'<th class="fc-week-number '+n.getClass("widgetHeader")+'" '+t.weekNumberStyleAttr()+"><span>"+Rt(r.weekLabel)+"</span></th>":""},t.renderDayGridNumberIntroHtml=function(e,n){var r=t.context,i=r.options,o=r.dateEnv,s=n.props.cells[e][0].date;return t.colWeekNumbersVisible?'<td class="fc-week-number" '+t.weekNumberStyleAttr()+">"+Zt(i,o,{date:s,type:"week",forceOff:1===n.colCnt},o.format(s,Jr))+"</td>":""},t.renderDayGridBgIntroHtml=function(){var e=t.context.theme;return t.colWeekNumbersVisible?'<td class="fc-week-number '+e.getClass("widgetContent")+'" '+t.weekNumberStyleAttr()+"></td>":""},t.renderDayGridIntroHtml=function(){return t.colWeekNumbersVisible?'<td class="fc-week-number" '+t.weekNumberStyleAttr()+"></td>":""},t}return Or(t,e),t.prototype._processOptions=function(e){e.weekNumbers?e.weekNumbersWithinDays?(this.cellWeekNumbersVisible=!0,this.colWeekNumbersVisible=!1):(this.cellWeekNumbersVisible=!1,this.colWeekNumbersVisible=!0):(this.colWeekNumbersVisible=!1,this.cellWeekNumbersVisible=!1)},t.prototype.render=function(t,n){e.prototype.render.call(this,t,n),this.processOptions(n.options),this.renderSkeleton(n)},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.renderSkeleton.unrender()},t.prototype._renderSkeleton=function(e){this.el.classList.add("fc-dayGrid-view"),this.el.innerHTML=this.renderSkeletonHtml(),this.scroller=new en("hidden","auto");var t=this.scroller.el;this.el.querySelector(".fc-body > tr > td").appendChild(t),t.classList.add("fc-day-grid-container");var n=a("div",{className:"fc-day-grid"});t.appendChild(n),this.dayGrid=new Xr(n,{renderNumberIntroHtml:this.renderDayGridNumberIntroHtml,renderBgIntroHtml:this.renderDayGridBgIntroHtml,renderIntroHtml:this.renderDayGridIntroHtml,colWeekNumbersVisible:this.colWeekNumbersVisible,cellWeekNumbersVisible:this.cellWeekNumbersVisible})},t.prototype._unrenderSkeleton=function(){this.el.classList.remove("fc-dayGrid-view"),this.dayGrid.destroy(),this.scroller.destroy()},t.prototype.renderSkeletonHtml=function(){var e=this.context,t=e.theme,n=e.options;return'<table class="'+t.getClass("tableGrid")+'">'+(n.columnHeader?'<thead class="fc-head"><tr><td class="fc-head-container '+t.getClass("widgetHeader")+'">&nbsp;</td></tr></thead>':"")+'<tbody class="fc-body"><tr><td class="'+t.getClass("widgetContent")+'"></td></tr></tbody></table>'},t.prototype.weekNumberStyleAttr=function(){return null!=this.weekNumberWidth?'style="width:'+this.weekNumberWidth+'px"':""},t.prototype.hasRigidRows=function(){var e=this.context.options.eventLimit;return e&&"number"!=typeof e},t.prototype.updateSize=function(t,n,r){e.prototype.updateSize.call(this,t,n,r),this.dayGrid.updateSize(t)},t.prototype.updateBaseSize=function(e,t,n){var r,i,o,s,a=this.dayGrid,l=this.context.options.eventLimit,u=this.header?this.header.el:null;a.rowEls?(this.colWeekNumbersVisible&&(this.weekNumberWidth=(o=E(this.el,".fc-week-number"),s=0,o.forEach((function(e){var t=e.firstChild;if(t instanceof HTMLElement){var n=t.getBoundingClientRect().width;n>s&&(s=n)}})),s++,o.forEach((function(e){e.style.width=s+"px"})),s)),this.scroller.clear(),u&&T(u,{marginLeft:"",marginRight:"",borderLeftWidth:"",borderRightWidth:""}),a.removeSegPopover(),l&&"number"==typeof l&&a.limitRows(l),r=this.computeScrollerHeight(t),this.setGridHeight(r,n),l&&"number"!=typeof l&&a.limitRows(l),n||(this.scroller.setHeight(r),((i=this.scroller.getScrollbarWidths()).left||i.right)&&(u&&function(e,t){t.left&&T(e,{borderLeftWidth:1,marginLeft:t.left-1}),t.right&&T(e,{borderRightWidth:1,marginRight:t.right-1})}(u,i),r=this.computeScrollerHeight(t),this.scroller.setHeight(r)),this.scroller.lockOverflow(i))):n||(r=this.computeScrollerHeight(t),this.scroller.setHeight(r))},t.prototype.computeScrollerHeight=function(e){return e-function(e,t){var n={position:"relative",left:-1};T(e,n),T(t,n);var r=e.getBoundingClientRect().height-t.getBoundingClientRect().height,i={position:"",left:""};return T(e,i),T(t,i),r}(this.el,this.scroller.el)},t.prototype.setGridHeight=function(e,t){this.context.options.monthMode?(t&&(e*=this.dayGrid.rowCnt/6),re(this.dayGrid.rowEls,e,!t)):t?ie(this.dayGrid.rowEls):re(this.dayGrid.rowEls,e,!0)},t.prototype.computeDateScroll=function(e){return{top:0}},t.prototype.queryDateScroll=function(){return{top:this.scroller.getScrollTop()}},t.prototype.applyDateScroll=function(e){void 0!==e.top&&this.scroller.setScrollTop(e.top)},t}(wr);Kr.prototype.dateProfileGeneratorClass=Nr;var $r=function(e){function t(t){var n=e.call(this,t.el)||this;return n.slicer=new Qr,n.dayGrid=t,n}return Or(t,e),t.prototype.firstContext=function(e){e.calendar.registerInteractiveComponent(this,{el:this.dayGrid.el})},t.prototype.destroy=function(){e.prototype.destroy.call(this),this.context.calendar.unregisterInteractiveComponent(this)},t.prototype.render=function(e,t){var n=this.dayGrid,r=e.dateProfile,i=e.dayTable;n.receiveContext(t),n.receiveProps(Hr({},this.slicer.sliceProps(e,r,e.nextDayThreshold,t.calendar,n,i),{dateProfile:r,cells:i.cells,isRigid:e.isRigid}),t)},t.prototype.buildPositionCaches=function(){this.dayGrid.buildPositionCaches()},t.prototype.queryHit=function(e,t){var n=this.dayGrid.positionToHit(e,t);if(n)return{component:this.dayGrid,dateSpan:n.dateSpan,dayEl:n.dayEl,rect:{left:n.relativeRect.left,right:n.relativeRect.right,top:n.relativeRect.top,bottom:n.relativeRect.bottom},layer:0}},t}(sn),Qr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Or(t,e),t.prototype.sliceRange=function(e,t){return t.sliceRange(e)},t}(Mr);function ei(e,t){var n=new Ir(e.renderRange,t);return new _r(n,/year|month|week/.test(e.currentRangeUnit))}var ti=ln({defaultView:"dayGridMonth",views:{dayGrid:function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.buildDayTable=We(ei),t}return Or(t,e),t.prototype.render=function(t,n){e.prototype.render.call(this,t,n);var r=this.props.dateProfile,i=this.dayTable=this.buildDayTable(r,t.dateProfileGenerator);this.header&&this.header.receiveProps({dateProfile:r,dates:i.headerDates,datesRepDistinctDays:1===i.rowCnt,renderIntroHtml:this.renderHeadIntroHtml},n),this.simpleDayGrid.receiveProps({dateProfile:r,dayTable:i,businessHours:t.businessHours,dateSelection:t.dateSelection,eventStore:t.eventStore,eventUiBases:t.eventUiBases,eventSelection:t.eventSelection,eventDrag:t.eventDrag,eventResize:t.eventResize,isRigid:this.hasRigidRows(),nextDayThreshold:this.context.nextDayThreshold},n)},t.prototype._renderSkeleton=function(t){e.prototype._renderSkeleton.call(this,t),t.options.columnHeader&&(this.header=new kr(this.el.querySelector(".fc-head-container"))),this.simpleDayGrid=new $r(this.dayGrid)},t.prototype._unrenderSkeleton=function(){e.prototype._unrenderSkeleton.call(this),this.header&&this.header.destroy(),this.simpleDayGrid.destroy()},t}(Kr),dayGridDay:{type:"dayGrid",duration:{days:1}},dayGridWeek:{type:"dayGrid",duration:{weeks:1}},dayGridMonth:{type:"dayGrid",duration:{months:1},monthMode:!0,fixedWeekCount:!0}}});class ni extends r.a{_init(){this._initScheduleComponent()}_initScheduleComponent(){document.addEventListener("DOMContentLoaded",()=>{let e=document.querySelector(".calendar");new vr(e,{plugins:[ti]}).render()})}}new ni},4:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(11),n(7);class r{addToken(e,t){let n=`${e} ${t}`;window.localStorage.setItem("msaloonwbtoken",n)}storeItem(e,t){window.localStorage.setItem(e,t)}cleanToken(){window.localStorage.setItem("msaloonwbtoken",null)}get token(){return window.localStorage.getItem("msaloonwbtoken")}getStoredItem(e){return window.localStorage.getItem(e)}post(e,t){let n=this._buildTransactionDetails("POST",t);return this._buildFetchTransaction(e,n)}get(e){let t=this._buildTransactionDetails("GET",null);return this._buildFetchTransaction(e,t)}put(e,t){let n=this._buildTransactionDetails("PUT",t);return this._buildFetchTransaction(e,n)}delete(e){let t=this._buildTransactionDetails("DELETE",null);return fetch(e,t).then(e=>{if(e.ok)return!0;throw new Error("A transactional error has been happened.")})}_buildTransactionHeaders(){return new Headers({"Content-type":"Application/json",Authorization:this.token})}_buildTransactionDetails(e,t){return{method:e,body:t,headers:this._buildTransactionHeaders()}}_buildFetchTransaction(e,t){return fetch(e,t).then(e=>{if(e.ok)return e.json().then(e=>e).catch(e=>!0);throw new Error("A transactional error has been happened.")})}}},7:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4);class i{constructor(){this._serverURL="http://localhost:8080/auth",this._webtoken="msaloonwbtoken",this._http=new r.a}hasValidToken(){return this._http.get(this._serverURL)}authenticate(e){let t={method:"POST",body:JSON.stringify(e),headers:{"Content-type":"Application/json"}};return fetch(this._serverURL,t).then(e=>{if(e.ok&&200==e.status)return e.json();throw new Error("The signin data is not correct")}).then(e=>{this._http.addToken(e.type,e.token)})}logout(){this._http.cleanToken()}redirectToLoginPage(){window.location.href="/login.html"}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,