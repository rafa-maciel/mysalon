!function(e){var t={};function n(s){if(t[s])return t[s].exports;var o=t[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(s,o,function(t){return e[t]}.bind(null,o));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=37)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(1);class o{constructor(e,t={}){this._component=s.a.parse(this._base(t)),this._tag="#"+t.id,this._parentSelector=e,this._info=t,this._init(),document.querySelector(this._parentSelector).appendChild(this._component)}_init(){this._initListeners(this._info.listeners)}_initListeners(e){e&&e.forEach(e=>{this._component.addEventListener(e.type,e.action)})}_base(e){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{static parse(e){return(new DOMParser).parseFromString(e,"text/html").documentElement.querySelector("body").firstChild}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t){this._type=e,this._action=t}get type(){return this._type}get action(){return this._action}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t,n="submit",...s){let o=document.createElement("button");return o.classList=t,o.setAttribute("type",n),o.innerHTML=e,s&&s.forEach(e=>o.addEventListener(e.type,e.action)),o}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));n(11),n(7);class s{addToken(e,t){let n=`${e} ${t}`;window.localStorage.setItem("msaloonwbtoken",n)}storeItem(e,t){window.localStorage.setItem(e,t)}cleanToken(){window.localStorage.setItem("msaloonwbtoken",null)}get token(){return window.localStorage.getItem("msaloonwbtoken")}getStoredItem(e){return window.localStorage.getItem(e)}post(e,t){let n=this._buildTransactionDetails("POST",t);return this._buildFetchTransaction(e,n)}get(e){let t=this._buildTransactionDetails("GET",null);return this._buildFetchTransaction(e,t)}put(e,t){let n=this._buildTransactionDetails("PUT",t);return this._buildFetchTransaction(e,n)}delete(e){let t=this._buildTransactionDetails("DELETE",null);return fetch(e,t).then(e=>{if(e.ok)return!0;throw new Error("A transactional error has been happened.")})}_buildTransactionHeaders(){return new Headers({"Content-type":"Application/json",Authorization:this.token})}_buildTransactionDetails(e,t){return{method:e,body:t,headers:this._buildTransactionHeaders()}}_buildFetchTransaction(e,t){return fetch(e,t).then(e=>{if(e.ok)return e.json().then(e=>e).catch(e=>!0);throw new Error("A transactional error has been happened.")})}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(0);class o extends s.a{updateFields(){document.querySelector(this._tag+" .fields").innerHTML="",document.querySelector(this._tag+" .fields").appendChild(this._template())}submit(){document.querySelector(this._tag).submit()}reset(){document.querySelector(this._tag).reset()}getData(){let e=[];return $(this._tag).serializeArray().forEach(t=>{e[t.name]=t.value}),e}getDataAsParams(){return $(this._tag).serialize()}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".fields").appendChild(this._info.initialContent),this._info.buttons&&this._info.initialButtons&&this._info.initialButtons.forEach(e=>this._component.querySelector(".buttons").appendChild(e))}_base(e){return`\n        <form id=${e.id} ${e.formClass?`class='${e.formClass}'`:""}>\n           <div class='fields'></div>\n           <div class='buttons'>\n                ${e.defaultButtons?'\n                <button type="submit" class="btn btn-primary">Salvar</button>\n                <button type="reset" class="btn btn-secondary">Limpar</button>\n                ':""}\n           </div>\n        </form>\n        `}_template(){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));n(1);var s=n(0);class o extends s.a{show(){$(this._tag).modal("show")}hide(){$(this._tag).modal("hide")}updateContent(e){document.querySelector(this._tag+" .modal-body").innerHTML="",document.querySelector(this._tag+" .modal-body").appendChild(e)}cleanContent(){document.querySelector(this._tag+" .modal-body").innerHTML=""}updateContentText(e){document.querySelector(this._tag+" .modal-body").innerHTML="<pre>"+e+"</pre>"}updateFooter(e){document.querySelector(this._tag+" .modal-footer").innerHTML="",document.querySelector(this._tag+" .modal-footer").appendChild(e)}cleanFooter(){document.querySelector(this._tag+" .modal-footer").innerHTML=""}get contentSelector(){return this._tag+" .modal-body"}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".modal-body").appendChild(this._info.initialContent),this._info.footer&&this._info.initialFooter&&this._component.querySelector(".modal-footer").appendChild(this._info.initialFooter)}_initListeners(e){e&&e.forEach(e=>{$(this._component).on(e.type,e.action)})}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="${e.label?e.label:"myLargeModal"}" aria-hidden="true">\n            <div class="modal-dialog ${e.modalClass?e.modalClass:""}" role="document">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title">${e.title}</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                            <span aria-hidden="true">&times;</span>\n                        </button>\n                    </div>\n            \n                    <div class="modal-body">\n                    </div>\n\n                    ${e.footer?'\n                    <div class="modal-footer">\n                        \n                    </div>\n                    ':""}\n                </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(4);class o{constructor(){this._serverURL="http://localhost:8080/auth",this._webtoken="msaloonwbtoken",this._http=new s.a}hasValidToken(){return this._http.get(this._serverURL)}authenticate(e){let t={method:"POST",body:JSON.stringify(e),headers:{"Content-type":"Application/json"}};return fetch(this._serverURL,t).then(e=>{if(e.ok&&200==e.status)return e.json();throw new Error("The signin data is not correct")}).then(e=>{this._http.addToken(e.type,e.token)})}logout(){this._http.cleanToken()}redirectToLoginPage(){window.location.href="/login.html"}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{equals(e){throw new Error("The equals method must be implemented")}equalsFor(e){throw new Error("The equalsFor method must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{static create(e,t,n){return new Proxy(e,{get:(e,o,i)=>t.includes(o)&&s._isFuntion(e[o])?function(){let t=Reflect.apply(e[o],e,arguments);return n(e),t}:Reflect.get(e,o,i),set(e,s,o,i){let a=Reflect.set(e,s,o,i);return t.includes(s)&&n(e),a}})}static _isFuntion(e){return typeof e==typeof Function}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var s=n(0);class o extends s.a{constructor(e){super(e)}_base(e){return'\n        <nav class="sidebar">\n          <div class="sidebar-sticky">\n            <ul class="nav flex-column">\n              <li class="nav-item">\n                <a class="nav-link active" href="./schedule.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>\n                  Dashboard <span class="sr-only">(current)</span>\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./customers.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>\n                  Clientes\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./professionals.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Profissionais\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./vendors.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Fornecedores\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./purchases.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Compras\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./appointments.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Atendimentos (Consultas)\n                </a>\n              </li>\n            </ul>\n    \n            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">\n              <span>Minha Conta</span>\n            </h6>\n            <ul class="nav flex-column mb-2">\n              <li class="nav-item">\n                <a class="nav-link" href="./profile.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>\n                  Meu Perfil\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        '}}class i extends s.a{constructor(e,t){super(e),this._initHeaderNavigation(t)}_initHeaderNavigation(e){this._component.querySelector("a.logout").addEventListener(e.type,e.action)}_base(e){return'\n        <nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">\n            <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">My Saloon Web</a>\n            <input class="form-control form-control-dark w-100" type="text" placeholder="Pesquisar" aria-label="Pesquisar">\n            <ul class="navbar-nav px-3">\n                <li class="nav-item text-nowrap">\n                <a class="nav-link logout" href="#">Logoff</a>\n                </li>\n            </ul>\n        </nav>\n        '}}var a=n(2),r=n(7),l=n(1);class d extends s.a{constructor(){super("#headerNavigation"),this._initLoaderComponent()}start(){this._component.appendChild(this._loaderComponent),this._component.classList.add("pre-loader-running")}stop(){this._component.innerHTML="",this._component.classList.remove("pre-loader-running")}run(e){this.start(),e.then(()=>{this.stop()})}_initLoaderComponent(){this._loaderComponent=l.a.parse('\n        <div class="loader-panel">\n            <div id="loader4">\n                <span class="loader loader-1"></span>\n                <span class="loader loader-2"></span>\n                <span class="loader loader-3"></span>\n                <span class="loader loader-4"></span>\n            </div>\n        </div>\n        ')}_base(){return'\n        <div class="row" id="preLoader">\n            \n        </div>\n        '}}class c{constructor(){this._preLoader=new d,this._authService=new r.a,this._validAuthenticatedClient(),this._headerNav=new i("#headerNavigation",new a.a("click",e=>{this.doLogoff()})),this._dashboardNav=new o("#dashboardNavigation"),this._init()}doLogoff(){this._authService.logout(),this._authService.redirectToLoginPage()}_init(){throw new Error("the _init() method must be implemented")}_validAuthenticatedClient(){this._authService.hasValidToken().catch(()=>{this._authService.redirectToLoginPage()})}}},function(e,t,n){"use strict"},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(8);class o extends s.a{constructor(e,t,n,s,o,i=""){super(),this._name=e,this._residencialPhone=t,this._cellphone=n,this._departament=s,this._id=i,this._email=o}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get name(){return this._name}get residencialPhone(){return this._residencialPhone}get cellphone(){return this._cellphone}get departament(){return this._departament}get email(){return this._email}get id(){return this._id}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(9);class o{constructor(e,t,...n){let o=s.a.create(e,n,e=>t.update(e));return t.update(e),o}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(){this._title="",this._message="",this._type="primary"}update(e,t="",n="primary"){this._title=t,this._message=e,this._type=n}get title(){return this._title}get message(){return this._message}get type(){return this._type}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s extends class{constructor(e){this._element=e}_template(e){throw new Error("Template method must be implemented")}update(e){this._element.innerHTML=this._template(e)}}{_template(e){return`\n        <div class="alert alert-${e.type} alert-dismissible fade show" role="alert">\n            <h4 class="alert-heading">${e.title}</h4>\n            <p class='text-muted'>${e.message}</p>\n            <button type="button" class="close" data-dismiss="alert" aria-label="Close">\n                <span aria-hidden="true">&times;</span>\n            </button>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(12),o=(n(11),n(4));class i{constructor(){this._serverURL="http://localhost:8080/professionals",this._http=new o.a}getAllProfessionals(){let e=this._serverURL;return this._http.get(e).then(e=>e.map(e=>this._getProfessionalFromData(e)))}getProfessionalByID(e){let t=`${this._serverURL}/${e}`;return this._http.get(t).then(e=>this._getProfessionalFromData(e)).catch(e=>{throw console.log(e),new Error("Ocorreu um error na comunição com o servidor e não foi possivel encontrar o profissional solicitado")})}createProfessional(e){let t=this._serverURL;return this._http.post(t,JSON.stringify(e)).then(e=>this._getProfessionalFromData(e))}updateProfessional(e){let t=`${this._serverURL}/${e.id}`;return this._http.put(t,JSON.stringify(e)).then(e=>this._getProfessionalFromData(e))}deteleProfessional(e){let t=`${this._serverURL}/${e}`;return this._http.delete(t)}getProfessionalByEmail(e){let t=`${this._serverURL}/email/${e}`;return this._http.get(t).then(e=>this._getProfessionalFromData(e))}restorePassword(e){return this._http.post("http://localhost:8080/accounts/restore",JSON.stringify({email:e}))}resetPassword(e){return this._http.post("http://localhost:8080/accounts/reset",JSON.stringify({password:e}))}_getProfessionalFromData(e){return new s.a(e.name,e.residencialPhone,e.cellphone,e.department,e.email,e.id)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(){this._list=[],this._pageableInfo=void 0}clean(){this._list=[],this._pageableInfo=void 0}add(e){this._list.some(t=>t.equals(e))?this._list.forEach((t,n)=>{t.equals(e)&&(this._list[n]=e)}):this._list.push(e)}find(e){return this._list.find(t=>t.equalsFor(e))}updatePageableInfo(e){this._pageableInfo=e}remove(e){this._list.forEach((t,n)=>{t.equalsFor(e)&&this._list.splice(n,1)})}get list(){return this._list}get pageableInfo(){return this._pageableInfo}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(0);class o extends s.a{_updateList(e){let t=document.querySelector(this._tag+" tbody");t.innerHTML="",e.forEach(e=>t.appendChild(e))}_appendItem(e){document.querySelector(this._tag+" tbody").appendChild(e)}_cleanTable(){document.querySelector(this._tag+" tbody").innerHTML=""}_removeLine(e){document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`).remove()}_updateLine(e,t){let n=document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`);n.parentNode.replaceChild(t,n)}_createTableLine(e,t,...n){let s=document.createElement("tr");if(s.setAttribute("data-key",e),t.forEach(e=>{let t=document.createElement("td");t.innerHTML=e,s.appendChild(t)}),n){let e=document.createElement("td");n.forEach(t=>e.appendChild(t)),s.appendChild(e)}return s}_base(e){return`\n        <table class="table table-hover" id=${e.id}>\n            <thead>\n                <tr>\n                    ${e.headers.map(e=>`\n                        <th scope="col">${e}</th>\n                    `).join("")}\n                </tr>\n            </thead>\n            <tbody>\n                ${e.initialContent?initialContent:""}\n            </tbody>\n        </table>\n        `}}class i extends o{updateFromModel(e){this._cleanTable(),e.list.forEach(e=>this._appendItem(this._createLineTableFromModel(e)))}_createLineTableFromModel(e){throw new Error("_createLineTableFromModel must been implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(6);class o extends s.a{constructor(e,t,n){super(e,t),this._removeAction=n}_init(){super._init(),this._component.querySelector(this._tag+" form").addEventListener("submit",e=>{e.preventDefault();let t=document.querySelector(this._tag+' form input[name="key"]').value;this._removeAction(t)})}update(e,t){document.querySelector(this._tag+" .modal-body .alert").innerHTML=e,document.querySelector(this._tag+' form input[name="key"]').value=t}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog">\n            <div class="modal-dialog modal-sm" role="document">\n            <div class="modal-content">\n                <div class="modal-header">\n                <h5 class="modal-title">${e.title}</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n                </div>\n                <div class="modal-body">\n                <div class="alert alert-danger" role="alert">\n                    ${e.message}\n                </div>\n                <p class="text-muted">Essa ação não poderá ser desfeita</p>\n                <form>\n                    <input type="hidden" name="key">\n                    <button class="btn btn-danger btn-sm btn-block" type="submit">${e.buttonLabel}</button>\n                </form>\n                </div>\n            </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(9);class o{constructor(e,t,...n){let o=s.a.create(e,n,e=>t.updateFromModel(e));return t.updateFromModel(e),o}}},,,,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var s=n(5);class o{constructor(e,t,n,s,o,i=""){this.name=e,this.residencialPhone=t,this.cellphone=n,this.department=s,this.email=o,this.id=i}}var i=n(1),a=n(12);class r extends s.a{constructor(e,t=!1,...n){super(e,{id:"professionalForm",defaultButtons:t,listeners:n}),this._professional=new a.a,this.updateFields()}set professional(e){this._professional=e,this.updateFields()}get professional(){let e=this.getData();return new o(e.name,e.residencialPhone,e.cellphone,e.departament,e.email,e.id)}_template(){let e=`\n            <div>\n                <input type="hidden" class="form-control" name="id" value="${this._professional.id?this._professional.id:""}">\n                <div class="form-group">\n                    <label for="name">Nome</label>\n                    <input type="text" min="3" max="20" class="form-control" id="name" name="name" \n                    placeholder="Maria Souza Silva" value="${this._professional.name?this._professional.name:""}">\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                    <label for="residencialPhone">Telefone</label>\n                    <input type="text" class="form-control" name="residencialPhone" value="${this._professional.residencialPhone?this._professional.residencialPhone:""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                    <label for="cellphone">Celular</label>\n                    <input type="text" class="form-control" name="cellphone" value="${this._professional.cellphone?this._professional.cellphone:""}">\n                    </div>\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                    <label for="departament">Àrea de Atuação</label>\n                    <select class="form-control" name="departament">\n                        <option value="CABELELEIRA" ${"CABELELEIRA"==this._professional.departament?"selected":""}>Cabeleleira</option>\n                        <option value="MANICURE" ${"MANICURE"==this._professional.departament?"selected":""}>Manicure</option>\n                        <option value="DESIGNER_SOBRANCELHAS" ${"DESIGNER_SOBRANCELHAS"==this._professional.departament?"selected":""}>Design de Sobrancelhas</option>\n                        <option value="DEPILADORA" ${"DEPILADORA"==this._professional.departament?"selected":""}>Depiladora</option>\n                        <option value="ESTETICISTA" ${"ESTETICISTA"==this._professional.departament?"selected":""}>Esteticista</option>\n                    </select>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="email">E-mail</label>\n                    <input type="email" min="3" max="20" class="form-control" name="email" \n                        placeholder="maria.silva@gmail.com" value="${this._professional.email?this._professional.email:""}">\n                </div>\n            </div>\n        `;return i.a.parse(e)}}},,,,,,,,function(e,t,n){"use strict";n.r(t);var s=n(14),o=n(17),i=n(15),a=n(16),r=n(6),l=n(29),d=n(12),c=n(18),h=n(3),u=n(2),m=n(19);class p extends m.a{constructor(e,t,n,s){super(e,{id:"professionalsList",headers:["Nome","Àrea de Atuação","Telefone","Celular","E-mail","Ações"]}),this._editAction=t,this._removeAction=n,this._restorePasswordAction=s}_createLineTableFromModel(e){let t=new h.a("Editar","btn btn-outline-primary btn-sm","button",new u.a("click",()=>this._editAction(e.id))),n=new h.a("Remover","btn btn-outline-danger btn-sm","button",new u.a("click",()=>this._removeAction(e.id))),s=new h.a("Resetar","btn btn-outline-warning btn-sm","button",new u.a("click",()=>this._restorePasswordAction(e.email)));return this._createTableLine(e.id,[e.name,e.departament,e.residencialPhone,e.cellphone,e.email],t,n,s)}}var f=n(20),_=n(21),v=n(10);class b extends v.a{_init(){this._service=new o.a,this._initAlertMessages(),this._initProfessionalsTable(),this._initProfessionalFormModal(),this._initRemoveConfirmationModal(),this.updateProfessionalTable(),this._initModalFormButtons(),this._initConfirmRestorePassowordModal(),document.querySelector(".btn-create-professional").addEventListener("click",()=>{this._createProfessional()})}saveProfessionalForm(){let e=this._professionalForm.professional,t=e.id?this._service.updateProfessional(e):this._service.createProfessional(e);this._preLoader.run(t.then(e=>{this._professionals.add(e),this._modalForm.hide(),this._message.update("",`Os dados do(a) ${e.name} foram salvos com sucesso`,"success")}))}updateProfessionalTable(){this._preLoader.run(this._service.getAllProfessionals().then(e=>{e.forEach(e=>this._professionals.add(e)),this._message.update("A lista de profissionais foi sincronizada com o servidor","Lista de Profissionais atualizada!","info")}))}deleteProfessional(e){this._preLoader.run(this._service.deteleProfessional(e).then(()=>{this._modalConfirmRemove.hide(),this._professionals.remove(e),this._message.update("Os dados do profissional foram removidos definitivamente","Profissional removido!","info")}))}restorePassword(e){this._preLoader.run(this._service.restorePassword(e).then(()=>{this._modalRestorePassword.hide(),this._message.update("A senha do profissional foi restaurada e um novo padrão foi enviada para o e-mail cadastrado","Senha Alterada","success")}))}_initProfessionalsTable(){this._professionals=new _.a(new c.a,new p("#professionalList",e=>{this._editProfessional(e)},e=>{this._confirmRemoveProfessional(e)},e=>{this._confirmRestorePassword(e)}),"add","remove")}_initAlertMessages(){this._message=new s.a(new i.a,new a.a(document.querySelector("#alertMessage")),"update")}_initProfessionalFormModal(){this._modalForm=new r.a("#modalForm",{id:"MForm",title:"Formulário do Profissional",footer:!0}),this._professionalForm=new l.a(this._modalForm.contentSelector,!1)}_initRemoveConfirmationModal(){this._modalConfirmRemove=new f.a("#modalForm",{id:"modalConfirmRemove",title:"Remover Profissional",buttonLabel:"Remover definitivamente"},e=>{this.deleteProfessional(e)})}_initModalFormButtons(){this._modalForm.updateFooter(new h.a("Salvar","btn btn-primary btn-lg","button",new u.a("click",()=>{this.saveProfessionalForm()})))}_initConfirmRestorePassowordModal(){this._modalRestorePassword=new f.a("main",{id:"restorePasswordModal",title:"Restaurar Senha",buttonLabel:"Restaurar senha e enviar E-mail"},e=>{this.restorePassword(e)})}_confirmRemoveProfessional(e){let t=this._professionals.find(e);this._modalConfirmRemove.update(`Você tem certeza que deseja remover definitivamente o(a) professional <strong>${t.name}</strong> do sistema?`,t.id),this._modalConfirmRemove.show()}_confirmRestorePassword(e){this._modalRestorePassword.update("Você tem certeza que deseja resetar a conta do usuário e criar um novo padrão de senha para o e-mail "+e,e),this._modalRestorePassword.show()}_editProfessional(e){let t=this._professionals.find(e);this._professionalForm.professional=t,this._modalForm.show()}_createProfessional(){this._professionalForm.professional=new d.a,this._modalForm.show()}}new b}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,