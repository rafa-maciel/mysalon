!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=35)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(1);class i{constructor(e,t={}){this._component=s.a.parse(this._base(t)),this._tag="#"+t.id,this._parentSelector=e,this._info=t,this._init(),document.querySelector(this._parentSelector).appendChild(this._component)}_init(){this._initListeners(this._info.listeners)}_initListeners(e){e&&e.forEach(e=>{this._component.addEventListener(e.type,e.action)})}_base(e){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{static parse(e){return(new DOMParser).parseFromString(e,"text/html").documentElement.querySelector("body").firstChild}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t){this._type=e,this._action=t}get type(){return this._type}get action(){return this._action}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t,n="submit",...s){let i=document.createElement("button");return i.classList=t,i.setAttribute("type",n),i.innerHTML=e,s&&s.forEach(e=>i.addEventListener(e.type,e.action)),i}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));n(11),n(7);class s{addToken(e,t){let n=`${e} ${t}`;window.localStorage.setItem("msaloonwbtoken",n)}storeItem(e,t){window.localStorage.setItem(e,t)}cleanToken(){window.localStorage.setItem("msaloonwbtoken",null)}get token(){return window.localStorage.getItem("msaloonwbtoken")}getStoredItem(e){return window.localStorage.getItem(e)}post(e,t){let n=this._buildTransactionDetails("POST",t);return this._buildFetchTransaction(e,n)}get(e){let t=this._buildTransactionDetails("GET",null);return this._buildFetchTransaction(e,t)}put(e,t){let n=this._buildTransactionDetails("PUT",t);return this._buildFetchTransaction(e,n)}delete(e){let t=this._buildTransactionDetails("DELETE",null);return fetch(e,t).then(e=>{if(e.ok)return!0;throw new Error("A transactional error has been happened.")})}_buildTransactionHeaders(){return new Headers({"Content-type":"Application/json",Authorization:this.token})}_buildTransactionDetails(e,t){return{method:e,body:t,headers:this._buildTransactionHeaders()}}_buildFetchTransaction(e,t){return fetch(e,t).then(e=>{if(e.ok)return e.json().then(e=>e).catch(e=>!0);throw new Error("A transactional error has been happened.")})}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(0);class i extends s.a{updateFields(){document.querySelector(this._tag+" .fields").innerHTML="",document.querySelector(this._tag+" .fields").appendChild(this._template())}submit(){document.querySelector(this._tag).submit()}reset(){document.querySelector(this._tag).reset()}getData(){let e=[];return $(this._tag).serializeArray().forEach(t=>{e[t.name]=t.value}),e}getDataAsParams(){return $(this._tag).serialize()}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".fields").appendChild(this._info.initialContent),this._info.buttons&&this._info.initialButtons&&this._info.initialButtons.forEach(e=>this._component.querySelector(".buttons").appendChild(e))}_base(e){return`\n        <form id=${e.id} ${e.formClass?`class='${e.formClass}'`:""}>\n           <div class='fields'></div>\n           <div class='buttons'>\n                ${e.defaultButtons?'\n                <button type="submit" class="btn btn-primary">Salvar</button>\n                <button type="reset" class="btn btn-secondary">Limpar</button>\n                ':""}\n           </div>\n        </form>\n        `}_template(){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));n(1);var s=n(0);class i extends s.a{show(){$(this._tag).modal("show")}hide(){$(this._tag).modal("hide")}updateContent(e){document.querySelector(this._tag+" .modal-body").innerHTML="",document.querySelector(this._tag+" .modal-body").appendChild(e)}cleanContent(){document.querySelector(this._tag+" .modal-body").innerHTML=""}updateContentText(e){document.querySelector(this._tag+" .modal-body").innerHTML="<pre>"+e+"</pre>"}updateFooter(e){document.querySelector(this._tag+" .modal-footer").innerHTML="",document.querySelector(this._tag+" .modal-footer").appendChild(e)}cleanFooter(){document.querySelector(this._tag+" .modal-footer").innerHTML=""}get contentSelector(){return this._tag+" .modal-body"}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".modal-body").appendChild(this._info.initialContent),this._info.footer&&this._info.initialFooter&&this._component.querySelector(".modal-footer").appendChild(this._info.initialFooter)}_initListeners(e){e&&e.forEach(e=>{$(this._component).on(e.type,e.action)})}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="${e.label?e.label:"myLargeModal"}" aria-hidden="true">\n            <div class="modal-dialog ${e.modalClass?e.modalClass:""}" role="document">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title">${e.title}</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                            <span aria-hidden="true">&times;</span>\n                        </button>\n                    </div>\n            \n                    <div class="modal-body">\n                    </div>\n\n                    ${e.footer?'\n                    <div class="modal-footer">\n                        \n                    </div>\n                    ':""}\n                </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(4);class i{constructor(){this._serverURL="http://localhost:8080/auth",this._webtoken="msaloonwbtoken",this._http=new s.a}hasValidToken(){return this._http.get(this._serverURL)}authenticate(e){let t={method:"POST",body:JSON.stringify(e),headers:{"Content-type":"Application/json"}};return fetch(this._serverURL,t).then(e=>{if(e.ok&&200==e.status)return e.json();throw new Error("The signin data is not correct")}).then(e=>{this._http.addToken(e.type,e.token)})}logout(){this._http.cleanToken()}redirectToLoginPage(){window.location.href="/login.html"}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{equals(e){throw new Error("The equals method must be implemented")}equalsFor(e){throw new Error("The equalsFor method must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{static create(e,t,n){return new Proxy(e,{get:(e,i,o)=>t.includes(i)&&s._isFuntion(e[i])?function(){let t=Reflect.apply(e[i],e,arguments);return n(e),t}:Reflect.get(e,i,o),set(e,s,i,o){let r=Reflect.set(e,s,i,o);return t.includes(s)&&n(e),r}})}static _isFuntion(e){return typeof e==typeof Function}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var s=n(0);class i extends s.a{constructor(e){super(e)}_base(e){return'\n        <nav class="sidebar">\n          <div class="sidebar-sticky">\n            <ul class="nav flex-column">\n              <li class="nav-item">\n                <a class="nav-link active" href="./schedule.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>\n                  Dashboard <span class="sr-only">(current)</span>\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./customers.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>\n                  Clientes\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./professionals.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Profissionais\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./vendors.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Fornecedores\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./purchases.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Compras\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./appointments.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Atendimentos (Consultas)\n                </a>\n              </li>\n            </ul>\n    \n            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">\n              <span>Minha Conta</span>\n            </h6>\n            <ul class="nav flex-column mb-2">\n              <li class="nav-item">\n                <a class="nav-link" href="./profile.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>\n                  Meu Perfil\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        '}}class o extends s.a{constructor(e,t){super(e),this._initHeaderNavigation(t)}_initHeaderNavigation(e){this._component.querySelector("a.logout").addEventListener(e.type,e.action)}_base(e){return'\n        <nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">\n            <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">My Saloon Web</a>\n            <input class="form-control form-control-dark w-100" type="text" placeholder="Pesquisar" aria-label="Pesquisar">\n            <ul class="navbar-nav px-3">\n                <li class="nav-item text-nowrap">\n                <a class="nav-link logout" href="#">Logoff</a>\n                </li>\n            </ul>\n        </nav>\n        '}}var r=n(2),a=n(7),l=n(1);class c extends s.a{constructor(){super("#headerNavigation"),this._initLoaderComponent()}start(){this._component.appendChild(this._loaderComponent),this._component.classList.add("pre-loader-running")}stop(){this._component.innerHTML="",this._component.classList.remove("pre-loader-running")}run(e){this.start(),e.then(()=>{this.stop()})}_initLoaderComponent(){this._loaderComponent=l.a.parse('\n        <div class="loader-panel">\n            <div id="loader4">\n                <span class="loader loader-1"></span>\n                <span class="loader loader-2"></span>\n                <span class="loader loader-3"></span>\n                <span class="loader loader-4"></span>\n            </div>\n        </div>\n        ')}_base(){return'\n        <div class="row" id="preLoader">\n            \n        </div>\n        '}}class d{constructor(){this._preLoader=new c,this._authService=new a.a,this._validAuthenticatedClient(),this._headerNav=new o("#headerNavigation",new r.a("click",e=>{this.doLogoff()})),this._dashboardNav=new i("#dashboardNavigation"),this._init()}doLogoff(){this._authService.logout(),this._authService.redirectToLoginPage()}_init(){throw new Error("the _init() method must be implemented")}_validAuthenticatedClient(){this._authService.hasValidToken().catch(()=>{this._authService.redirectToLoginPage()})}}},function(e,t,n){"use strict"},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(8);class i extends s.a{constructor(e,t,n,s,i,o=""){super(),this._name=e,this._residencialPhone=t,this._cellphone=n,this._departament=s,this._id=o,this._email=i}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get name(){return this._name}get residencialPhone(){return this._residencialPhone}get cellphone(){return this._cellphone}get departament(){return this._departament}get email(){return this._email}get id(){return this._id}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(9);class i{constructor(e,t,...n){let i=s.a.create(e,n,e=>t.update(e));return t.update(e),i}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(){this._title="",this._message="",this._type="primary"}update(e,t="",n="primary"){this._title=t,this._message=e,this._type=n}get title(){return this._title}get message(){return this._message}get type(){return this._type}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s extends class{constructor(e){this._element=e}_template(e){throw new Error("Template method must be implemented")}update(e){this._element.innerHTML=this._template(e)}}{_template(e){return`\n        <div class="alert alert-${e.type} alert-dismissible fade show" role="alert">\n            <h4 class="alert-heading">${e.title}</h4>\n            <p class='text-muted'>${e.message}</p>\n            <button type="button" class="close" data-dismiss="alert" aria-label="Close">\n                <span aria-hidden="true">&times;</span>\n            </button>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(12),i=(n(11),n(4));class o{constructor(){this._serverURL="http://localhost:8080/professionals",this._http=new i.a}getAllProfessionals(){let e=this._serverURL;return this._http.get(e).then(e=>e.map(e=>this._getProfessionalFromData(e)))}getProfessionalByID(e){let t=`${this._serverURL}/${e}`;return this._http.get(t).then(e=>this._getProfessionalFromData(e)).catch(e=>{throw console.log(e),new Error("Ocorreu um error na comunição com o servidor e não foi possivel encontrar o profissional solicitado")})}createProfessional(e){let t=this._serverURL;return this._http.post(t,JSON.stringify(e)).then(e=>this._getProfessionalFromData(e))}updateProfessional(e){let t=`${this._serverURL}/${e.id}`;return this._http.put(t,JSON.stringify(e)).then(e=>this._getProfessionalFromData(e))}deteleProfessional(e){let t=`${this._serverURL}/${e}`;return this._http.delete(t)}getProfessionalByEmail(e){let t=`${this._serverURL}/email/${e}`;return this._http.get(t).then(e=>this._getProfessionalFromData(e))}restorePassword(e){return this._http.post("http://localhost:8080/accounts/restore",JSON.stringify({email:e}))}resetPassword(e){return this._http.post("http://localhost:8080/accounts/reset",JSON.stringify({password:e}))}_getProfessionalFromData(e){return new s.a(e.name,e.residencialPhone,e.cellphone,e.department,e.email,e.id)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(){this._list=[],this._pageableInfo=void 0}clean(){this._list=[],this._pageableInfo=void 0}add(e){this._list.some(t=>t.equals(e))?this._list.forEach((t,n)=>{t.equals(e)&&(this._list[n]=e)}):this._list.push(e)}find(e){return this._list.find(t=>t.equalsFor(e))}updatePageableInfo(e){this._pageableInfo=e}remove(e){this._list.forEach((t,n)=>{t.equalsFor(e)&&this._list.splice(n,1)})}get list(){return this._list}get pageableInfo(){return this._pageableInfo}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(0);class i extends s.a{_updateList(e){let t=document.querySelector(this._tag+" tbody");t.innerHTML="",e.forEach(e=>t.appendChild(e))}_appendItem(e){document.querySelector(this._tag+" tbody").appendChild(e)}_cleanTable(){document.querySelector(this._tag+" tbody").innerHTML=""}_removeLine(e){document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`).remove()}_updateLine(e,t){let n=document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`);n.parentNode.replaceChild(t,n)}_createTableLine(e,t,...n){let s=document.createElement("tr");if(s.setAttribute("data-key",e),t.forEach(e=>{let t=document.createElement("td");t.innerHTML=e,s.appendChild(t)}),n){let e=document.createElement("td");n.forEach(t=>e.appendChild(t)),s.appendChild(e)}return s}_base(e){return`\n        <table class="table table-hover" id=${e.id}>\n            <thead>\n                <tr>\n                    ${e.headers.map(e=>`\n                        <th scope="col">${e}</th>\n                    `).join("")}\n                </tr>\n            </thead>\n            <tbody>\n                ${e.initialContent?initialContent:""}\n            </tbody>\n        </table>\n        `}}class o extends i{updateFromModel(e){this._cleanTable(),e.list.forEach(e=>this._appendItem(this._createLineTableFromModel(e)))}_createLineTableFromModel(e){throw new Error("_createLineTableFromModel must been implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(6);class i extends s.a{constructor(e,t,n){super(e,t),this._removeAction=n}_init(){super._init(),this._component.querySelector(this._tag+" form").addEventListener("submit",e=>{e.preventDefault();let t=document.querySelector(this._tag+' form input[name="key"]').value;this._removeAction(t)})}update(e,t){document.querySelector(this._tag+" .modal-body .alert").innerHTML=e,document.querySelector(this._tag+' form input[name="key"]').value=t}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog">\n            <div class="modal-dialog modal-sm" role="document">\n            <div class="modal-content">\n                <div class="modal-header">\n                <h5 class="modal-title">${e.title}</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n                </div>\n                <div class="modal-body">\n                <div class="alert alert-danger" role="alert">\n                    ${e.message}\n                </div>\n                <p class="text-muted">Essa ação não poderá ser desfeita</p>\n                <form>\n                    <input type="hidden" name="key">\n                    <button class="btn btn-danger btn-sm btn-block" type="submit">${e.buttonLabel}</button>\n                </form>\n                </div>\n            </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(9);class i{constructor(e,t,...n){let i=s.a.create(e,n,e=>t.updateFromModel(e));return t.updateFromModel(e),i}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(8);class i extends s.a{constructor(e,t,n,s,i,o=""){super(),this._fullname=e,this._residencialPhone=t,this._cellphone=n,this._indicatedBy=s,this._professionalEngaged=i,this._id=o}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get fullname(){return this._fullname}get residencialPhone(){return this._residencialPhone}get cellphone(){return this._cellphone}get indicatedBy(){return this._indicatedBy}get professionalEngaged(){return this._professionalEngaged}get id(){return this._id}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t,n,s,i,o,r,a,l,c,d=[]){this._pageNumber=e,this._pageSize=t,this._totalElements=n,this._totalPages=s,this._numberOfElements=i,this._first=o,this._last=r,this._number=a,this._size=l,this._empty=c,this._content=d}static buildFrom(e,t){let n=e.pageable;return new s(n.pageNumber,n.pageSize,e.totalElements,e.totalPages,e.numberOfElements,e.first,e.last,e.number,e.size,e.empty,t)}get pageNumber(){return this._pageNumber}get pageSize(){return this._pageSize}get totalElements(){return this._totalElements}get totalPages(){return this._totalPages}get numberOfElements(){return this._numberOfElements}get first(){return this._first}get last(){return this._last}get number(){return this._number}get size(){return this._size}get empty(){return this._empty}get content(){return this._content}get previous(){return this.number-1}get next(){return this.number+1}get hasNext(){return this._number<this._totalPages-1}get hasPrevious(){return this._number>0}get paged(){return this._totalPages>1}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var s=n(0),i=n(1),o=n(3),r=n(2);class a extends s.a{constructor(e,t={},n){super(e,t),this._pageAction=n}update(e){document.querySelector(this._tag).innerHTML="",document.querySelector(this._tag).appendChild(this._template(e)),this._createPaginationNavButtons(e).forEach(e=>document.querySelector(this._tag+" .pagination").appendChild(e))}_createPaginationNavButtons(e){let t=[],n=new o.a("Anterior","page-link","button",new r.a("click",()=>this._pageAction(e.previous)));t.push(this._createListItem(!e.hasPrevious,n));for(let n=0;n<e.totalPages;n++){let s=new o.a(n+1,"page-link","button",new r.a("click",()=>this._pageAction(n)));t.push(this._createListItem(e.number==n,s))}let s=new o.a("Proxima","page-link","button",new r.a("click",()=>this._pageAction(e.next)));return t.push(this._createListItem(!e.hasNext,s)),t}_createListItem(e=!1,t){let n=document.createElement("li");return n.classList="page-item "+(e?"disabled":""),n.appendChild(t),n}_template(e){let t=e?`\n        <div>\n            <p class='text-muted'>Exibindo ${e.numberOfElements} de ${e.totalElements}</p>\n            <nav aria-label="Page navigation example">\n                <ul class="pagination justify-content-center">\n                </ul>\n            </nav>\n        </div>\n        `:"";return i.a.parse(t)}_base(e){return`\n        <div class="row>\n            <div class="col-sm-12 col-md-5">\n                <div id='${e.id}'><div>\n            </div>\n        </div>\n        `}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var s=n(4),i=n(22),o=n(23);class r{constructor(){this._serverURL="http://localhost:8080/customers",this._http=new s.a}getCustomers(e=null){let t=this._serverURL+"/search";return e&&(t=t+"?"+e),this._http.get(t).then(e=>o.a.buildFrom(e,e.content.map(e=>this._getCustomerFromData(e)))).catch(e=>{throw console.log(e),new Error("Não foi possivel conectar ao servidor")})}getCustomerByID(e){let t=`${this._serverURL}/${e}`;return this._http.get(t).then(e=>this._getCustomerFromData(e)).catch(e=>{throw console.log(e),new Error("Ocorreu um error na comunição com o servidor e não foi possivel encontrar o cliente solicitado")})}createCustomer(e){let t=this._serverURL;return this._http.post(t,JSON.stringify(e)).then(e=>this._getCustomerFromData(e))}updateCustomer(e){let t=`${this._serverURL}/${e.id}`;return this._http.put(t,JSON.stringify(e)).then(e=>this._getCustomerFromData(e))}deleteCustomer(e){let t=`${this._serverURL}/${e}`;return this._http.delete(t).catch(e=>{throw console.log(e),new Error("Não foi possivel remover o cliente solicitado")})}_getPageableCustomersFromData(e){let t=e.pageable;return new o.a(t.pageNumber,t.pageSize,e.totalElements,e.totalPages,e.numberOfElements,e.first,e.last,e.number,e.size,e.empty)}_getCustomerFromData(e){return new i.a(e.fullname,e.residencialPhone,e.cellphone,e.indicatedBy,e.professionalEngagedName,e.id)}_getFilterData(e){if(e.hasOwnProperty("name")||e.hasOwnProperty("professionalEngagedName")){return`name=${e.name?e.name:""}&professionalEngagedName=${e.professionalEngagedName?e.professionalEngagedName:""}`}return""}}},,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var s=n(5),i=n(22),o=n(1);class r{constructor(e,t,n,s,i,o=""){this.fullname=e,this.residencialPhone=t,this.cellphone=n,this.indicatedBy=s,this.professionalEngagedID=i,this.id=o}}var a=n(17);class l extends s.a{constructor(e,...t){super(e,{id:"customerForm",listeners:t}),this._customer=new i.a,this._professionalList=[],(new a.a).getAllProfessionals().then(e=>{this._professionalList=e,this.updateFields()})}set customer(e){this._customer=e,this.updateFields()}getCustomerDTO(){let e=this.getData();return new r(e.fullname,e.residencialPhone,e.cellphone,e.indicatedBy,e.professionalEngaged,e.id)}_template(){let e=`\n            <div>\n                <input type="hidden" class="form-control" id="id" name="id" value="${this._customer.id?this._customer.id:""}">\n                <div class="form-group">\n                    <label for="fullname">Nome</label>\n                    <input type="text" min="3" max="20" class="form-control" id="fullname" name="fullname" \n                        placeholder="Juliana Bandeiras" value="${this._customer.fullname?this._customer.fullname:""}">\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="residencialPhone">Telefone</label>\n                        <input type="text" class="form-control" id="residencialPhone" name="residencialPhone" value="${this._customer.residencialPhone?this._customer.residencialPhone:""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="cellphone">Celular</label>\n                        <input type="text" class="form-control" id="cellphone" name="cellphone" value="${this._customer.cellphone?this._customer.cellphone:""}">\n                    </div>\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="indicatedBy">Indicado Por</label>\n                        <input type="text" class="form-control" id="indicatedBy" name="indicatedBy" value="${this._customer.indicatedBy?this._customer.indicatedBy:""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="professionalEngaged">Profissional Responsável</label>\n                        <select id="professionalEngaged" class="form-control" name="professionalEngaged">\n                            ${this._professionalList.map(e=>`\n                                <option value="${e.id}" ${this._customer.professionalEngaged==e.name?"selected":""}>${e.name}</option>\n                            `).join("")}\n                        </select>\n                    </div>\n                </div>\n            </div>\n        `;return o.a.parse(e)}}},,,,,function(e,t,n){"use strict";n.r(t);var s=n(14),i=n(18),o=n(26),r=n(15),a=n(16),l=n(5),c=n(17),d=n(1),u=n(3),h=n(2);class m extends l.a{constructor(e,...t){super(e,{id:"customerFilterForm",buttons:!0,initialButtons:[new u.a("Filtrar","btn btn-primary btn-sm float-rigth","submit"),new u.a("Limpar Filtro","btn btn-secondary btn-sm","reset")],listeners:t}),this._professionalList=[],(new c.a).getAllProfessionals().then(e=>{this._professionalList=e,this.updateFields()})}_template(){let e=`\n            <div>\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="fullname">Nome</label>\n                        <input type="text" class="form-control" name="fullname">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="phone">Telefone</label>\n                        <input type="text" class="form-control" name="phone">\n                    </div>\n                </div>\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="indicatedBy">Indicado Por:</label>\n                        <input type="text" class="form-control" name="indicatedBy">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="professionalEngagedId">Profissional Responsável</label>\n                        <select class="form-control" name="professionalEngagedId">\n                        <option value="">Todos</option>\n                            ${this._professionalList.map(e=>`\n                            <option value="${e.id}">${e.name}</option>\n                            `).join("")}\n                        </select>\n                    </div>\n                </div>\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="size">Itens por Pagina</label>\n                        <select name="size" class="form-control">\n                            <option value="20">20</option>\n                            <option value="10">10</option>\n                            <option value="5">5</option>\n                            <option value="2">2</option>\n                        </select>\n                    </div>\n\n                    <div class="form-group col-md-6">\n                        <label for="sort">Ordenar Por:</label>\n                        <select name="sort" class="form-control">\n                            <option value="">Sem Ordenação</option>\n                            <option value="fullname,ASC">Nome (crescente)</option>\n                            <option value="fullname,DESC">Nome (Decrescente)</option>\n                            <option value="professionalEngaged,ASC">Profissional Responsável (Crescente)</option>\n                            <option value="professionalEngaged,DESC">Profissional Responsável (Decrescente)</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        `;return d.a.parse(e)}}var p=n(6),_=n(30),f=n(22),g=n(19),v=n(24);class b extends g.a{constructor(e,t,n){super(e,{id:"cList",headers:["Nome","Profissional Responsável","Telefone","Celular","Ações"]}),this._editAction=t,this._removeAction=n}_createLineTableFromModel(e){let t=new u.a("Editar","btn btn-outline-primary btn-sm","button",new h.a("click",()=>this._editAction(e.id))),n=new u.a("Remover","btn btn-outline-danger btn-sm","button",new h.a("click",()=>this._removeAction(e.id)));return this._createTableLine(e.id,[e.fullname,e.professionalEngaged,e.residencialPhone,e.cellphone],t,n)}}var y=n(21),w=n(20),C=n(10);class L extends C.a{_init(){this._service=new o.a,this._initAlertMessages(),this._initRemoveConfirmationModal(),this._initCustomerFormModal(),this._initCustomersTable(),this.searchCustomers(),this._initModalFormButtons(),document.querySelector(".btn-create-customer").addEventListener("click",()=>{this._createCustomer()})}saveCustomerForm(){let e=this._customerForm.getCustomerDTO(),t=e.id?this._service.updateCustomer(e):this._service.createCustomer(e);this._preLoader.run(t.then(e=>{this._customers.add(e),this._message.update(`Os dados do ${e.fullname} foram salvos com sucesso`,"Dados Salvo","success"),this._modalForm.hide()}).catch(e=>console.log(e)))}deleteCustomer(e){this._preLoader.run(this._service.deleteCustomer(e).then(()=>{this._customers.remove(e),this._message.update("Os dados do cliente foram removidos definitivamente","Cliente removido!","info")}).catch(e=>{this._message.update(e.message,"Erro na operação!","warning")})),this._modalConfirmRemove.hide()}searchCustomers(e=null){this._customers.clean();let t=this._filter.getDataAsParams();null!=e&&(t=t+"&page="+e),this._preLoader.run(this._service.getCustomers(t).then(e=>{this._pageable.update(e),e.content.forEach(e=>{this._customers.add(e)}),this._message.update("","Lista de Clientes atualizada!","info")}).catch(e=>{this._message.update(e.message,"A conexão falhou","info")}))}_initCustomersTable(){this._customers=new y.a(new i.a,new b("#customerList",e=>{this._editCustomer(e)},e=>{this._confirmRemoveCustomer(e)}),"add","remove","clean"),this._modalSearchForm=new p.a("main",{id:"modalSearchForm",title:"Filtro de pesquisa"}),this._filter=new m(this._modalSearchForm.contentSelector,new h.a("submit",e=>{e.preventDefault(),this.searchCustomers(),this._modalSearchForm.hide()})),document.querySelector(".btn-show-search-modal").addEventListener("click",()=>{this._modalSearchForm.show()}),this._pageable=new v.a("#customerList",{id:"customerListPagination"},e=>{this.searchCustomers(e)})}_initCustomerFormModal(){this._modalForm=new p.a("main",{id:"mForm",title:"Formulário do Cliente",footer:!0}),this._customerForm=new _.a(this._modalForm.contentSelector)}_initRemoveConfirmationModal(){this._modalConfirmRemove=new w.a("main",{id:"modalConfirmRemove",title:"Remover Cliente",buttonLabel:"Remover definitivamente"},e=>{this.deleteCustomer(e)})}_initAlertMessages(){this._message=new s.a(new r.a,new a.a(document.querySelector("#alertMessage")),"update")}_initModalFormButtons(){this._modalForm.updateFooter(new u.a("Salvar","btn btn-primary btn-lg","button",new h.a("click",()=>{this.saveCustomerForm()})))}_createCustomer(){this._customerForm.customer=new f.a,this._modalForm.show()}_editCustomer(e){let t=this._customers.find(e);this._customerForm.customer=t,this._modalForm.show()}_confirmRemoveCustomer(e){let t=this._customers.find(e);this._modalConfirmRemove.update(`Você tem certeza que deseja remover definitivamente o(a) cliente <strong>${t.fullname}</strong> do sistema?`,t.id),this._modalConfirmRemove.show()}}new L}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL0RPTVBhcnNlclV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlzdGVuZXJBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwZXJzL0h0dHBIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvQXV0aGVudGljYXRpb25Ub2tlblNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9Nb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9Qcm94eUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRGFzaGJvYXJkTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXJOYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ByZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvRGVmYXVsdERhc2hib2FyZENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9Qcm9mZXNzaW9uYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvQmluZFByb3h5TW9kZWxWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbHMvQWxlcnRNZXNzYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9BbGVydE1lc3NhZ2VWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9Nb2RlbFZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL1Byb2Zlc3Npb25hbFNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9Nb2RlbExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTW9kZWxUYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db25maXJtTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHBlcnMvUHJveHlNb2RlbENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWxzL0N1c3RvbWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbHMvUGFnZWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGFnZWFibGVOYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9DdXN0b21lclNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R0b3MvQ3VzdG9tZXJEVE8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0N1c3RvbWVyRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvQ3VzdG9tZXJGaWx0ZXJGb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9DdXN0b21lcnNUYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvQ3VzdG9tZXJDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jdXN0b21lci5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkNvbXBvbmVudCIsInBhcmVudFNlbGVjdG9yIiwiaW5mbyIsInRoaXMiLCJfY29tcG9uZW50IiwicGFyc2UiLCJfYmFzZSIsIl90YWciLCJpZCIsIl9wYXJlbnRTZWxlY3RvciIsIl9pbmZvIiwiX2luaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsIl9pbml0TGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiZm9yRWFjaCIsImxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInR5cGUiLCJhY3Rpb24iLCJFcnJvciIsIkRPTVBhcnNlclV0aWwiLCJodG1sVGV4dCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImRvY3VtZW50RWxlbWVudCIsImZpcnN0Q2hpbGQiLCJMaXN0ZW5lckFjdGlvbiIsIl90eXBlIiwiX2FjdGlvbiIsIkJ1dHRvbiIsImxhYmVsIiwiY3NzIiwiYnRuIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsIkh0dHBIZWxwZXIiLCJ0b2tlbiIsImRhdGEiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsImVuZHBvaW50IiwidHJhbnNhY3Rpb25EZXRhaWxzIiwiX2J1aWxkVHJhbnNhY3Rpb25EZXRhaWxzIiwiX2J1aWxkRmV0Y2hUcmFuc2FjdGlvbiIsImZldGNoIiwidGhlbiIsInJlcyIsIm9rIiwiSGVhZGVycyIsIm1ldGhvZCIsIl9idWlsZFRyYW5zYWN0aW9uSGVhZGVycyIsImpzb24iLCJjYXRjaCIsImVyciIsIkZvcm0iLCJfdGVtcGxhdGUiLCJzdWJtaXQiLCJyZXNldCIsIiQiLCJzZXJpYWxpemVBcnJheSIsImlucHV0Iiwic2VyaWFsaXplIiwic3VwZXIiLCJpbml0aWFsQ29udGVudCIsImJ1dHRvbnMiLCJpbml0aWFsQnV0dG9ucyIsImJ1dHRvbiIsImZvcm1DbGFzcyIsImRlZmF1bHRCdXR0b25zIiwiTW9kYWwiLCJtb2RhbCIsImNvbnRlbnQiLCJmb290ZXIiLCJpbml0aWFsRm9vdGVyIiwib24iLCJtb2RhbENsYXNzIiwidGl0bGUiLCJBdXRoZW50aWNhdGlvblRva2VuU2VydmljZSIsIl9zZXJ2ZXJVUkwiLCJfd2VidG9rZW4iLCJfaHR0cCIsImF1dGhEVE8iLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdHVzIiwiYWRkVG9rZW4iLCJjbGVhblRva2VuIiwibG9jYXRpb24iLCJocmVmIiwiTW9kZWwiLCJvdGhlciIsImF0dHJpYnV0ZSIsIlByb3h5RmFjdG9yeSIsInByb3BzIiwiUHJveHkiLCJ0YXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJpbmNsdWRlcyIsIl9pc0Z1bnRpb24iLCJyZXN1bHQiLCJSZWZsZWN0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzZXQiLCJmdW5jIiwibG9nb2ZmQWN0aW9uIiwiX2luaXRIZWFkZXJOYXZpZ2F0aW9uIiwiX2luaXRMb2FkZXJDb21wb25lbnQiLCJfbG9hZGVyQ29tcG9uZW50IiwiYWRkIiwicmVtb3ZlIiwicHJvbWlzc2UiLCJzdGFydCIsInN0b3AiLCJfcHJlTG9hZGVyIiwiX2F1dGhTZXJ2aWNlIiwiX3ZhbGlkQXV0aGVudGljYXRlZENsaWVudCIsIl9oZWFkZXJOYXYiLCJldmVudCIsImRvTG9nb2ZmIiwiX2Rhc2hib2FyZE5hdiIsImxvZ291dCIsInJlZGlyZWN0VG9Mb2dpblBhZ2UiLCJoYXNWYWxpZFRva2VuIiwiUHJvZmVzc2lvbmFsIiwicmVzaWRlbmNpYWxQaG9uZSIsImNlbGxwaG9uZSIsImRlcGFydGFtZW50IiwiZW1haWwiLCJfbmFtZSIsIl9yZXNpZGVuY2lhbFBob25lIiwiX2NlbGxwaG9uZSIsIl9kZXBhcnRhbWVudCIsIl9pZCIsIl9lbWFpbCIsIkJpbmRQcm94eU1vZGVsVmlldyIsIm1vZGVsIiwidmlldyIsInByb3h5IiwidXBkYXRlIiwiQWxlcnRNZXNzYWdlIiwiX3RpdGxlIiwiX21lc3NhZ2UiLCJtZXNzYWdlIiwiYWxlcnRUeXBlIiwidmlld0VsZW1lbnQiLCJfZWxlbWVudCIsIlByb2Zlc3Npb25hbFNlcnZpY2UiLCJkYXRhQXJyYXkiLCJtYXAiLCJfZ2V0UHJvZmVzc2lvbmFsRnJvbURhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJwcm9mZXNzaW9uYWxEdG8iLCJwb3N0IiwicHV0IiwiZGVsZXRlIiwicGFzc3dvcmQiLCJNb2RlbExpc3QiLCJfbGlzdCIsIl9wYWdlYWJsZUluZm8iLCJ1bmRlZmluZWQiLCJzb21lIiwiaXRlbSIsImVxdWFscyIsInB1c2giLCJmaW5kIiwiZXF1YWxzRm9yIiwicGFnZWFibGUiLCJzcGxpY2UiLCJ0ckxpc3QiLCJib2R5IiwidHIiLCJsaW5lIiwicGFyZW50Tm9kZSIsInJlcGxhY2VDaGlsZCIsImxpbmVLZXkiLCJhY3Rpb25zIiwiY29sIiwiYSIsImhlYWRlcnMiLCJqb2luIiwibW9kZWxMaXN0IiwiX2NsZWFuVGFibGUiLCJsaXN0IiwiX2FwcGVuZEl0ZW0iLCJfY3JlYXRlTGluZVRhYmxlRnJvbU1vZGVsIiwiQ29uZmlybU1vZGFsIiwicmVtb3ZlQWN0aW9uIiwiX3JlbW92ZUFjdGlvbiIsInByZXZlbnREZWZhdWx0IiwiYnV0dG9uTGFiZWwiLCJQcm94eU1vZGVsQ29tcG9uZW50IiwiY29tcG9uZW50IiwidXBkYXRlRnJvbU1vZGVsIiwiQ3VzdG9tZXIiLCJmdWxsbmFtZSIsImluZGljYXRlZEJ5IiwicHJvZmVzc2lvbmFsRW5nYWdlZCIsIl9mdWxsbmFtZSIsIl9pbmRpY2F0ZWRCeSIsIl9wcm9mZXNzaW9uYWxFbmdhZ2VkIiwiUGFnZWFibGUiLCJwYWdlTnVtYmVyIiwicGFnZVNpemUiLCJ0b3RhbEVsZW1lbnRzIiwidG90YWxQYWdlcyIsIm51bWJlck9mRWxlbWVudHMiLCJmaXJzdCIsImxhc3QiLCJudW1iZXIiLCJzaXplIiwiZW1wdHkiLCJfcGFnZU51bWJlciIsIl9wYWdlU2l6ZSIsIl90b3RhbEVsZW1lbnRzIiwiX3RvdGFsUGFnZXMiLCJfbnVtYmVyT2ZFbGVtZW50cyIsIl9maXJzdCIsIl9sYXN0IiwiX251bWJlciIsIl9zaXplIiwiX2VtcHR5IiwiX2NvbnRlbnQiLCJwZ2RldGFpbHMiLCJQYWdlYWJsZU5hdmlnYXRpb24iLCJwYWdlQWN0aW9uIiwiX3BhZ2VBY3Rpb24iLCJfY3JlYXRlUGFnaW5hdGlvbk5hdkJ1dHRvbnMiLCJuYXYiLCJwcmV2aW91c0J0biIsInByZXZpb3VzIiwiX2NyZWF0ZUxpc3RJdGVtIiwiaGFzUHJldmlvdXMiLCJpbmRleCIsIm5leHRCdG4iLCJuZXh0IiwiaGFzTmV4dCIsImRpc2FibGVkIiwidGVtcGxhdGUiLCJDdXN0b21lclNlcnZpY2UiLCJwYXJhbWV0ZXJzIiwiYnVpbGRGcm9tIiwiX2dldEN1c3RvbWVyRnJvbURhdGEiLCJjdXN0b21lckR0byIsIkN1c3RvbWVyRFRPIiwicHJvZmVzc2lvbmFsRW5nYWdlZElEIiwiX2N1c3RvbWVyIiwiX3Byb2Zlc3Npb25hbExpc3QiLCJnZXRBbGxQcm9mZXNzaW9uYWxzIiwicHJvZmVzc2lvbmFsTGlzdCIsInVwZGF0ZUZpZWxkcyIsImN1c3RvbWVyIiwiZ2V0RGF0YSIsInByb2Zlc3Npb25hbCIsIk1vZGVsVGFibGUiLCJlZGl0QWN0aW9uIiwiX2VkaXRBY3Rpb24iLCJidG5FZGl0IiwiYnRuUmVtb3ZlIiwiX2NyZWF0ZVRhYmxlTGluZSIsIkRlZmF1bHREYXNoYm9hcmRDb250cm9sbGVyIiwiX3NlcnZpY2UiLCJfaW5pdEFsZXJ0TWVzc2FnZXMiLCJfaW5pdFJlbW92ZUNvbmZpcm1hdGlvbk1vZGFsIiwiX2luaXRDdXN0b21lckZvcm1Nb2RhbCIsIl9pbml0Q3VzdG9tZXJzVGFibGUiLCJzZWFyY2hDdXN0b21lcnMiLCJfaW5pdE1vZGFsRm9ybUJ1dHRvbnMiLCJfY3JlYXRlQ3VzdG9tZXIiLCJkdG8iLCJfY3VzdG9tZXJGb3JtIiwiZ2V0Q3VzdG9tZXJEVE8iLCJzYXZlUHJvbWlzc2UiLCJ1cGRhdGVDdXN0b21lciIsImNyZWF0ZUN1c3RvbWVyIiwicnVuIiwiX2N1c3RvbWVycyIsIl9tb2RhbEZvcm0iLCJoaWRlIiwiZGVsZXRlQ3VzdG9tZXIiLCJfbW9kYWxDb25maXJtUmVtb3ZlIiwicGFnZSIsImNsZWFuIiwiX2ZpbHRlciIsImdldERhdGFBc1BhcmFtcyIsImdldEN1c3RvbWVycyIsIl9wYWdlYWJsZSIsIl9lZGl0Q3VzdG9tZXIiLCJfY29uZmlybVJlbW92ZUN1c3RvbWVyIiwiX21vZGFsU2VhcmNoRm9ybSIsImNvbnRlbnRTZWxlY3RvciIsInNob3ciLCJDdXN0b21lckZvcm0iLCJBbGVydE1lc3NhZ2VWaWV3IiwidXBkYXRlRm9vdGVyIiwic2F2ZUN1c3RvbWVyRm9ybSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FB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aUIsYUFDWixJQUFJaFIsRUFBQSxFQUFPLFNBQVUseUJBQTBCLFNBQzNDLElBQUlILEVBQUEsRUFBZSxRQUFTLEtBQU8xQixLQUFLOFMsdUJBR3BELGtCQUNJOVMsS0FBS3FSLGNBQWNuQixTQUFXLElBQUl6RCxFQUFBLEVBQ2xDek0sS0FBSzRSLFdBQVdjLE9BR3BCLGNBQWNyUyxHQUNWLElBQUk2UCxFQUFXbFEsS0FBSzJSLFdBQVcvRyxLQUFLdkssR0FDcENMLEtBQUtxUixjQUFjbkIsU0FBV0EsRUFDOUJsUSxLQUFLNFIsV0FBV2MsT0FHcEIsdUJBQXVCclMsR0FDbkIsSUFBSTZQLEVBQVdsUSxLQUFLMlIsV0FBVy9HLEtBQUt2SyxHQUNwQ0wsS0FBSytSLG9CQUFvQi9JLE9BQ3JCLDRFQUE0RWtILEVBQVN4RCxnQ0FDckZ3RCxFQUFTN1AsSUFDYkwsS0FBSytSLG9CQUFvQlcsUUNsS2hCLElBQUkiLCJmaWxlIjoiY3VzdG9tZXIuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM1KTtcbiIsImltcG9ydCBET01QYXJzZXJVdGlsIGZyb20gXCIuLi9oZWxwZXJzL0RPTVBhcnNlclV0aWxcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTZWxlY3RvciwgaW5mbz17fSkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudCA9IERPTVBhcnNlclV0aWwucGFyc2UodGhpcy5fYmFzZShpbmZvKSk7XHJcbiAgICAgICAgdGhpcy5fdGFnID0gYCMke2luZm8uaWR9YDtcclxuICAgICAgICB0aGlzLl9wYXJlbnRTZWxlY3RvciA9IHBhcmVudFNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuX2luZm8gPSBpbmZvO1xyXG5cclxuICAgICAgICB0aGlzLl9pbml0KCk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fcGFyZW50U2VsZWN0b3IpLmFwcGVuZENoaWxkKHRoaXMuX2NvbXBvbmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5faW5pdExpc3RlbmVycyh0aGlzLl9pbmZvLmxpc3RlbmVycyk7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXRMaXN0ZW5lcnMobGlzdGVuZXJzKSB7XHJcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcihsaXN0ZW5lci50eXBlLCBsaXN0ZW5lci5hY3Rpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2Jhc2UoaW5mbykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndGhlIG1ldGhvZCBmaWVsZHNUZW1wYWx0ZSBtdXN0IGJlIGltcGxlbWVudGVkJyk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBET01QYXJzZXJVdGlsIHtcclxuICAgIHN0YXRpYyBwYXJzZShodG1sVGV4dCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGh0bWxUZXh0LCAndGV4dC9odG1sJykuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYGJvZHlgKS5maXJzdENoaWxkO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdGVuZXJBY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IodHlwZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5fYWN0aW9uID0gYWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBhY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbjtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1dHRvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihsYWJlbCwgY3NzLCB0eXBlPSdzdWJtaXQnLCAuLi5saXN0ZW5lcnMpIHtcclxuICAgICAgICBsZXQgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBidG4uY2xhc3NMaXN0ID0gY3NzO1xyXG4gICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCB0eXBlKTtcclxuICAgICAgICBidG4uaW5uZXJIVE1MID0gbGFiZWw7XHJcblxyXG4gICAgICAgIGlmIChsaXN0ZW5lcnMpIGxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGJ0bi5hZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyLnR5cGUsIGxpc3RlbmVyLmFjdGlvbikpO1xyXG5cclxuICAgICAgICByZXR1cm4gYnRuO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IEZpZWxkRXJyb3IgZnJvbSBcIi4uL2Zvcm1zL0ZpZWxkRXJyb3JcIjtcclxuaW1wb3J0IEF1dGhlbnRpY2F0aW9uVG9rZW5TZXJ2aWNlIGZyb20gXCIuLi9zZXJ2aWNlcy9BdXRoZW50aWNhdGlvblRva2VuU2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHR0cEhlbHBlciB7XHJcbiAgICBhZGRUb2tlbih0eXBlLCB0b2tlbikge1xyXG4gICAgICAgIGxldCBkYXRhID0gYCR7dHlwZX0gJHt0b2tlbn1gO1xyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbXNhbG9vbndidG9rZW4nLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9yZUl0ZW0obGFiZWwsIHZhbHVlKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGxhYmVsLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW5Ub2tlbigpIHtcclxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21zYWxvb253YnRva2VuJywgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRva2VuKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21zYWxvb253YnRva2VuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RvcmVkSXRlbShsYWJlbCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0obGFiZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvc3QoZW5kcG9pbnQsIGRhdGEpIHtcclxuICAgICAgICBsZXQgdHJhbnNhY3Rpb25EZXRhaWxzID0gdGhpcy5fYnVpbGRUcmFuc2FjdGlvbkRldGFpbHMoJ1BPU1QnLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRGZXRjaFRyYW5zYWN0aW9uKGVuZHBvaW50LCB0cmFuc2FjdGlvbkRldGFpbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChlbmRwb2ludCkge1xyXG4gICAgICAgIGxldCB0cmFuc2FjdGlvbkRldGFpbHMgPSB0aGlzLl9idWlsZFRyYW5zYWN0aW9uRGV0YWlscygnR0VUJywgbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkRmV0Y2hUcmFuc2FjdGlvbihlbmRwb2ludCwgdHJhbnNhY3Rpb25EZXRhaWxzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdXQoZW5kcG9pbnQsIGRhdGEpIHtcclxuICAgICAgICBsZXQgdHJhbnNhY3Rpb25EZXRhaWxzID0gdGhpcy5fYnVpbGRUcmFuc2FjdGlvbkRldGFpbHMoJ1BVVCcsIGRhdGEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWlsZEZldGNoVHJhbnNhY3Rpb24oZW5kcG9pbnQsIHRyYW5zYWN0aW9uRGV0YWlscyk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlKGVuZHBvaW50KSB7XHJcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9uRGV0YWlscyA9IHRoaXMuX2J1aWxkVHJhbnNhY3Rpb25EZXRhaWxzKCdERUxFVEUnLCBudWxsKTtcclxuICAgICAgICByZXR1cm4gZmV0Y2goZW5kcG9pbnQsIHRyYW5zYWN0aW9uRGV0YWlscylcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgdHJhbnNhY3Rpb25hbCBlcnJvciBoYXMgYmVlbiBoYXBwZW5lZC4nKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2J1aWxkVHJhbnNhY3Rpb25IZWFkZXJzKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnQXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdGhpcy50b2tlblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9idWlsZFRyYW5zYWN0aW9uRGV0YWlscyhtZXRob2QsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnbWV0aG9kJzogbWV0aG9kLFxyXG4gICAgICAgICAgICAnYm9keSc6IGRhdGEsXHJcbiAgICAgICAgICAgICdoZWFkZXJzJzogdGhpcy5fYnVpbGRUcmFuc2FjdGlvbkhlYWRlcnMoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfYnVpbGRGZXRjaFRyYW5zYWN0aW9uKGVuZHBvaW50LCB0cmFuc2FjdGlvbkRldGFpbHMpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goZW5kcG9pbnQsIHRyYW5zYWN0aW9uRGV0YWlscylcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKS50aGVuKGRhdGEgPT4gIGRhdGEpLmNhdGNoKGVyciA9PiB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIHRyYW5zYWN0aW9uYWwgZXJyb3IgaGFzIGJlZW4gaGFwcGVuZWQuJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiLi9Db21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm0gZXh0ZW5kcyBDb21wb25lbnR7XHJcbiAgICAgLyogXHJcbiAgICAgICAgSW5mbyB7XHJcbiAgICAgICAgICAgIFwiaWRcIjogZm9ybSBpZCBhdHRyaWJ1dGUsXHJcbiAgICAgICAgICAgIFwiZm9ybUNsYXNzXCI6IGZvcm0gY2xhc3MgZXguICdmb3JtLWhvcml6b250YWwnLFxyXG4gICAgICAgICAgICBcImluaXRpYWxDb250ZW50XCI6IGZvcm0gZmllbGRzLFxyXG4gICAgICAgICAgICBcImJ1dHRvbnNcIjogdHJ1ZS9mYWxzZSBmb3IgZm9ybSBidXR0b25zLFxyXG4gICAgICAgICAgICBcImluaXRpYWxCdXR0b25zXCI6IGZvciBpbml0aWFsIGJ1dHRvbnMgY29udGVudCxcclxuICAgICAgICAgICAgXCJkZWZhdWx0QnV0dG9uc1wiOiB0cnVlL2ZhbHNlIGZvciBkZWZhdWx0IGJ1dHRvbnMsXHJcbiAgICAgICAgICAgIFwibGlzdGVuZXJzXCI6IGxpc3RlbmVycyBmb3IgZm9ybSBhY3Rpb25zXHJcbiAgICAgICAgfVxyXG4gICAgKi9cclxuICAgIHVwZGF0ZUZpZWxkcygpIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuX3RhZ30gLmZpZWxkc2ApLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fdGFnfSAuZmllbGRzYCkuYXBwZW5kQ2hpbGQodGhpcy5fdGVtcGxhdGUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VibWl0KCkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fdGFnKS5zdWJtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3RhZykucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICAgIGxldCBkYXRhID0gW107XHJcbiAgICAgICAgJCh0aGlzLl90YWcpLnNlcmlhbGl6ZUFycmF5KCkuZm9yRWFjaChpbnB1dCA9PiB7XHJcbiAgICAgICAgICAgIGRhdGFbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhQXNQYXJhbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuICQodGhpcy5fdGFnKS5zZXJpYWxpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdCgpIHtcclxuICAgICAgICBzdXBlci5faW5pdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faW5mby5pbml0aWFsQ29udGVudCkgXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudC5xdWVyeVNlbGVjdG9yKFwiLmZpZWxkc1wiKS5hcHBlbmRDaGlsZCh0aGlzLl9pbmZvLmluaXRpYWxDb250ZW50KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2luZm8uYnV0dG9ucyAmJiB0aGlzLl9pbmZvLmluaXRpYWxCdXR0b25zKVxyXG4gICAgICAgICAgICB0aGlzLl9pbmZvLmluaXRpYWxCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnV0dG9uc1wiKS5hcHBlbmRDaGlsZChidXR0b24pKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgX2Jhc2UoaW5mbykge1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgPGZvcm0gaWQ9JHtpbmZvLmlkfSAke2luZm8uZm9ybUNsYXNzID8gYGNsYXNzPScke2luZm8uZm9ybUNsYXNzfSdgIDogJyd9PlxyXG4gICAgICAgICAgIDxkaXYgY2xhc3M9J2ZpZWxkcyc+PC9kaXY+XHJcbiAgICAgICAgICAgPGRpdiBjbGFzcz0nYnV0dG9ucyc+XHJcbiAgICAgICAgICAgICAgICAke2luZm8uZGVmYXVsdEJ1dHRvbnMgPyBgXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPlNhbHZhcjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwicmVzZXRcIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCI+TGltcGFyPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICBgIDogJyd9XHJcbiAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcblxyXG4gICAgX3RlbXBsYXRlKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndGhlIG1ldGhvZCBmaWVsZHNUZW1wYWx0ZSBtdXN0IGJlIGltcGxlbWVudGVkJyk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgRE9NUGFyc2VyVXRpbCBmcm9tIFwiLi4vaGVscGVycy9ET01QYXJzZXJVdGlsXCI7XHJcbmltcG9ydCBDb21wb25lbnQgZnJvbSBcIi4vQ29tcG9uZW50XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIENvbXBvbmVudHtcclxuICAgIC8qIFxyXG4gICAgICAgIEluZm8ge1xyXG4gICAgICAgICAgICBcImlkXCI6IG1vZGFsIGlkIGF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgXCJsYWJlbFwiOiBtb2RhbCBhcmlhLWxhYmVsbGVkYnkgYXR0cmlidXRlLFxyXG4gICAgICAgICAgICBcIm1vZGFsQ2xhc3NcIjogbW9kYWwgY2xhc3MgZXguICdtb2RhbC1sZycsXHJcbiAgICAgICAgICAgIFwidGl0bGVcIjogbW9kYWwgdGl0bGUsXHJcbiAgICAgICAgICAgIFwiaW5pdGlhbENvbnRlbnRcIjogbW9kYWwgYm9keSxcclxuICAgICAgICAgICAgXCJmb290ZXJcIjogdHJ1ZS9mYWxzZSBmb3IgbW9kYWwgZm9vdGVyLFxyXG4gICAgICAgICAgICBcImluaXRpYWxGb290ZXJcIjogZm9yIGluaXRpYWwgZm9vdGVyIGNvbnRlbnQsXHJcbiAgICAgICAgICAgIFwibGlzdGVuZXJzXCI6IGxpc3RlbmVycyBmb3IgbW9kYWwgYWN0aW9uc1xyXG4gICAgICAgIH1cclxuICAgICovXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgICQodGhpcy5fdGFnKS5tb2RhbCgnc2hvdycpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgJCh0aGlzLl90YWcpLm1vZGFsKCdoaWRlJylcclxuICAgIH1cclxuXHJcblxyXG4gICAgdXBkYXRlQ29udGVudChjb250ZW50KSB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLl90YWd9IC5tb2RhbC1ib2R5YCkuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLl90YWd9IC5tb2RhbC1ib2R5YCkuYXBwZW5kQ2hpbGQoY29udGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW5Db250ZW50KCkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fdGFnfSAubW9kYWwtYm9keWApLmlubmVySFRNTCA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUNvbnRlbnRUZXh0KGNvbnRlbnQpIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuX3RhZ30gLm1vZGFsLWJvZHlgKS5pbm5lckhUTUwgPSAnPHByZT4nICsgY29udGVudCArICc8L3ByZT4nO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUZvb3Rlcihmb290ZXIpIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuX3RhZ30gLm1vZGFsLWZvb3RlcmApLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fdGFnfSAubW9kYWwtZm9vdGVyYCkuYXBwZW5kQ2hpbGQoZm9vdGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhbkZvb3RlcigpIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuX3RhZ30gLm1vZGFsLWZvb3RlcmApLmlubmVySFRNTCA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb250ZW50U2VsZWN0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuX3RhZ30gLm1vZGFsLWJvZHlgO1xyXG4gICAgfVxyXG5cclxuICAgIF9pbml0KCkge1xyXG4gICAgICAgIHN1cGVyLl9pbml0KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pbmZvLmluaXRpYWxDb250ZW50KSBcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtYm9keVwiKS5hcHBlbmRDaGlsZCh0aGlzLl9pbmZvLmluaXRpYWxDb250ZW50KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2luZm8uZm9vdGVyICYmIHRoaXMuX2luZm8uaW5pdGlhbEZvb3RlcilcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtZm9vdGVyXCIpLmFwcGVuZENoaWxkKHRoaXMuX2luZm8uaW5pdGlhbEZvb3Rlcik7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXRMaXN0ZW5lcnMobGlzdGVuZXJzKSB7XHJcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMuX2NvbXBvbmVudCkub24obGlzdGVuZXIudHlwZSwgbGlzdGVuZXIuYWN0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9iYXNlKGluZm8pIHtcclxuICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgIDxkaXYgaWQ9XCIke2luZm8uaWR9XCIgY2xhc3M9XCJtb2RhbCBmYWRlXCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIiBhcmlhLWxhYmVsbGVkYnk9XCIke2luZm8ubGFiZWwgPyBpbmZvLmxhYmVsIDogJ215TGFyZ2VNb2RhbCd9XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgJHtpbmZvLm1vZGFsQ2xhc3MgPyBpbmZvLm1vZGFsQ2xhc3MgOiAnJ31cIiByb2xlPVwiZG9jdW1lbnRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiPiR7aW5mby50aXRsZX08L2g1PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAke2luZm8uZm9vdGVyID8gYFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgYCA6ICcnfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgSHR0cEhlbHBlciBmcm9tIFwiLi4vaGVscGVycy9IdHRwSGVscGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoZW50aWNhdGlvblRva2VuU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9zZXJ2ZXJVUkwgPSBgJHtTRVJWSUNFX1VSTH0vYXV0aGA7XHJcbiAgICAgICAgdGhpcy5fd2VidG9rZW4gPSAnbXNhbG9vbndidG9rZW4nO1xyXG5cclxuICAgICAgICB0aGlzLl9odHRwID0gbmV3IEh0dHBIZWxwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBoYXNWYWxpZFRva2VuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLl9zZXJ2ZXJVUkwpO1xyXG4gICAgfVxyXG5cclxuICAgIGF1dGhlbnRpY2F0ZShhdXRoRFRPKSB7XHJcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9uRGV0YWlscyA9IHtcclxuICAgICAgICAgICAgJ21ldGhvZCc6ICdQT1NUJyxcclxuICAgICAgICAgICAgJ2JvZHknOiBKU09OLnN0cmluZ2lmeShhdXRoRFRPKSxcclxuICAgICAgICAgICAgJ2hlYWRlcnMnOiB7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ0FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmZXRjaCh0aGlzLl9zZXJ2ZXJVUkwsIHRyYW5zYWN0aW9uRGV0YWlscylcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMub2sgJiYgcmVzLnN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBzaWduaW4gZGF0YSBpcyBub3QgY29ycmVjdFwiKTtcclxuICAgICAgICAgICAgfSkudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h0dHAuYWRkVG9rZW4oZGF0YS50eXBlLCBkYXRhLnRva2VuKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nb3V0KCkge1xyXG4gICAgICAgIHRoaXMuX2h0dHAuY2xlYW5Ub2tlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZGlyZWN0VG9Mb2dpblBhZ2UoKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2xvZ2luLmh0bWwnXHJcbiAgICB9ICBcclxuXHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RlbCB7XHJcbiAgICBlcXVhbHMob3RoZXIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlcXVhbHMgbWV0aG9kIG11c3QgYmUgaW1wbGVtZW50ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBlcXVhbHNGb3IoYXR0cmlidXRlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZXF1YWxzRm9yIG1ldGhvZCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcm94eUZhY3Rvcnkge1xyXG4gICAgc3RhdGljIGNyZWF0ZShvYmplY3QsIHByb3BzLCBhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KG9iamVjdCwge1xyXG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmluY2x1ZGVzKHByb3ApICYmIFByb3h5RmFjdG9yeS5faXNGdW50aW9uKHRhcmdldFtwcm9wXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBSZWZsZWN0LmFwcGx5KHRhcmdldFtwcm9wXSwgdGFyZ2V0LCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24odGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmluY2x1ZGVzKHByb3ApKSBhY3Rpb24odGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBfaXNGdW50aW9uKGZ1bmMpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mKGZ1bmMpID09IHR5cGVvZihGdW5jdGlvbik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuL0NvbXBvbmVudFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGFzaGJvYXJkTmF2aWdhdGlvbiBleHRlbmRzIENvbXBvbmVudHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHBhcmVudFNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBfYmFzZShpbmZvKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8bmF2IGNsYXNzPVwic2lkZWJhclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNpZGViYXItc3RpY2t5XCI+XHJcbiAgICAgICAgICAgIDx1bCBjbGFzcz1cIm5hdiBmbGV4LWNvbHVtblwiPlxyXG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rIGFjdGl2ZVwiIGhyZWY9XCIuL3NjaGVkdWxlLmh0bWxcIj5cclxuICAgICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGNsYXNzPVwiZmVhdGhlciBmZWF0aGVyLWhvbWVcIj48cGF0aCBkPVwiTTMgOWw5LTcgOSA3djExYTIgMiAwIDAgMS0yIDJINWEyIDIgMCAwIDEtMi0yelwiPjwvcGF0aD48cG9seWxpbmUgcG9pbnRzPVwiOSAyMiA5IDEyIDE1IDEyIDE1IDIyXCI+PC9wb2x5bGluZT48L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgRGFzaGJvYXJkIDxzcGFuIGNsYXNzPVwic3Itb25seVwiPihjdXJyZW50KTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaHJlZj1cIi4vY3VzdG9tZXJzLmh0bWxcIj5cclxuICAgICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGNsYXNzPVwiZmVhdGhlciBmZWF0aGVyLXVzZXJzXCI+PHBhdGggZD1cIk0xNyAyMXYtMmE0IDQgMCAwIDAtNC00SDVhNCA0IDAgMCAwLTQgNHYyXCI+PC9wYXRoPjxjaXJjbGUgY3g9XCI5XCIgY3k9XCI3XCIgcj1cIjRcIj48L2NpcmNsZT48cGF0aCBkPVwiTTIzIDIxdi0yYTQgNCAwIDAgMC0zLTMuODdcIj48L3BhdGg+PHBhdGggZD1cIk0xNiAzLjEzYTQgNCAwIDAgMSAwIDcuNzVcIj48L3BhdGg+PC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgIENsaWVudGVzXHJcbiAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIGhyZWY9XCIuL3Byb2Zlc3Npb25hbHMuaHRtbFwiPlxyXG4gICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJmZWF0aGVyIGZlYXRoZXItZmlsZVwiPjxwYXRoIGQ9XCJNMTMgMkg2YTIgMiAwIDAgMC0yIDJ2MTZhMiAyIDAgMCAwIDIgMmgxMmEyIDIgMCAwIDAgMi0yVjl6XCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XCIxMyAyIDEzIDkgMjAgOVwiPjwvcG9seWxpbmU+PC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgIFByb2Zpc3Npb25haXNcclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaHJlZj1cIi4vdmVuZG9ycy5odG1sXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBjbGFzcz1cImZlYXRoZXIgZmVhdGhlci1maWxlXCI+PHBhdGggZD1cIk0xMyAySDZhMiAyIDAgMCAwLTIgMnYxNmEyIDIgMCAwIDAgMiAyaDEyYTIgMiAwIDAgMCAyLTJWOXpcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cIjEzIDIgMTMgOSAyMCA5XCI+PC9wb2x5bGluZT48L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgRm9ybmVjZWRvcmVzXHJcbiAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIGhyZWY9XCIuL3B1cmNoYXNlcy5odG1sXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBjbGFzcz1cImZlYXRoZXIgZmVhdGhlci1maWxlXCI+PHBhdGggZD1cIk0xMyAySDZhMiAyIDAgMCAwLTIgMnYxNmEyIDIgMCAwIDAgMiAyaDEyYTIgMiAwIDAgMCAyLTJWOXpcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cIjEzIDIgMTMgOSAyMCA5XCI+PC9wb2x5bGluZT48L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgQ29tcHJhc1xyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2LWxpbmtcIiBocmVmPVwiLi9hcHBvaW50bWVudHMuaHRtbFwiPlxyXG4gICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJmZWF0aGVyIGZlYXRoZXItZmlsZVwiPjxwYXRoIGQ9XCJNMTMgMkg2YTIgMiAwIDAgMC0yIDJ2MTZhMiAyIDAgMCAwIDIgMmgxMmEyIDIgMCAwIDAgMi0yVjl6XCI+PC9wYXRoPjxwb2x5bGluZSBwb2ludHM9XCIxMyAyIDEzIDkgMjAgOVwiPjwvcG9seWxpbmU+PC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgIEF0ZW5kaW1lbnRvcyAoQ29uc3VsdGFzKVxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICBcclxuICAgICAgICAgICAgPGg2IGNsYXNzPVwic2lkZWJhci1oZWFkaW5nIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIgcHgtMyBtdC00IG1iLTEgdGV4dC1tdXRlZFwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuPk1pbmhhIENvbnRhPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2g2PlxyXG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJuYXYgZmxleC1jb2x1bW4gbWItMlwiPlxyXG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaHJlZj1cIi4vcHJvZmlsZS5odG1sXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBjbGFzcz1cImZlYXRoZXIgZmVhdGhlci1maWxlLXRleHRcIj48cGF0aCBkPVwiTTE0IDJINmEyIDIgMCAwIDAtMiAydjE2YTIgMiAwIDAgMCAyIDJoMTJhMiAyIDAgMCAwIDItMlY4elwiPjwvcGF0aD48cG9seWxpbmUgcG9pbnRzPVwiMTQgMiAxNCA4IDIwIDhcIj48L3BvbHlsaW5lPjxsaW5lIHgxPVwiMTZcIiB5MT1cIjEzXCIgeDI9XCI4XCIgeTI9XCIxM1wiPjwvbGluZT48bGluZSB4MT1cIjE2XCIgeTE9XCIxN1wiIHgyPVwiOFwiIHkyPVwiMTdcIj48L2xpbmU+PHBvbHlsaW5lIHBvaW50cz1cIjEwIDkgOSA5IDggOVwiPjwvcG9seWxpbmU+PC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgIE1ldSBQZXJmaWxcclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9uYXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiLi9Db21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlck5hdmlnYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocGFyZW50U2VsZWN0b3IsIGxvZ29mZkFjdGlvbikge1xyXG4gICAgICAgIHN1cGVyKHBhcmVudFNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgdGhpcy5faW5pdEhlYWRlck5hdmlnYXRpb24obG9nb2ZmQWN0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdEhlYWRlck5hdmlnYXRpb24obG9nb2ZmQWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50LnF1ZXJ5U2VsZWN0b3IoJ2EubG9nb3V0JykuYWRkRXZlbnRMaXN0ZW5lcihsb2dvZmZBY3Rpb24udHlwZSwgbG9nb2ZmQWN0aW9uLmFjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgX2Jhc2UoaW5mbykge1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgPG5hdiBjbGFzcz1cIm5hdmJhciBuYXZiYXItZGFyayBmaXhlZC10b3AgYmctZGFyayBmbGV4LW1kLW5vd3JhcCBwLTAgc2hhZG93XCI+XHJcbiAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2YmFyLWJyYW5kIGNvbC1zbS0zIGNvbC1tZC0yIG1yLTBcIiBocmVmPVwiI1wiPk15IFNhbG9vbiBXZWI8L2E+XHJcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtZGFyayB3LTEwMFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJQZXNxdWlzYXJcIiBhcmlhLWxhYmVsPVwiUGVzcXVpc2FyXCI+XHJcbiAgICAgICAgICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgcHgtM1wiPlxyXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW0gdGV4dC1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2LWxpbmsgbG9nb3V0XCIgaHJlZj1cIiNcIj5Mb2dvZmY8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvbmF2PlxyXG4gICAgICAgIGBcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuL0NvbXBvbmVudFwiO1xyXG5pbXBvcnQgRE9NUGFyc2VyVXRpbCBmcm9tIFwiLi4vaGVscGVycy9ET01QYXJzZXJVdGlsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVMb2FkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJyNoZWFkZXJOYXZpZ2F0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5faW5pdExvYWRlckNvbXBvbmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudC5hcHBlbmRDaGlsZCh0aGlzLl9sb2FkZXJDb21wb25lbnQpO1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudC5jbGFzc0xpc3QuYWRkKCdwcmUtbG9hZGVyLXJ1bm5pbmcnKTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9wKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICB0aGlzLl9jb21wb25lbnQuY2xhc3NMaXN0LnJlbW92ZSgncHJlLWxvYWRlci1ydW5uaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcnVuKHByb21pc3NlKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgIHByb21pc3NlLnRoZW4oKCkgPT4ge3RoaXMuc3RvcCgpfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXRMb2FkZXJDb21wb25lbnQoKSB7XHJcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkZXItcGFuZWxcIj5cclxuICAgICAgICAgICAgPGRpdiBpZD1cImxvYWRlcjRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibG9hZGVyIGxvYWRlci0xXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsb2FkZXIgbG9hZGVyLTJcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxvYWRlciBsb2FkZXItM1wiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibG9hZGVyIGxvYWRlci00XCI+PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICB0aGlzLl9sb2FkZXJDb21wb25lbnQgPSBET01QYXJzZXJVdGlsLnBhcnNlKHRlbXBsYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBfYmFzZSgpIHtcclxuICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiBpZD1cInByZUxvYWRlclwiPlxyXG4gICAgICAgICAgICBcclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBEYXNoYm9hcmROYXZpZ2F0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvRGFzaGJvYXJkTmF2aWdhdGlvbic7XHJcbmltcG9ydCBIZWFkZXJOYXZpZ2F0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvSGVhZGVyTmF2aWdhdGlvbic7XHJcbmltcG9ydCBMaXN0ZW5lckFjdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL0xpc3RlbmVyQWN0aW9uJztcclxuaW1wb3J0IEF1dGhlbnRpY2F0aW9uVG9rZW5TZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL0F1dGhlbnRpY2F0aW9uVG9rZW5TZXJ2aWNlJztcclxuaW1wb3J0IFByZUxvYWRlciBmcm9tICcuLi9jb21wb25lbnRzL1ByZUxvYWRlcic7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVmYXVsdERhc2hib2FyZENvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fcHJlTG9hZGVyID0gbmV3IFByZUxvYWRlcigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX2F1dGhTZXJ2aWNlID0gbmV3IEF1dGhlbnRpY2F0aW9uVG9rZW5TZXJ2aWNlKCk7XHJcbiAgICAgICAgdGhpcy5fdmFsaWRBdXRoZW50aWNhdGVkQ2xpZW50KCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2hlYWRlck5hdiA9IG5ldyBIZWFkZXJOYXZpZ2F0aW9uKCcjaGVhZGVyTmF2aWdhdGlvbicsIG5ldyBMaXN0ZW5lckFjdGlvbignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9Mb2dvZmYoKTtcclxuICAgICAgICB9KSk7ICAgICAgICBcclxuXHJcbiAgICAgICAgdGhpcy5fZGFzaGJvYXJkTmF2ID0gbmV3IERhc2hib2FyZE5hdmlnYXRpb24oJyNkYXNoYm9hcmROYXZpZ2F0aW9uJyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2luaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBkb0xvZ29mZigpIHtcclxuICAgICAgICB0aGlzLl9hdXRoU2VydmljZS5sb2dvdXQoKTtcclxuICAgICAgICB0aGlzLl9hdXRoU2VydmljZS5yZWRpcmVjdFRvTG9naW5QYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXQoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGUgX2luaXQoKSBtZXRob2QgbXVzdCBiZSBpbXBsZW1lbnRlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIF92YWxpZEF1dGhlbnRpY2F0ZWRDbGllbnQoKSB7XHJcbiAgICAgICAgdGhpcy5fYXV0aFNlcnZpY2UuaGFzVmFsaWRUb2tlbigpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7dGhpcy5fYXV0aFNlcnZpY2UucmVkaXJlY3RUb0xvZ2luUGFnZSgpfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgTW9kZWwgZnJvbSBcIi4vTW9kZWxcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2Zlc3Npb25hbCBleHRlbmRzIE1vZGVse1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgcmVzaWRlbmNpYWxQaG9uZSwgY2VsbHBob25lLCBkZXBhcnRhbWVudCwgZW1haWwsIGlkPScnKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9yZXNpZGVuY2lhbFBob25lID0gcmVzaWRlbmNpYWxQaG9uZTtcclxuICAgICAgICB0aGlzLl9jZWxscGhvbmUgPSBjZWxscGhvbmU7XHJcbiAgICAgICAgdGhpcy5fZGVwYXJ0YW1lbnQgPSBkZXBhcnRhbWVudDtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuX2VtYWlsID0gZW1haWw7XHJcbiAgICB9XHJcblxyXG4gICAgZXF1YWxzKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkID09IG90aGVyLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIGVxdWFsc0ZvcihpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZCA9PSBpZDsgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlc2lkZW5jaWFsUGhvbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2lkZW5jaWFsUGhvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNlbGxwaG9uZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2VsbHBob25lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBkZXBhcnRhbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVwYXJ0YW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGVtYWlsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbWFpbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFByb3h5IGZyb20gJy4vUHJveHlGYWN0b3J5J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZFByb3h5TW9kZWxWaWV3IHtcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsLCB2aWV3LCAuLi5wcm9wcykge1xyXG4gICAgICAgIGxldCBwcm94eSA9IFByb3h5LmNyZWF0ZShtb2RlbCwgcHJvcHMsIG1vZGVsID0+IHZpZXcudXBkYXRlKG1vZGVsKSk7XHJcbiAgICAgICAgdmlldy51cGRhdGUobW9kZWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJveHk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBbGVydE1lc3NhZ2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGUgPSAnJztcclxuICAgICAgICB0aGlzLl9tZXNzYWdlID0gJyc7XHJcbiAgICAgICAgdGhpcy5fdHlwZSA9ICdwcmltYXJ5JztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUobWVzc2FnZSwgdGl0bGU9JycsIGFsZXJ0VHlwZT0ncHJpbWFyeScpIHtcclxuICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuX21lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIHRoaXMuX3R5cGUgPSBhbGVydFR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRpdGxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWVzc2FnZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWVzc2FnZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcclxuICAgIH1cclxufSIsImltcG9ydCBNb2RlbFZpZXcgZnJvbSBcIi4vTW9kZWxWaWV3XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbGVydE1lc3NhZ2VWaWV3IGV4dGVuZHMgTW9kZWxWaWV3e1xyXG4gICAgX3RlbXBsYXRlKG1vZGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtJHttb2RlbC50eXBlfSBhbGVydC1kaXNtaXNzaWJsZSBmYWRlIHNob3dcIiByb2xlPVwiYWxlcnRcIj5cclxuICAgICAgICAgICAgPGg0IGNsYXNzPVwiYWxlcnQtaGVhZGluZ1wiPiR7bW9kZWwudGl0bGV9PC9oND5cclxuICAgICAgICAgICAgPHAgY2xhc3M9J3RleHQtbXV0ZWQnPiR7bW9kZWwubWVzc2FnZX08L3A+XHJcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJhbGVydFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsVmlldyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2aWV3RWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB2aWV3RWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBfdGVtcGxhdGUobW9kZWwpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIG1ldGhvZCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKG1vZGVsKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl90ZW1wbGF0ZShtb2RlbCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUHJvZmVzc2lvbmFsIGZyb20gXCIuLi9tb2RlbHMvUHJvZmVzc2lvbmFsXCI7XHJcbmltcG9ydCBGaWVsZEVycm9yIGZyb20gXCIuLi9mb3Jtcy9GaWVsZEVycm9yXCI7XHJcbmltcG9ydCBIdHRwSGVscGVyIGZyb20gXCIuLi9oZWxwZXJzL0h0dHBIZWxwZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2Zlc3Npb25hbFNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fc2VydmVyVVJMID0gYCR7U0VSVklDRV9VUkx9L3Byb2Zlc3Npb25hbHNgO1xyXG4gICAgICAgIHRoaXMuX2h0dHAgPSBuZXcgSHR0cEhlbHBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFsbFByb2Zlc3Npb25hbHMoKSB7XHJcbiAgICAgICAgbGV0IGVuZHBvaW50ID0gdGhpcy5fc2VydmVyVVJMO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldChlbmRwb2ludClcclxuICAgICAgICAgICAgLnRoZW4oZGF0YUFycmF5ID0+IGRhdGFBcnJheS5tYXAoZGF0YSA9PiB0aGlzLl9nZXRQcm9mZXNzaW9uYWxGcm9tRGF0YShkYXRhKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb2Zlc3Npb25hbEJ5SUQoaWQpIHtcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBgJHt0aGlzLl9zZXJ2ZXJVUkx9LyR7aWR9YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQoZW5kcG9pbnQpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4gdGhpcy5fZ2V0UHJvZmVzc2lvbmFsRnJvbURhdGEoZGF0YSkpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09jb3JyZXUgdW0gZXJyb3IgbmEgY29tdW5pw6fDo28gY29tIG8gc2Vydmlkb3IgZSBuw6NvIGZvaSBwb3NzaXZlbCBlbmNvbnRyYXIgbyBwcm9maXNzaW9uYWwgc29saWNpdGFkbycpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQcm9mZXNzaW9uYWwocHJvZmVzc2lvbmFsRHRvKSB7XHJcbiAgICAgICAgbGV0IGVuZHBvaW50ID0gdGhpcy5fc2VydmVyVVJMO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3QoZW5kcG9pbnQsIEpTT04uc3RyaW5naWZ5KHByb2Zlc3Npb25hbER0bykpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4gdGhpcy5fZ2V0UHJvZmVzc2lvbmFsRnJvbURhdGEoZGF0YSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVByb2Zlc3Npb25hbChwcm9mZXNzaW9uYWxEdG8pIHtcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBgJHt0aGlzLl9zZXJ2ZXJVUkx9LyR7cHJvZmVzc2lvbmFsRHRvLmlkfWA7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLnB1dChlbmRwb2ludCwgSlNPTi5zdHJpbmdpZnkocHJvZmVzc2lvbmFsRHRvKSlcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB0aGlzLl9nZXRQcm9mZXNzaW9uYWxGcm9tRGF0YShkYXRhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgZGV0ZWxlUHJvZmVzc2lvbmFsKGlkKSB7XHJcbiAgICAgICAgbGV0IGVuZHBvaW50ID0gYCR7dGhpcy5fc2VydmVyVVJMfS8ke2lkfWA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZGVsZXRlKGVuZHBvaW50KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9mZXNzaW9uYWxCeUVtYWlsKGVtYWlsKSB7XHJcbiAgICAgICAgbGV0IGVuZHBvaW50ID0gYCR7dGhpcy5fc2VydmVyVVJMfS9lbWFpbC8ke2VtYWlsfWA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KGVuZHBvaW50KVxyXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHRoaXMuX2dldFByb2Zlc3Npb25hbEZyb21EYXRhKGRhdGEpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN0b3JlUGFzc3dvcmQoZW1haWwpIHtcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBgJHtTRVJWSUNFX1VSTH0vYWNjb3VudHMvcmVzdG9yZWA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdChlbmRwb2ludCwgSlNPTi5zdHJpbmdpZnkoeydlbWFpbCc6IGVtYWlsfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0UGFzc3dvcmQocGFzc3dvcmQpIHtcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBgJHtTRVJWSUNFX1VSTH0vYWNjb3VudHMvcmVzZXRgO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3QoZW5kcG9pbnQsIEpTT04uc3RyaW5naWZ5KHsncGFzc3dvcmQnOiBwYXNzd29yZH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0UHJvZmVzc2lvbmFsRnJvbURhdGEoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvZmVzc2lvbmFsKGRhdGFbJ25hbWUnXSwgZGF0YVsncmVzaWRlbmNpYWxQaG9uZSddLCBkYXRhWydjZWxscGhvbmUnXSwgZGF0YVsnZGVwYXJ0bWVudCddLCBkYXRhWydlbWFpbCddLCBkYXRhWydpZCddKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsTGlzdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9saXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5fcGFnZWFibGVJbmZvID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFuKCkge1xyXG4gICAgICAgIHRoaXMuX2xpc3QgPSBbXTtcclxuICAgICAgICB0aGlzLl9wYWdlYWJsZUluZm8gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkKG1vZGVsKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xpc3Quc29tZShpdGVtID0+IGl0ZW0uZXF1YWxzKG1vZGVsKSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbGlzdC5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5lcXVhbHMobW9kZWwpKSB0aGlzLl9saXN0W2ldID0gbW9kZWw7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3QucHVzaChtb2RlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpbmQoaWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5maW5kKGl0ZW0gPT4gaXRlbS5lcXVhbHNGb3IoaWQpKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVQYWdlYWJsZUluZm8ocGFnZWFibGUpIHtcclxuICAgICAgICB0aGlzLl9wYWdlYWJsZUluZm8gPSBwYWdlYWJsZTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUoaWQpIHtcclxuICAgICAgICB0aGlzLl9saXN0LmZvckVhY2goKGl0ZW0sIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uZXF1YWxzRm9yKGlkKSkgdGhpcy5fbGlzdC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGxpc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhZ2VhYmxlSW5mbygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFnZWFibGVJbmZvO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL0NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBfdXBkYXRlTGlzdCh0ckxpc3QpIHtcclxuICAgICAgICBsZXQgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fdGFnfSB0Ym9keWApO1xyXG4gICAgICAgIGJvZHkuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgdHJMaXN0LmZvckVhY2godHIgPT4gYm9keS5hcHBlbmRDaGlsZCh0cikpO1xyXG4gICAgfVxyXG5cclxuICAgIF9hcHBlbmRJdGVtKHRyKSB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLl90YWd9IHRib2R5YCkuYXBwZW5kQ2hpbGQodHIpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhblRhYmxlKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fdGFnfSB0Ym9keWApLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgX3JlbW92ZUxpbmUoa2V5KSB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLl90YWd9IHRib2R5IHRyW2RhdGEta2V5PVwiJHtrZXl9XCJdYCkucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3VwZGF0ZUxpbmUoa2V5LCB0cikge1xyXG4gICAgICAgIGxldCBsaW5lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLl90YWd9IHRib2R5IHRyW2RhdGEta2V5PVwiJHtrZXl9XCJdYCk7XHJcbiAgICAgICAgbGluZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0ciwgbGluZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NyZWF0ZVRhYmxlTGluZShsaW5lS2V5LCBkYXRhLCAuLi5hY3Rpb25zKSB7XHJcbiAgICAgICAgbGV0IGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG4gICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCdkYXRhLWtleScsIGxpbmVLZXkpO1xyXG5cclxuICAgICAgICBkYXRhLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgICAgICAgICBjb2wuaW5uZXJIVE1MID0gcHJvcDtcclxuICAgICAgICAgICAgbGluZS5hcHBlbmRDaGlsZChjb2wpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChhY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgICAgICAgICBhY3Rpb25zLmZvckVhY2goYSA9PiBjb2wuYXBwZW5kQ2hpbGQoYSkpO1xyXG4gICAgICAgICAgICBsaW5lLmFwcGVuZENoaWxkKGNvbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGluZTtcclxuICAgIH1cclxuXHJcbiAgICBfYmFzZShpbmZvKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8dGFibGUgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ob3ZlclwiIGlkPSR7aW5mby5pZH0+XHJcbiAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAke2luZm8uaGVhZGVycy5tYXAodGl0bGUgPT4gYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIj4ke3RpdGxlfTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgYCkuam9pbignJyl9XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAke2luZm8uaW5pdGlhbENvbnRlbnQgPyBpbml0aWFsQ29udGVudCA6ICcnfVxyXG4gICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxufSIsImltcG9ydCBUYWJsZSBmcm9tIFwiLi9UYWJsZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kZWxUYWJsZSBleHRlbmRzIFRhYmxlIHtcclxuICAgIHVwZGF0ZUZyb21Nb2RlbChtb2RlbExpc3QpIHtcclxuICAgICAgICB0aGlzLl9jbGVhblRhYmxlKCk7XHJcbiAgICAgICAgbW9kZWxMaXN0Lmxpc3QuZm9yRWFjaChtb2RlbCA9PiB0aGlzLl9hcHBlbmRJdGVtKHRoaXMuX2NyZWF0ZUxpbmVUYWJsZUZyb21Nb2RlbChtb2RlbCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBfY3JlYXRlTGluZVRhYmxlRnJvbU1vZGVsKG1vZGVsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfY3JlYXRlTGluZVRhYmxlRnJvbU1vZGVsIG11c3QgYmVlbiBpbXBsZW1lbnRlZCcpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IE1vZGFsIGZyb20gXCIuL01vZGFsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25maXJtTW9kYWwgZXh0ZW5kcyBNb2RhbHtcclxuICAgIC8qIFxyXG4gICAgICAgIEluZm8ge1xyXG4gICAgICAgICAgICBcImlkXCI6IG1vZGFsIGlkIGF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgXCJ0aXRsZVwiOiBtb2RhbCB0aXRsZSxcclxuICAgICAgICAgICAgXCJidXR0b25MYWJlbFwiOiBidXR0b24gYWN0aW9uIGZvciBjb25maXJtIGFjdGlvbixcclxuICAgICAgICAgICAgXCJvbkNvbmZpcm1cIjogYWN0aW9uIG9uIGNvbmZpcm07XHJcbiAgICAgICAgICAgIFwibGlzdGVuZXJzXCI6IGxpc3RlbmVycyBmb3IgbW9kYWwgYWN0aW9uc1xyXG4gICAgICAgIH1cclxuICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTZWxlY3RvciwgaW5mbywgcmVtb3ZlQWN0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIocGFyZW50U2VsZWN0b3IsIGluZm8pO1xyXG4gICAgICAgIHRoaXMuX3JlbW92ZUFjdGlvbiA9IHJlbW92ZUFjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdCgpIHtcclxuICAgICAgICBzdXBlci5faW5pdCgpO1xyXG5cclxuICAgICAgICB0aGlzLl9jb21wb25lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLl90YWd9IGZvcm1gKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBldmVudCA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMuX3RhZ30gZm9ybSBpbnB1dFtuYW1lPVwia2V5XCJdYCkudmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUFjdGlvbihrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShtZXNzYWdlLCB2YWx1ZSkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fdGFnfSAubW9kYWwtYm9keSAuYWxlcnRgKS5pbm5lckhUTUwgPSBtZXNzYWdlO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy5fdGFnfSBmb3JtIGlucHV0W25hbWU9XCJrZXlcIl1gKS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBfYmFzZShpbmZvKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGlkPVwiJHtpbmZvLmlkfVwiIGNsYXNzPVwibW9kYWwgZmFkZVwiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtc21cIiByb2xlPVwiZG9jdW1lbnRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+JHtpbmZvLnRpdGxlfTwvaDU+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgcm9sZT1cImFsZXJ0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgJHtpbmZvLm1lc3NhZ2V9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC1tdXRlZFwiPkVzc2EgYcOnw6NvIG7Do28gcG9kZXLDoSBzZXIgZGVzZmVpdGE8L3A+XHJcbiAgICAgICAgICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJrZXlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgYnRuLXNtIGJ0bi1ibG9ja1wiIHR5cGU9XCJzdWJtaXRcIj4ke2luZm8uYnV0dG9uTGFiZWx9PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUHJveHkgZnJvbSAnLi9Qcm94eUZhY3RvcnknXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm94eU1vZGVsQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsLCBjb21wb25lbnQsIC4uLnByb3BzKSB7XHJcbiAgICAgICAgbGV0IHByb3h5ID0gUHJveHkuY3JlYXRlKG1vZGVsLCBwcm9wcywgbW9kZWwgPT4gY29tcG9uZW50LnVwZGF0ZUZyb21Nb2RlbChtb2RlbCkpO1xyXG4gICAgICAgIGNvbXBvbmVudC51cGRhdGVGcm9tTW9kZWwobW9kZWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJveHk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgTW9kZWwgZnJvbSAnLi9Nb2RlbCdcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tZXIgZXh0ZW5kcyBNb2RlbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihmdWxsbmFtZSwgcmVzaWRlbmNpYWxQaG9uZSwgY2VsbHBob25lLCBpbmRpY2F0ZWRCeSwgcHJvZmVzc2lvbmFsRW5nYWdlZCwgaWQ9JycpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX2Z1bGxuYW1lID0gZnVsbG5hbWU7XHJcbiAgICAgICAgdGhpcy5fcmVzaWRlbmNpYWxQaG9uZSA9IHJlc2lkZW5jaWFsUGhvbmU7XHJcbiAgICAgICAgdGhpcy5fY2VsbHBob25lID0gY2VsbHBob25lO1xyXG4gICAgICAgIHRoaXMuX2luZGljYXRlZEJ5ID0gaW5kaWNhdGVkQnk7XHJcbiAgICAgICAgdGhpcy5fcHJvZmVzc2lvbmFsRW5nYWdlZCA9IHByb2Zlc3Npb25hbEVuZ2FnZWQ7XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH1cclxuXHJcbiAgICBlcXVhbHMob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQgPT0gb3RoZXIuaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXF1YWxzRm9yKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkID09IGlkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBmdWxsbmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZnVsbG5hbWU7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVzaWRlbmNpYWxQaG9uZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVzaWRlbmNpYWxQaG9uZTtcclxuICAgIH1cclxuICAgIGdldCBjZWxscGhvbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbGxwaG9uZTtcclxuICAgIH1cclxuICAgIGdldCBpbmRpY2F0ZWRCeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5kaWNhdGVkQnk7XHJcbiAgICB9XHJcbiAgICBnZXQgcHJvZmVzc2lvbmFsRW5nYWdlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvZmVzc2lvbmFsRW5nYWdlZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZWFibGV7XHJcbiAgICBjb25zdHJ1Y3RvcihwYWdlTnVtYmVyLCBwYWdlU2l6ZSwgdG90YWxFbGVtZW50cywgdG90YWxQYWdlcywgbnVtYmVyT2ZFbGVtZW50cywgZmlyc3QsIGxhc3QsIG51bWJlciwgc2l6ZSwgZW1wdHksIGNvbnRlbnQ9W10pIHtcclxuICAgICAgICB0aGlzLl9wYWdlTnVtYmVyID0gcGFnZU51bWJlcjtcclxuICAgICAgICB0aGlzLl9wYWdlU2l6ZSA9IHBhZ2VTaXplO1xyXG4gICAgICAgIHRoaXMuX3RvdGFsRWxlbWVudHMgPSB0b3RhbEVsZW1lbnRzO1xyXG4gICAgICAgIHRoaXMuX3RvdGFsUGFnZXMgPSB0b3RhbFBhZ2VzO1xyXG4gICAgICAgIHRoaXMuX251bWJlck9mRWxlbWVudHMgPSBudW1iZXJPZkVsZW1lbnRzO1xyXG4gICAgICAgIHRoaXMuX2ZpcnN0ID0gZmlyc3Q7XHJcbiAgICAgICAgdGhpcy5fbGFzdCA9IGxhc3Q7XHJcbiAgICAgICAgdGhpcy5fbnVtYmVyID0gbnVtYmVyO1xyXG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuX2VtcHR5ID0gZW1wdHk7XHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJ1aWxkRnJvbShkYXRhQXJyYXksIGNvbnRlbnQpIHtcclxuICAgICAgICBsZXQgcGdkZXRhaWxzID0gZGF0YUFycmF5WydwYWdlYWJsZSddXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlYWJsZShwZ2RldGFpbHNbJ3BhZ2VOdW1iZXInXSwgcGdkZXRhaWxzWydwYWdlU2l6ZSddLCBkYXRhQXJyYXlbJ3RvdGFsRWxlbWVudHMnXSwgXHJcbiAgICAgICAgICAgIGRhdGFBcnJheVsndG90YWxQYWdlcyddLCBkYXRhQXJyYXlbJ251bWJlck9mRWxlbWVudHMnXSwgZGF0YUFycmF5WydmaXJzdCddLCBkYXRhQXJyYXlbJ2xhc3QnXSwgXHJcbiAgICAgICAgICAgIGRhdGFBcnJheVsnbnVtYmVyJ10sIGRhdGFBcnJheVsnc2l6ZSddLCBkYXRhQXJyYXlbJ2VtcHR5J10sIGNvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYWdlTnVtYmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYWdlTnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYWdlU2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFnZVNpemU7XHJcbiAgICB9XHJcbiAgICBnZXQgdG90YWxFbGVtZW50cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdG90YWxFbGVtZW50cztcclxuICAgIH1cclxuICAgIGdldCB0b3RhbFBhZ2VzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90b3RhbFBhZ2VzO1xyXG4gICAgfVxyXG4gICAgZ2V0IG51bWJlck9mRWxlbWVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlck9mRWxlbWVudHM7XHJcbiAgICB9XHJcbiAgICBnZXQgZmlyc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcnN0O1xyXG4gICAgfVxyXG4gICAgZ2V0IGxhc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3Q7XHJcbiAgICB9XHJcbiAgICBnZXQgbnVtYmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1iZXI7XHJcbiAgICB9XHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcclxuICAgIH1cclxuICAgIGdldCBlbXB0eSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW1wdHk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvbnRlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByZXZpb3VzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlciAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG5leHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyICsgMTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaGFzTmV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyIDwgKHRoaXMuX3RvdGFsUGFnZXMgLTEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBoYXNQcmV2aW91cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFnZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvdGFsUGFnZXMgPiAxO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiLi9Db21wb25lbnRcIjtcclxuaW1wb3J0IERPTVBhcnNlclV0aWwgZnJvbSBcIi4uL2hlbHBlcnMvRE9NUGFyc2VyVXRpbFwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuL0J1dHRvblwiO1xyXG5pbXBvcnQgTGlzdGVuZXJBY3Rpb24gZnJvbSBcIi4vTGlzdGVuZXJBY3Rpb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VhYmxlTmF2aWdhdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFyZW50U2VsZWN0b3IsIGluZm89e30sIHBhZ2VBY3Rpb24pIHtcclxuICAgICAgICBzdXBlcihwYXJlbnRTZWxlY3RvciwgaW5mbyk7XHJcbiAgICAgICAgdGhpcy5fcGFnZUFjdGlvbiA9IHBhZ2VBY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHBhZ2VhYmxlKSB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl90YWcpLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl90YWcpLmFwcGVuZENoaWxkKHRoaXMuX3RlbXBsYXRlKHBhZ2VhYmxlKSk7XHJcbiAgICAgICAgdGhpcy5fY3JlYXRlUGFnaW5hdGlvbk5hdkJ1dHRvbnMocGFnZWFibGUpLmZvckVhY2goaXRlbSA9PiBcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl90YWcgKyAnIC5wYWdpbmF0aW9uJykuYXBwZW5kQ2hpbGQoaXRlbSkpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jcmVhdGVQYWdpbmF0aW9uTmF2QnV0dG9ucyhwYWdlYWJsZSkge1xyXG4gICAgICAgIGxldCBuYXYgPSBbXTtcclxuICAgICAgICBsZXQgcHJldmlvdXNCdG4gPSBuZXcgQnV0dG9uKCdBbnRlcmlvcicsICdwYWdlLWxpbmsnLCAnYnV0dG9uJywgXHJcbiAgICAgICAgICAgIG5ldyBMaXN0ZW5lckFjdGlvbignY2xpY2snLCAoKSA9PiB0aGlzLl9wYWdlQWN0aW9uKHBhZ2VhYmxlLnByZXZpb3VzKSkpO1xyXG5cclxuICAgICAgICBuYXYucHVzaCh0aGlzLl9jcmVhdGVMaXN0SXRlbSghcGFnZWFibGUuaGFzUHJldmlvdXMsIHByZXZpb3VzQnRuKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBwYWdlYWJsZS50b3RhbFBhZ2VzIDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBsZXQgYnRuID0gbmV3IEJ1dHRvbigoaW5kZXgrMSksICdwYWdlLWxpbmsnLCAnYnV0dG9uJywgXHJcbiAgICAgICAgICAgICAgICBuZXcgTGlzdGVuZXJBY3Rpb24oJ2NsaWNrJywgKCkgPT4gdGhpcy5fcGFnZUFjdGlvbihpbmRleCkpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5hdi5wdXNoKHRoaXMuX2NyZWF0ZUxpc3RJdGVtKHBhZ2VhYmxlLm51bWJlciA9PSBpbmRleCwgYnRuKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbmV4dEJ0biA9IG5ldyBCdXR0b24oJ1Byb3hpbWEnLCAncGFnZS1saW5rJywgJ2J1dHRvbicsIFxyXG4gICAgICAgICAgICBuZXcgTGlzdGVuZXJBY3Rpb24oJ2NsaWNrJywgKCkgPT4gdGhpcy5fcGFnZUFjdGlvbihwYWdlYWJsZS5uZXh0KSkpO1xyXG5cclxuICAgICAgICBuYXYucHVzaCh0aGlzLl9jcmVhdGVMaXN0SXRlbSghcGFnZWFibGUuaGFzTmV4dCwgbmV4dEJ0bikpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmF2O1xyXG4gICAgfVxyXG5cclxuICAgIF9jcmVhdGVMaXN0SXRlbShkaXNhYmxlZD1mYWxzZSwgYnV0dG9uKSB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QgPSBgcGFnZS1pdGVtICR7ZGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJyd9YDtcclxuXHJcbiAgICAgICAgaXRlbS5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBfdGVtcGxhdGUocGFnZWFibGUpIHtcclxuICAgICAgICBsZXQgdGVtcGxhdGUgPSBwYWdlYWJsZSA/IGBcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8cCBjbGFzcz0ndGV4dC1tdXRlZCc+RXhpYmluZG8gJHtwYWdlYWJsZS5udW1iZXJPZkVsZW1lbnRzfSBkZSAke3BhZ2VhYmxlLnRvdGFsRWxlbWVudHN9PC9wPlxyXG4gICAgICAgICAgICA8bmF2IGFyaWEtbGFiZWw9XCJQYWdlIG5hdmlnYXRpb24gZXhhbXBsZVwiPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwicGFnaW5hdGlvbiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L25hdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgIDogJyc7XHJcblxyXG4gICAgICAgIHJldHVybiBET01QYXJzZXJVdGlsLnBhcnNlKHRlbXBsYXRlKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIF9iYXNlKGluZm8pIHtcclxuICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3c+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTIgY29sLW1kLTVcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9JyR7aW5mby5pZH0nPjxkaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgSHR0cEhlbHBlciBmcm9tIFwiLi4vaGVscGVycy9IdHRwSGVscGVyXCI7XHJcbmltcG9ydCBDdXN0b21lciBmcm9tIFwiLi4vbW9kZWxzL0N1c3RvbWVyXCI7XHJcbmltcG9ydCBQYWdlYWJsZSBmcm9tIFwiLi4vbW9kZWxzL1BhZ2VhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21lclNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fc2VydmVyVVJMID0gYCR7U0VSVklDRV9VUkx9L2N1c3RvbWVyc2A7XHJcbiAgICAgICAgdGhpcy5faHR0cCA9IG5ldyBIdHRwSGVscGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q3VzdG9tZXJzKHBhcmFtZXRlcnM9bnVsbCkge1xyXG4gICAgICAgIGxldCBlbmRwb2ludCA9IHRoaXMuX3NlcnZlclVSTCArIFwiL3NlYXJjaFwiO1xyXG5cclxuICAgICAgICBpZiAocGFyYW1ldGVycylcclxuICAgICAgICAgICAgZW5kcG9pbnQgPSBlbmRwb2ludCArIFwiP1wiICsgcGFyYW1ldGVycztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KGVuZHBvaW50KVxyXG4gICAgICAgICAgICAudGhlbihwYWdlYWJsZSA9PiBcclxuICAgICAgICAgICAgICAgIFBhZ2VhYmxlLmJ1aWxkRnJvbShwYWdlYWJsZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZWFibGVbJ2NvbnRlbnQnXS5tYXAoZGF0YSA9PiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0Q3VzdG9tZXJGcm9tRGF0YShkYXRhKSkpKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOw6NvIGZvaSBwb3NzaXZlbCBjb25lY3RhciBhbyBzZXJ2aWRvcicpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDdXN0b21lckJ5SUQoaWQpIHtcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBgJHt0aGlzLl9zZXJ2ZXJVUkx9LyR7aWR9YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQoZW5kcG9pbnQpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4gdGhpcy5fZ2V0Q3VzdG9tZXJGcm9tRGF0YShkYXRhKSlcclxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT2NvcnJldSB1bSBlcnJvciBuYSBjb211bmnDp8OjbyBjb20gbyBzZXJ2aWRvciBlIG7Do28gZm9pIHBvc3NpdmVsIGVuY29udHJhciBvIGNsaWVudGUgc29saWNpdGFkbycpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDdXN0b21lcihjdXN0b21lckR0bykge1xyXG4gICAgICAgIGxldCBlbmRwb2ludCA9IHRoaXMuX3NlcnZlclVSTDtcclxuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KGVuZHBvaW50LCBKU09OLnN0cmluZ2lmeShjdXN0b21lckR0bykpXHJcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4gdGhpcy5fZ2V0Q3VzdG9tZXJGcm9tRGF0YShkYXRhKSk7ICAgICAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQ3VzdG9tZXIoY3VzdG9tZXJEdG8pIHtcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBgJHt0aGlzLl9zZXJ2ZXJVUkx9LyR7Y3VzdG9tZXJEdG8uaWR9YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5faHR0cC5wdXQoZW5kcG9pbnQsIEpTT04uc3RyaW5naWZ5KGN1c3RvbWVyRHRvKSlcclxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB0aGlzLl9nZXRDdXN0b21lckZyb21EYXRhKGRhdGEpKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVDdXN0b21lcihpZCkge1xyXG4gICAgICAgIGxldCBlbmRwb2ludCA9IGAke3RoaXMuX3NlcnZlclVSTH0vJHtpZH1gXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZGVsZXRlKGVuZHBvaW50KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOw6NvIGZvaSBwb3NzaXZlbCByZW1vdmVyIG8gY2xpZW50ZSBzb2xpY2l0YWRvJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRQYWdlYWJsZUN1c3RvbWVyc0Zyb21EYXRhKGRhdGEpIHtcclxuICAgICAgICBsZXQgcGdkZXRhaWxzID0gZGF0YVsncGFnZWFibGUnXVxyXG4gICAgICAgIHJldHVybiBuZXcgUGFnZWFibGUocGdkZXRhaWxzWydwYWdlTnVtYmVyJ10sIHBnZGV0YWlsc1sncGFnZVNpemUnXSwgZGF0YVsndG90YWxFbGVtZW50cyddLCBcclxuICAgICAgICAgICAgZGF0YVsndG90YWxQYWdlcyddLCBkYXRhWydudW1iZXJPZkVsZW1lbnRzJ10sIGRhdGFbJ2ZpcnN0J10sIGRhdGFbJ2xhc3QnXSwgZGF0YVsnbnVtYmVyJ10sIFxyXG4gICAgICAgICAgICBkYXRhWydzaXplJ10sIGRhdGFbJ2VtcHR5J10pO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRDdXN0b21lckZyb21EYXRhKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEN1c3RvbWVyKGRhdGFbJ2Z1bGxuYW1lJ10sIGRhdGFbJ3Jlc2lkZW5jaWFsUGhvbmUnXSwgZGF0YVsnY2VsbHBob25lJ10sIGRhdGFbJ2luZGljYXRlZEJ5J10sIGRhdGFbJ3Byb2Zlc3Npb25hbEVuZ2FnZWROYW1lJ10sIGRhdGFbJ2lkJ10pO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRGaWx0ZXJEYXRhKGRhdGEpIHtcclxuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpIHx8IGRhdGEuaGFzT3duUHJvcGVydHkoJ3Byb2Zlc3Npb25hbEVuZ2FnZWROYW1lJykpIHtcclxuICAgICAgICAgICAgbGV0IG5hbWUgPSBkYXRhWyduYW1lJ10gPyBkYXRhWyduYW1lJ10gOiAnJztcclxuICAgICAgICAgICAgbGV0IHByb2Zlc3Npb25hbEVuZ2FnZWQgPSBkYXRhWydwcm9mZXNzaW9uYWxFbmdhZ2VkTmFtZSddID8gZGF0YVsncHJvZmVzc2lvbmFsRW5nYWdlZE5hbWUnXSA6ICcnO1xyXG4gICAgICAgICAgICByZXR1cm4gYG5hbWU9JHtuYW1lfSZwcm9mZXNzaW9uYWxFbmdhZ2VkTmFtZT0ke3Byb2Zlc3Npb25hbEVuZ2FnZWR9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWVyRFRPIHtcclxuICAgIGNvbnN0cnVjdG9yKGZ1bGxuYW1lLCByZXNpZGVuY2lhbFBob25lLCBjZWxscGhvbmUsIGluZGljYXRlZEJ5LCBwcm9mZXNzaW9uYWxFbmdhZ2VkLCBpZD0nJykge1xyXG4gICAgICAgIHRoaXMuZnVsbG5hbWUgPSBmdWxsbmFtZTtcclxuICAgICAgICB0aGlzLnJlc2lkZW5jaWFsUGhvbmUgPSByZXNpZGVuY2lhbFBob25lO1xyXG4gICAgICAgIHRoaXMuY2VsbHBob25lID0gY2VsbHBob25lO1xyXG4gICAgICAgIHRoaXMuaW5kaWNhdGVkQnkgPSBpbmRpY2F0ZWRCeTtcclxuICAgICAgICB0aGlzLnByb2Zlc3Npb25hbEVuZ2FnZWRJRCA9IHByb2Zlc3Npb25hbEVuZ2FnZWQ7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1cIjtcclxuaW1wb3J0IEN1c3RvbWVyIGZyb20gXCIuLi9tb2RlbHMvQ3VzdG9tZXJcIjtcclxuaW1wb3J0IERPTVBhcnNlclV0aWwgZnJvbSBcIi4uL2hlbHBlcnMvRE9NUGFyc2VyVXRpbFwiO1xyXG5pbXBvcnQgQ3VzdG9tZXJEVE8gZnJvbSBcIi4uL2R0b3MvQ3VzdG9tZXJEVE9cIjtcclxuaW1wb3J0IFByb2Zlc3Npb25hbFNlcnZpY2UgZnJvbSBcIi4uL3NlcnZpY2VzL1Byb2Zlc3Npb25hbFNlcnZpY2VcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWVyRm9ybSBleHRlbmRzIEZvcm17XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRTZWxlY3RvciwgLi4ubGlzdGVuZXJzKSB7XHJcbiAgICAgICAgc3VwZXIocGFyZW50U2VsZWN0b3IsIHtcclxuICAgICAgICAgICAgJ2lkJzogJ2N1c3RvbWVyRm9ybScsXHJcbiAgICAgICAgICAgIGxpc3RlbmVyc1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9jdXN0b21lciA9IG5ldyBDdXN0b21lcigpO1xyXG4gICAgICAgIHRoaXMuX3Byb2Zlc3Npb25hbExpc3QgPSBbXTtcclxuICAgIFxyXG4gICAgICAgIG5ldyBQcm9mZXNzaW9uYWxTZXJ2aWNlKCkuZ2V0QWxsUHJvZmVzc2lvbmFscygpXHJcbiAgICAgICAgICAgIC50aGVuKHByb2Zlc3Npb25hbExpc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvZmVzc2lvbmFsTGlzdCA9IHByb2Zlc3Npb25hbExpc3Q7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZpZWxkcygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY3VzdG9tZXIoY3VzdG9tZXIpIHtcclxuICAgICAgICB0aGlzLl9jdXN0b21lciA9IGN1c3RvbWVyO1xyXG4gICAgICAgIHRoaXMudXBkYXRlRmllbGRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q3VzdG9tZXJEVE8oKSB7XHJcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmdldERhdGEoKTtcclxuICAgICAgICByZXR1cm4gbmV3IEN1c3RvbWVyRFRPKGRhdGFbJ2Z1bGxuYW1lJ10sIGRhdGFbJ3Jlc2lkZW5jaWFsUGhvbmUnXSwgZGF0YVsnY2VsbHBob25lJ10sIGRhdGFbJ2luZGljYXRlZEJ5J10sIGRhdGFbJ3Byb2Zlc3Npb25hbEVuZ2FnZWQnXSwgZGF0YVsnaWQnXSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RlbXBsYXRlKCkge1xyXG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IGBcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImlkXCIgbmFtZT1cImlkXCIgdmFsdWU9XCIke3RoaXMuX2N1c3RvbWVyLmlkID8gdGhpcy5fY3VzdG9tZXIuaWQgOiAnJ31cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImZ1bGxuYW1lXCI+Tm9tZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbWluPVwiM1wiIG1heD1cIjIwXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImZ1bGxuYW1lXCIgbmFtZT1cImZ1bGxuYW1lXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiSnVsaWFuYSBCYW5kZWlyYXNcIiB2YWx1ZT1cIiR7dGhpcy5fY3VzdG9tZXIuZnVsbG5hbWUgPyB0aGlzLl9jdXN0b21lci5mdWxsbmFtZSA6ICcnfVwiPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgY29sLW1kLTZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInJlc2lkZW5jaWFsUGhvbmVcIj5UZWxlZm9uZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJyZXNpZGVuY2lhbFBob25lXCIgbmFtZT1cInJlc2lkZW5jaWFsUGhvbmVcIiB2YWx1ZT1cIiR7dGhpcy5fY3VzdG9tZXIucmVzaWRlbmNpYWxQaG9uZSA/IHRoaXMuX2N1c3RvbWVyLnJlc2lkZW5jaWFsUGhvbmUgOiAnJ31cIj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBjb2wtbWQtNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2VsbHBob25lXCI+Q2VsdWxhcjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJjZWxscGhvbmVcIiBuYW1lPVwiY2VsbHBob25lXCIgdmFsdWU9XCIke3RoaXMuX2N1c3RvbWVyLmNlbGxwaG9uZSA/IHRoaXMuX2N1c3RvbWVyLmNlbGxwaG9uZSA6ICcnfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgY29sLW1kLTZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImluZGljYXRlZEJ5XCI+SW5kaWNhZG8gUG9yPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImluZGljYXRlZEJ5XCIgbmFtZT1cImluZGljYXRlZEJ5XCIgdmFsdWU9XCIke3RoaXMuX2N1c3RvbWVyLmluZGljYXRlZEJ5ID8gdGhpcy5fY3VzdG9tZXIuaW5kaWNhdGVkQnkgOiAnJ31cIj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBjb2wtbWQtNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicHJvZmVzc2lvbmFsRW5nYWdlZFwiPlByb2Zpc3Npb25hbCBSZXNwb25zw6F2ZWw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVwicHJvZmVzc2lvbmFsRW5nYWdlZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbmFtZT1cInByb2Zlc3Npb25hbEVuZ2FnZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7dGhpcy5fcHJvZmVzc2lvbmFsTGlzdC5tYXAocHJvZmVzc2lvbmFsID0+IGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiJHtwcm9mZXNzaW9uYWwuaWR9XCIgJHt0aGlzLl9jdXN0b21lci5wcm9mZXNzaW9uYWxFbmdhZ2VkID09IHByb2Zlc3Npb25hbC5uYW1lID8gJ3NlbGVjdGVkJyA6ICcnfT4ke3Byb2Zlc3Npb25hbC5uYW1lfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCkuam9pbignJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcblxyXG4gICAgICAgIHJldHVybiBET01QYXJzZXJVdGlsLnBhcnNlKHRlbXBsYXRlKTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtXCI7XHJcbmltcG9ydCBQcm9mZXNzaW9uYWxTZXJ2aWNlIGZyb20gXCIuLi9zZXJ2aWNlcy9Qcm9mZXNzaW9uYWxTZXJ2aWNlXCI7XHJcbmltcG9ydCBET01QYXJzZXJVdGlsIGZyb20gXCIuLi9oZWxwZXJzL0RPTVBhcnNlclV0aWxcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcclxuaW1wb3J0IExpc3RlbmVyQWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL0xpc3RlbmVyQWN0aW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21lckZpbHRlckZvcm0gZXh0ZW5kcyBGb3Jte1xyXG4gICAgY29uc3RydWN0b3IocGFyZW50U2VsZWN0b3IsIC4uLmxpc3RlbmVycykge1xyXG4gICAgICAgIHN1cGVyKHBhcmVudFNlbGVjdG9yLCB7XHJcbiAgICAgICAgICAgICdpZCc6ICdjdXN0b21lckZpbHRlckZvcm0nLFxyXG4gICAgICAgICAgICAnYnV0dG9ucyc6IHRydWUsXHJcbiAgICAgICAgICAgICdpbml0aWFsQnV0dG9ucyc6IFtcclxuICAgICAgICAgICAgICAgIG5ldyBCdXR0b24oJ0ZpbHRyYXInLCAnYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSBmbG9hdC1yaWd0aCcsICdzdWJtaXQnKSxcclxuICAgICAgICAgICAgICAgIG5ldyBCdXR0b24oJ0xpbXBhciBGaWx0cm8nLCAnYnRuIGJ0bi1zZWNvbmRhcnkgYnRuLXNtJywgJ3Jlc2V0JyksXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGxpc3RlbmVyc1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9wcm9mZXNzaW9uYWxMaXN0ID0gW107XHJcbiAgICBcclxuICAgICAgICBuZXcgUHJvZmVzc2lvbmFsU2VydmljZSgpLmdldEFsbFByb2Zlc3Npb25hbHMoKVxyXG4gICAgICAgICAgICAudGhlbihwcm9mZXNzaW9uYWxMaXN0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Zlc3Npb25hbExpc3QgPSBwcm9mZXNzaW9uYWxMaXN0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGaWVsZHMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RlbXBsYXRlKCkge1xyXG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9IGBcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGNvbC1tZC02XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJmdWxsbmFtZVwiPk5vbWU8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG5hbWU9XCJmdWxsbmFtZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGNvbC1tZC02XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwaG9uZVwiPlRlbGVmb25lPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBuYW1lPVwicGhvbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgY29sLW1kLTZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImluZGljYXRlZEJ5XCI+SW5kaWNhZG8gUG9yOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbmFtZT1cImluZGljYXRlZEJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgY29sLW1kLTZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInByb2Zlc3Npb25hbEVuZ2FnZWRJZFwiPlByb2Zpc3Npb25hbCBSZXNwb25zw6F2ZWw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbmFtZT1cInByb2Zlc3Npb25hbEVuZ2FnZWRJZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+VG9kb3M8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7dGhpcy5fcHJvZmVzc2lvbmFsTGlzdC5tYXAocHJvZmVzc2lvbmFsID0+IGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIke3Byb2Zlc3Npb25hbC5pZH1cIj4ke3Byb2Zlc3Npb25hbC5uYW1lfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCkuam9pbignJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBjb2wtbWQtNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwic2l6ZVwiPkl0ZW5zIHBvciBQYWdpbmE8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJzaXplXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIyMFwiPjIwPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMTBcIj4xMDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjVcIj41PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMlwiPjI8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGNvbC1tZC02XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJzb3J0XCI+T3JkZW5hciBQb3I6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwic29ydFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+U2VtIE9yZGVuYcOnw6NvPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZnVsbG5hbWUsQVNDXCI+Tm9tZSAoY3Jlc2NlbnRlKTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImZ1bGxuYW1lLERFU0NcIj5Ob21lIChEZWNyZXNjZW50ZSk8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwcm9mZXNzaW9uYWxFbmdhZ2VkLEFTQ1wiPlByb2Zpc3Npb25hbCBSZXNwb25zw6F2ZWwgKENyZXNjZW50ZSk8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwcm9mZXNzaW9uYWxFbmdhZ2VkLERFU0NcIj5Qcm9maXNzaW9uYWwgUmVzcG9uc8OhdmVsIChEZWNyZXNjZW50ZSk8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuXHJcbiAgICAgICAgcmV0dXJuIERPTVBhcnNlclV0aWwucGFyc2UodGVtcGxhdGUpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IE1vZGVsVGFibGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvTW9kZWxUYWJsZVwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9jb21wb25lbnRzL0J1dHRvblwiO1xyXG5pbXBvcnQgTGlzdGVuZXJBY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvTGlzdGVuZXJBY3Rpb25cIjtcclxuaW1wb3J0IFBhZ2VhYmxlTmF2aWdhdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9QYWdlYWJsZU5hdmlnYXRpb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWVyc1RhYmxlIGV4dGVuZHMgTW9kZWxUYWJsZXtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudFNlbGVjdG9yLCBlZGl0QWN0aW9uLCByZW1vdmVBY3Rpb24pIHtcclxuICAgICAgICBzdXBlcihwYXJlbnRTZWxlY3Rvciwge1xyXG4gICAgICAgICAgICAnaWQnOiAnY0xpc3QnLFxyXG4gICAgICAgICAgICAnaGVhZGVycyc6IFsnTm9tZScsICdQcm9maXNzaW9uYWwgUmVzcG9uc8OhdmVsJywgJ1RlbGVmb25lJywgJ0NlbHVsYXInLCAnQcOnw7VlcyddLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9lZGl0QWN0aW9uID0gZWRpdEFjdGlvbjtcclxuICAgICAgICB0aGlzLl9yZW1vdmVBY3Rpb24gPSByZW1vdmVBY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgX2NyZWF0ZUxpbmVUYWJsZUZyb21Nb2RlbChjdXN0b21lcikge1xyXG4gICAgICAgIGxldCBidG5FZGl0ID0gbmV3IEJ1dHRvbignRWRpdGFyJywgJ2J0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbScsICdidXR0b24nLCBcclxuICAgICAgICAgICAgbmV3IExpc3RlbmVyQWN0aW9uKCdjbGljaycsICgpID0+IHRoaXMuX2VkaXRBY3Rpb24oY3VzdG9tZXIuaWQpKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGJ0blJlbW92ZSA9IG5ldyBCdXR0b24oJ1JlbW92ZXInLCAnYnRuIGJ0bi1vdXRsaW5lLWRhbmdlciBidG4tc20nLCAnYnV0dG9uJywgXHJcbiAgICAgICAgICAgIG5ldyBMaXN0ZW5lckFjdGlvbignY2xpY2snLCAoKSA9PiB0aGlzLl9yZW1vdmVBY3Rpb24oY3VzdG9tZXIuaWQpKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVUYWJsZUxpbmUoY3VzdG9tZXIuaWQsIFxyXG4gICAgICAgICAgICBbY3VzdG9tZXIuZnVsbG5hbWUsIGN1c3RvbWVyLnByb2Zlc3Npb25hbEVuZ2FnZWQsIGN1c3RvbWVyLnJlc2lkZW5jaWFsUGhvbmUsIGN1c3RvbWVyLmNlbGxwaG9uZV0sIFxyXG4gICAgICAgICAgICBidG5FZGl0LCBidG5SZW1vdmUpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFByb3h5TW9kZWxWaWV3IGZyb20gXCIuLi9oZWxwZXJzL0JpbmRQcm94eU1vZGVsVmlld1wiO1xyXG5pbXBvcnQgTW9kZWxMaXN0IGZyb20gXCIuLi9tb2RlbHMvTW9kZWxMaXN0XCI7XHJcbmltcG9ydCBDdXN0b21lclNlcnZpY2UgZnJvbSBcIi4uL3NlcnZpY2VzL0N1c3RvbWVyU2VydmljZVwiO1xyXG5pbXBvcnQgQWxlcnRNZXNzYWdlIGZyb20gXCIuLi9tb2RlbHMvQWxlcnRNZXNzYWdlXCI7XHJcbmltcG9ydCBBbGVydE1lc3NhZ2VWaWV3IGZyb20gXCIuLi92aWV3cy9BbGVydE1lc3NhZ2VWaWV3XCI7XHJcbmltcG9ydCBDdXN0b21lckZpbHRlckZvcm0gZnJvbSBcIi4uL3ZpZXdzL0N1c3RvbWVyRmlsdGVyRm9ybVwiO1xyXG5pbXBvcnQgTW9kYWwgZnJvbSBcIi4uL2NvbXBvbmVudHMvTW9kYWxcIjtcclxuaW1wb3J0IEN1c3RvbWVyRm9ybSBmcm9tIFwiLi4vdmlld3MvQ3VzdG9tZXJGb3JtXCI7XHJcbmltcG9ydCBDdXN0b21lciBmcm9tIFwiLi4vbW9kZWxzL0N1c3RvbWVyXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvQnV0dG9uXCI7XHJcbmltcG9ydCBMaXN0ZW5lckFjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9MaXN0ZW5lckFjdGlvblwiO1xyXG5pbXBvcnQgQ3VzdG9tZXJzVGFibGUgZnJvbSBcIi4uL3ZpZXdzL0N1c3RvbWVyc1RhYmxlXCI7XHJcbmltcG9ydCBQcm94eU1vZGVsQ29tcG9uZW50IGZyb20gXCIuLi9oZWxwZXJzL1Byb3h5TW9kZWxDb21wb25lbnRcIjtcclxuaW1wb3J0IENvbmZpcm1Nb2RhbCBmcm9tIFwiLi4vY29tcG9uZW50cy9Db25maXJtTW9kYWxcIjtcclxuaW1wb3J0IFBhZ2VhYmxlTmF2aWdhdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9QYWdlYWJsZU5hdmlnYXRpb25cIjtcclxuaW1wb3J0IERlZmF1bHREYXNoYm9hcmRDb250cm9sbGVyIGZyb20gXCIuL0RlZmF1bHREYXNoYm9hcmRDb250cm9sbGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21lckNvbnRyb2xsZXIgZXh0ZW5kcyBEZWZhdWx0RGFzaGJvYXJkQ29udHJvbGxlciB7XHJcblxyXG4gICAgX2luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5fc2VydmljZSA9IG5ldyBDdXN0b21lclNlcnZpY2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5faW5pdEFsZXJ0TWVzc2FnZXMoKTtcclxuICAgICAgICB0aGlzLl9pbml0UmVtb3ZlQ29uZmlybWF0aW9uTW9kYWwoKTtcclxuICAgICAgICB0aGlzLl9pbml0Q3VzdG9tZXJGb3JtTW9kYWwoKTtcclxuICAgICAgICB0aGlzLl9pbml0Q3VzdG9tZXJzVGFibGUoKTtcclxuICAgICAgICB0aGlzLnNlYXJjaEN1c3RvbWVycygpO1xyXG4gICAgICAgIHRoaXMuX2luaXRNb2RhbEZvcm1CdXR0b25zKCk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG4tY3JlYXRlLWN1c3RvbWVyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7dGhpcy5fY3JlYXRlQ3VzdG9tZXIoKX0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzYXZlQ3VzdG9tZXJGb3JtKCkge1xyXG4gICAgICAgIGxldCBkdG8gPSB0aGlzLl9jdXN0b21lckZvcm0uZ2V0Q3VzdG9tZXJEVE8oKTtcclxuICAgICAgICBsZXQgc2F2ZVByb21pc3NlID0gZHRvLmlkID8gdGhpcy5fc2VydmljZS51cGRhdGVDdXN0b21lcihkdG8pIDogdGhpcy5fc2VydmljZS5jcmVhdGVDdXN0b21lcihkdG8pO1xyXG5cclxuICAgICAgICB0aGlzLl9wcmVMb2FkZXIucnVuKFxyXG4gICAgICAgICAgICBzYXZlUHJvbWlzc2UudGhlbihjdXN0b21lciA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXN0b21lcnMuYWRkKGN1c3RvbWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2UudXBkYXRlKGBPcyBkYWRvcyBkbyAke2N1c3RvbWVyLmZ1bGxuYW1lfSBmb3JhbSBzYWx2b3MgY29tIHN1Y2Vzc29gLFxyXG4gICAgICAgICAgICAgICAgICAgIGBEYWRvcyBTYWx2b2AsIFxyXG4gICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGFsRm9ybS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUN1c3RvbWVyKGlkKSB7XHJcbiAgICAgICAgdGhpcy5fcHJlTG9hZGVyLnJ1bihcclxuICAgICAgICAgICAgdGhpcy5fc2VydmljZS5kZWxldGVDdXN0b21lcihpZClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXN0b21lcnMucmVtb3ZlKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXNzYWdlLnVwZGF0ZSgnT3MgZGFkb3MgZG8gY2xpZW50ZSBmb3JhbSByZW1vdmlkb3MgZGVmaW5pdGl2YW1lbnRlJyxcclxuICAgICAgICAgICAgICAgICAgICAnQ2xpZW50ZSByZW1vdmlkbyEnLCAnaW5mbycpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVzc2FnZS51cGRhdGUoZXJyb3IubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0Vycm8gbmEgb3BlcmHDp8OjbyEnLCAnd2FybmluZycpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLl9tb2RhbENvbmZpcm1SZW1vdmUuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlYXJjaEN1c3RvbWVycyhwYWdlPW51bGwpIHtcclxuICAgICAgICB0aGlzLl9jdXN0b21lcnMuY2xlYW4oKTtcclxuXHJcbiAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSB0aGlzLl9maWx0ZXIuZ2V0RGF0YUFzUGFyYW1zKCk7XHJcbiAgICAgICAgaWYgKHBhZ2UgIT0gbnVsbCkgcGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgKyAnJnBhZ2U9JyArIHBhZ2U7XHJcbiAgICAgICAgdGhpcy5fcHJlTG9hZGVyLnJ1bihcclxuICAgICAgICAgICAgdGhpcy5fc2VydmljZS5nZXRDdXN0b21lcnMocGFyYW1ldGVycylcclxuICAgICAgICAgICAgICAgIC50aGVuKHBhZ2VhYmxlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWdlYWJsZS51cGRhdGUocGFnZWFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VhYmxlLmNvbnRlbnQuZm9yRWFjaChjdXN0b21lciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1c3RvbWVycy5hZGQoY3VzdG9tZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2UudXBkYXRlKCcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnTGlzdGEgZGUgQ2xpZW50ZXMgYXR1YWxpemFkYSEnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2luZm8nKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2UudXBkYXRlKGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdBIGNvbmV4w6NvIGZhbGhvdScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbmZvJyk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdEN1c3RvbWVyc1RhYmxlKCkge1xyXG4gICAgICAgIHRoaXMuX2N1c3RvbWVycyA9IG5ldyBQcm94eU1vZGVsQ29tcG9uZW50KG5ldyBNb2RlbExpc3QoKSwgXHJcbiAgICAgICAgICAgIG5ldyBDdXN0b21lcnNUYWJsZSgnI2N1c3RvbWVyTGlzdCcsIFxyXG4gICAgICAgICAgICAgICAgaWQgPT4ge3RoaXMuX2VkaXRDdXN0b21lcihpZCl9LCBcclxuICAgICAgICAgICAgICAgIGlkID0+IHt0aGlzLl9jb25maXJtUmVtb3ZlQ3VzdG9tZXIoaWQpfSksXHJcbiAgICAgICAgICAgICdhZGQnLCAncmVtb3ZlJywgJ2NsZWFuJyk7XHJcblxyXG4gICAgICAgIHRoaXMuX21vZGFsU2VhcmNoRm9ybSA9IG5ldyBNb2RhbCgnbWFpbicsIHtcclxuICAgICAgICAgICAgJ2lkJzogJ21vZGFsU2VhcmNoRm9ybScsXHJcbiAgICAgICAgICAgICd0aXRsZSc6ICdGaWx0cm8gZGUgcGVzcXVpc2EnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2ZpbHRlciA9IG5ldyBDdXN0b21lckZpbHRlckZvcm0odGhpcy5fbW9kYWxTZWFyY2hGb3JtLmNvbnRlbnRTZWxlY3RvciwgXHJcbiAgICAgICAgICAgIG5ldyBMaXN0ZW5lckFjdGlvbignc3VibWl0JywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaEN1c3RvbWVycygpXHJcbiAgICAgICAgICAgIHRoaXMuX21vZGFsU2VhcmNoRm9ybS5oaWRlKCk7XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuLXNob3ctc2VhcmNoLW1vZGFsJylcclxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge3RoaXMuX21vZGFsU2VhcmNoRm9ybS5zaG93KCl9KTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3BhZ2VhYmxlID0gbmV3IFBhZ2VhYmxlTmF2aWdhdGlvbignI2N1c3RvbWVyTGlzdCcsIHtcclxuICAgICAgICAgICAgJ2lkJzogJ2N1c3RvbWVyTGlzdFBhZ2luYXRpb24nLCBcclxuICAgICAgICB9LCBwYWdlID0+IHt0aGlzLnNlYXJjaEN1c3RvbWVycyhwYWdlKX0pO1xyXG4gICAgfVxyXG5cclxuICAgIF9pbml0Q3VzdG9tZXJGb3JtTW9kYWwoKSB7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxGb3JtID0gbmV3IE1vZGFsKCdtYWluJywge1xyXG4gICAgICAgICAgICAnaWQnOiAnbUZvcm0nLFxyXG4gICAgICAgICAgICAndGl0bGUnOiAnRm9ybXVsw6FyaW8gZG8gQ2xpZW50ZScsXHJcbiAgICAgICAgICAgICdmb290ZXInOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2N1c3RvbWVyRm9ybSA9IG5ldyBDdXN0b21lckZvcm0odGhpcy5fbW9kYWxGb3JtLmNvbnRlbnRTZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXRSZW1vdmVDb25maXJtYXRpb25Nb2RhbCgpIHtcclxuICAgICAgICB0aGlzLl9tb2RhbENvbmZpcm1SZW1vdmUgPSBuZXcgQ29uZmlybU1vZGFsKFwibWFpblwiLCB7XHJcbiAgICAgICAgICAgIFwiaWRcIjogXCJtb2RhbENvbmZpcm1SZW1vdmVcIixcclxuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlJlbW92ZXIgQ2xpZW50ZVwiLCBcclxuICAgICAgICAgICAgXCJidXR0b25MYWJlbFwiOiBcIlJlbW92ZXIgZGVmaW5pdGl2YW1lbnRlXCJcclxuICAgICAgICB9LCBpZCA9PiB7dGhpcy5kZWxldGVDdXN0b21lcihpZCl9KTtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdEFsZXJ0TWVzc2FnZXMoKSB7XHJcbiAgICAgICAgdGhpcy5fbWVzc2FnZSA9IG5ldyBQcm94eU1vZGVsVmlldyhuZXcgQWxlcnRNZXNzYWdlKCksXHJcbiAgICAgICAgICAgIG5ldyBBbGVydE1lc3NhZ2VWaWV3KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhbGVydE1lc3NhZ2UnKSksIFxyXG4gICAgICAgICAgICAndXBkYXRlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXRNb2RhbEZvcm1CdXR0b25zKCkge1xyXG4gICAgICAgIHRoaXMuX21vZGFsRm9ybS51cGRhdGVGb290ZXIoXHJcbiAgICAgICAgICAgIG5ldyBCdXR0b24oJ1NhbHZhcicsICdidG4gYnRuLXByaW1hcnkgYnRuLWxnJywgJ2J1dHRvbicsIFxyXG4gICAgICAgICAgICAgICAgbmV3IExpc3RlbmVyQWN0aW9uKCdjbGljaycsICgpID0+IHt0aGlzLnNhdmVDdXN0b21lckZvcm0oKX0pKSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NyZWF0ZUN1c3RvbWVyKCkge1xyXG4gICAgICAgIHRoaXMuX2N1c3RvbWVyRm9ybS5jdXN0b21lciA9IG5ldyBDdXN0b21lcigpO1xyXG4gICAgICAgIHRoaXMuX21vZGFsRm9ybS5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2VkaXRDdXN0b21lcihpZCkge1xyXG4gICAgICAgIGxldCBjdXN0b21lciA9IHRoaXMuX2N1c3RvbWVycy5maW5kKGlkKTtcclxuICAgICAgICB0aGlzLl9jdXN0b21lckZvcm0uY3VzdG9tZXIgPSBjdXN0b21lcjtcclxuICAgICAgICB0aGlzLl9tb2RhbEZvcm0uc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jb25maXJtUmVtb3ZlQ3VzdG9tZXIoaWQpIHtcclxuICAgICAgICBsZXQgY3VzdG9tZXIgPSB0aGlzLl9jdXN0b21lcnMuZmluZChpZCk7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxDb25maXJtUmVtb3ZlLnVwZGF0ZShcclxuICAgICAgICAgICAgYFZvY8OqIHRlbSBjZXJ0ZXphIHF1ZSBkZXNlamEgcmVtb3ZlciBkZWZpbml0aXZhbWVudGUgbyhhKSBjbGllbnRlIDxzdHJvbmc+JHtjdXN0b21lci5mdWxsbmFtZX08L3N0cm9uZz4gZG8gc2lzdGVtYT9gLCBcclxuICAgICAgICAgICAgY3VzdG9tZXIuaWQpO1xyXG4gICAgICAgIHRoaXMuX21vZGFsQ29uZmlybVJlbW92ZS5zaG93KCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQ3VzdG9tZXJDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvQ3VzdG9tZXJDb250cm9sbGVyJztcclxuXHJcbmxldCBjb250cm9sbGVyID0gbmV3IEN1c3RvbWVyQ29udHJvbGxlcigpOyJdLCJzb3VyY2VSb290IjoiIn0=