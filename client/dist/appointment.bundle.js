!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=31)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(1);class i{constructor(e,t={}){this._component=s.a.parse(this._base(t)),this._tag="#"+t.id,this._parentSelector=e,this._info=t,this._init(),document.querySelector(this._parentSelector).appendChild(this._component)}_init(){this._initListeners(this._info.listeners)}_initListeners(e){e&&e.forEach(e=>{this._component.addEventListener(e.type,e.action)})}_base(e){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{static parse(e){return(new DOMParser).parseFromString(e,"text/html").documentElement.querySelector("body").firstChild}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t){this._type=e,this._action=t}get type(){return this._type}get action(){return this._action}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t,n="submit",...s){let i=document.createElement("button");return i.classList=t,i.setAttribute("type",n),i.innerHTML=e,s&&s.forEach(e=>i.addEventListener(e.type,e.action)),i}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));n(11),n(7);class s{addToken(e,t){let n=`${e} ${t}`;window.localStorage.setItem("msaloonwbtoken",n)}storeItem(e,t){window.localStorage.setItem(e,t)}cleanToken(){window.localStorage.setItem("msaloonwbtoken",null)}get token(){return window.localStorage.getItem("msaloonwbtoken")}getStoredItem(e){return window.localStorage.getItem(e)}post(e,t){let n=this._buildTransactionDetails("POST",t);return this._buildFetchTransaction(e,n)}get(e){let t=this._buildTransactionDetails("GET",null);return this._buildFetchTransaction(e,t)}put(e,t){let n=this._buildTransactionDetails("PUT",t);return this._buildFetchTransaction(e,n)}delete(e){let t=this._buildTransactionDetails("DELETE",null);return fetch(e,t).then(e=>{if(e.ok)return!0;throw new Error("A transactional error has been happened.")})}_buildTransactionHeaders(){return new Headers({"Content-type":"Application/json",Authorization:this.token})}_buildTransactionDetails(e,t){return{method:e,body:t,headers:this._buildTransactionHeaders()}}_buildFetchTransaction(e,t){return fetch(e,t).then(e=>{if(e.ok)return e.json().then(e=>e).catch(e=>!0);throw new Error("A transactional error has been happened.")})}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(0);class i extends s.a{updateFields(){document.querySelector(this._tag+" .fields").innerHTML="",document.querySelector(this._tag+" .fields").appendChild(this._template())}submit(){document.querySelector(this._tag).submit()}reset(){document.querySelector(this._tag).reset()}getData(){let e=[];return $(this._tag).serializeArray().forEach(t=>{e[t.name]=t.value}),e}getDataAsParams(){return $(this._tag).serialize()}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".fields").appendChild(this._info.initialContent),this._info.buttons&&this._info.initialButtons&&this._info.initialButtons.forEach(e=>this._component.querySelector(".buttons").appendChild(e))}_base(e){return`\n        <form id=${e.id} ${e.formClass?`class='${e.formClass}'`:""}>\n           <div class='fields'></div>\n           <div class='buttons'>\n                ${e.defaultButtons?'\n                <button type="submit" class="btn btn-primary">Salvar</button>\n                <button type="reset" class="btn btn-secondary">Limpar</button>\n                ':""}\n           </div>\n        </form>\n        `}_template(){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));n(1);var s=n(0);class i extends s.a{show(){$(this._tag).modal("show")}hide(){$(this._tag).modal("hide")}updateContent(e){document.querySelector(this._tag+" .modal-body").innerHTML="",document.querySelector(this._tag+" .modal-body").appendChild(e)}cleanContent(){document.querySelector(this._tag+" .modal-body").innerHTML=""}updateContentText(e){document.querySelector(this._tag+" .modal-body").innerHTML="<pre>"+e+"</pre>"}updateFooter(e){document.querySelector(this._tag+" .modal-footer").innerHTML="",document.querySelector(this._tag+" .modal-footer").appendChild(e)}cleanFooter(){document.querySelector(this._tag+" .modal-footer").innerHTML=""}get contentSelector(){return this._tag+" .modal-body"}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".modal-body").appendChild(this._info.initialContent),this._info.footer&&this._info.initialFooter&&this._component.querySelector(".modal-footer").appendChild(this._info.initialFooter)}_initListeners(e){e&&e.forEach(e=>{$(this._component).on(e.type,e.action)})}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="${e.label?e.label:"myLargeModal"}" aria-hidden="true">\n            <div class="modal-dialog ${e.modalClass?e.modalClass:""}" role="document">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title">${e.title}</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                            <span aria-hidden="true">&times;</span>\n                        </button>\n                    </div>\n            \n                    <div class="modal-body">\n                    </div>\n\n                    ${e.footer?'\n                    <div class="modal-footer">\n                        \n                    </div>\n                    ':""}\n                </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(4);class i{constructor(){this._serverURL="http://localhost:8080/auth",this._webtoken="msaloonwbtoken",this._http=new s.a}hasValidToken(){return this._http.get(this._serverURL)}authenticate(e){let t={method:"POST",body:JSON.stringify(e),headers:{"Content-type":"Application/json"}};return fetch(this._serverURL,t).then(e=>{if(e.ok&&200==e.status)return e.json();throw new Error("The signin data is not correct")}).then(e=>{this._http.addToken(e.type,e.token)})}logout(){this._http.cleanToken()}redirectToLoginPage(){window.location.href="/login.html"}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{equals(e){throw new Error("The equals method must be implemented")}equalsFor(e){throw new Error("The equalsFor method must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{static create(e,t,n){return new Proxy(e,{get:(e,i,o)=>t.includes(i)&&s._isFuntion(e[i])?function(){let t=Reflect.apply(e[i],e,arguments);return n(e),t}:Reflect.get(e,i,o),set(e,s,i,o){let a=Reflect.set(e,s,i,o);return t.includes(s)&&n(e),a}})}static _isFuntion(e){return typeof e==typeof Function}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var s=n(0);class i extends s.a{constructor(e){super(e)}_base(e){return'\n        <nav class="sidebar">\n          <div class="sidebar-sticky">\n            <ul class="nav flex-column">\n              <li class="nav-item">\n                <a class="nav-link active" href="./schedule.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>\n                  Dashboard <span class="sr-only">(current)</span>\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./customers.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>\n                  Clientes\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./professionals.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Profissionais\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./vendors.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Fornecedores\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./purchases.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Compras\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./appointments.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Atendimentos (Consultas)\n                </a>\n              </li>\n            </ul>\n    \n            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">\n              <span>Minha Conta</span>\n            </h6>\n            <ul class="nav flex-column mb-2">\n              <li class="nav-item">\n                <a class="nav-link" href="./profile.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>\n                  Meu Perfil\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        '}}class o extends s.a{constructor(e,t){super(e),this._initHeaderNavigation(t)}_initHeaderNavigation(e){this._component.querySelector("a.logout").addEventListener(e.type,e.action)}_base(e){return'\n        <nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">\n            <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">My Saloon Web</a>\n            <input class="form-control form-control-dark w-100" type="text" placeholder="Pesquisar" aria-label="Pesquisar">\n            <ul class="navbar-nav px-3">\n                <li class="nav-item text-nowrap">\n                <a class="nav-link logout" href="#">Logoff</a>\n                </li>\n            </ul>\n        </nav>\n        '}}var a=n(2),r=n(7),l=n(1);class d extends s.a{constructor(){super("#headerNavigation"),this._initLoaderComponent()}start(){this._component.appendChild(this._loaderComponent),this._component.classList.add("pre-loader-running")}stop(){this._component.innerHTML="",this._component.classList.remove("pre-loader-running")}run(e){this.start(),e.then(()=>{this.stop()})}_initLoaderComponent(){this._loaderComponent=l.a.parse('\n        <div class="loader-panel">\n            <div id="loader4">\n                <span class="loader loader-1"></span>\n                <span class="loader loader-2"></span>\n                <span class="loader loader-3"></span>\n                <span class="loader loader-4"></span>\n            </div>\n        </div>\n        ')}_base(){return'\n        <div class="row" id="preLoader">\n            \n        </div>\n        '}}class c{constructor(){this._preLoader=new d,this._authService=new r.a,this._validAuthenticatedClient(),this._headerNav=new o("#headerNavigation",new a.a("click",e=>{this.doLogoff()})),this._dashboardNav=new i("#dashboardNavigation"),this._init()}doLogoff(){this._authService.logout(),this._authService.redirectToLoginPage()}_init(){throw new Error("the _init() method must be implemented")}_validAuthenticatedClient(){this._authService.hasValidToken().catch(()=>{this._authService.redirectToLoginPage()})}}},function(e,t,n){"use strict"},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(8);class i extends s.a{constructor(e,t,n,s,i,o=""){super(),this._name=e,this._residencialPhone=t,this._cellphone=n,this._departament=s,this._id=o,this._email=i}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get name(){return this._name}get residencialPhone(){return this._residencialPhone}get cellphone(){return this._cellphone}get departament(){return this._departament}get email(){return this._email}get id(){return this._id}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{static toString(e){return`${e.getDate()}/${e.getMonth()+1}/${e.getFullYear()}`}static toDate(e){return new Date(e+"T03:00:00Z")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(9);class i{constructor(e,t,...n){let i=s.a.create(e,n,e=>t.update(e));return t.update(e),i}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(){this._title="",this._message="",this._type="primary"}update(e,t="",n="primary"){this._title=t,this._message=e,this._type=n}get title(){return this._title}get message(){return this._message}get type(){return this._type}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s extends class{constructor(e){this._element=e}_template(e){throw new Error("Template method must be implemented")}update(e){this._element.innerHTML=this._template(e)}}{_template(e){return`\n        <div class="alert alert-${e.type} alert-dismissible fade show" role="alert">\n            <h4 class="alert-heading">${e.title}</h4>\n            <p class='text-muted'>${e.message}</p>\n            <button type="button" class="close" data-dismiss="alert" aria-label="Close">\n                <span aria-hidden="true">&times;</span>\n            </button>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(12),i=(n(11),n(4));class o{constructor(){this._serverURL="http://localhost:8080/professionals",this._http=new i.a}getAllProfessionals(){let e=this._serverURL;return this._http.get(e).then(e=>e.map(e=>this._getProfessionalFromData(e)))}getProfessionalByID(e){let t=`${this._serverURL}/${e}`;return this._http.get(t).then(e=>this._getProfessionalFromData(e)).catch(e=>{throw console.log(e),new Error("Ocorreu um error na comunição com o servidor e não foi possivel encontrar o profissional solicitado")})}createProfessional(e){let t=this._serverURL;return this._http.post(t,JSON.stringify(e)).then(e=>this._getProfessionalFromData(e))}updateProfessional(e){let t=`${this._serverURL}/${e.id}`;return this._http.put(t,JSON.stringify(e)).then(e=>this._getProfessionalFromData(e))}deteleProfessional(e){let t=`${this._serverURL}/${e}`;return this._http.delete(t)}getProfessionalByEmail(e){let t=`${this._serverURL}/email/${e}`;return this._http.get(t).then(e=>this._getProfessionalFromData(e))}restorePassword(e){return this._http.post("http://localhost:8080/accounts/restore",JSON.stringify({email:e}))}resetPassword(e){return this._http.post("http://localhost:8080/accounts/reset",JSON.stringify({password:e}))}_getProfessionalFromData(e){return new s.a(e.name,e.residencialPhone,e.cellphone,e.department,e.email,e.id)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(){this._list=[],this._pageableInfo=void 0}clean(){this._list=[],this._pageableInfo=void 0}add(e){this._list.some(t=>t.equals(e))?this._list.forEach((t,n)=>{t.equals(e)&&(this._list[n]=e)}):this._list.push(e)}find(e){return this._list.find(t=>t.equalsFor(e))}updatePageableInfo(e){this._pageableInfo=e}remove(e){this._list.forEach((t,n)=>{t.equalsFor(e)&&this._list.splice(n,1)})}get list(){return this._list}get pageableInfo(){return this._pageableInfo}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var s=n(0);class i extends s.a{_updateList(e){let t=document.querySelector(this._tag+" tbody");t.innerHTML="",e.forEach(e=>t.appendChild(e))}_appendItem(e){document.querySelector(this._tag+" tbody").appendChild(e)}_cleanTable(){document.querySelector(this._tag+" tbody").innerHTML=""}_removeLine(e){document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`).remove()}_updateLine(e,t){let n=document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`);n.parentNode.replaceChild(t,n)}_createTableLine(e,t,...n){let s=document.createElement("tr");if(s.setAttribute("data-key",e),t.forEach(e=>{let t=document.createElement("td");t.innerHTML=e,s.appendChild(t)}),n){let e=document.createElement("td");n.forEach(t=>e.appendChild(t)),s.appendChild(e)}return s}_base(e){return`\n        <table class="table table-hover" id=${e.id}>\n            <thead>\n                <tr>\n                    ${e.headers.map(e=>`\n                        <th scope="col">${e}</th>\n                    `).join("")}\n                </tr>\n            </thead>\n            <tbody>\n                ${e.initialContent?initialContent:""}\n            </tbody>\n        </table>\n        `}}class o extends i{updateFromModel(e){this._cleanTable(),e.list.forEach(e=>this._appendItem(this._createLineTableFromModel(e)))}_createLineTableFromModel(e){throw new Error("_createLineTableFromModel must been implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(6);class i extends s.a{constructor(e,t,n){super(e,t),this._removeAction=n}_init(){super._init(),this._component.querySelector(this._tag+" form").addEventListener("submit",e=>{e.preventDefault();let t=document.querySelector(this._tag+' form input[name="key"]').value;this._removeAction(t)})}update(e,t){document.querySelector(this._tag+" .modal-body .alert").innerHTML=e,document.querySelector(this._tag+' form input[name="key"]').value=t}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog">\n            <div class="modal-dialog modal-sm" role="document">\n            <div class="modal-content">\n                <div class="modal-header">\n                <h5 class="modal-title">${e.title}</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n                </div>\n                <div class="modal-body">\n                <div class="alert alert-danger" role="alert">\n                    ${e.message}\n                </div>\n                <p class="text-muted">Essa ação não poderá ser desfeita</p>\n                <form>\n                    <input type="hidden" name="key">\n                    <button class="btn btn-danger btn-sm btn-block" type="submit">${e.buttonLabel}</button>\n                </form>\n                </div>\n            </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(9);class i{constructor(e,t,...n){let i=s.a.create(e,n,e=>t.updateFromModel(e));return t.updateFromModel(e),i}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var s=n(8);class i extends s.a{constructor(e,t,n,s,i,o=""){super(),this._fullname=e,this._residencialPhone=t,this._cellphone=n,this._indicatedBy=s,this._professionalEngaged=i,this._id=o}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get fullname(){return this._fullname}get residencialPhone(){return this._residencialPhone}get cellphone(){return this._cellphone}get indicatedBy(){return this._indicatedBy}get professionalEngaged(){return this._professionalEngaged}get id(){return this._id}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e,t,n,s,i,o,a,r,l,d,c=[]){this._pageNumber=e,this._pageSize=t,this._totalElements=n,this._totalPages=s,this._numberOfElements=i,this._first=o,this._last=a,this._number=r,this._size=l,this._empty=d,this._content=c}static buildFrom(e,t){let n=e.pageable;return new s(n.pageNumber,n.pageSize,e.totalElements,e.totalPages,e.numberOfElements,e.first,e.last,e.number,e.size,e.empty,t)}get pageNumber(){return this._pageNumber}get pageSize(){return this._pageSize}get totalElements(){return this._totalElements}get totalPages(){return this._totalPages}get numberOfElements(){return this._numberOfElements}get first(){return this._first}get last(){return this._last}get number(){return this._number}get size(){return this._size}get empty(){return this._empty}get content(){return this._content}get previous(){return this.number-1}get next(){return this.number+1}get hasNext(){return this._number<this._totalPages-1}get hasPrevious(){return this._number>0}get paged(){return this._totalPages>1}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var s=n(0),i=n(1),o=n(3),a=n(2);class r extends s.a{constructor(e,t={},n){super(e,t),this._pageAction=n}update(e){document.querySelector(this._tag).innerHTML="",document.querySelector(this._tag).appendChild(this._template(e)),this._createPaginationNavButtons(e).forEach(e=>document.querySelector(this._tag+" .pagination").appendChild(e))}_createPaginationNavButtons(e){let t=[],n=new o.a("Anterior","page-link","button",new a.a("click",()=>this._pageAction(e.previous)));t.push(this._createListItem(!e.hasPrevious,n));for(let n=0;n<e.totalPages;n++){let s=new o.a(n+1,"page-link","button",new a.a("click",()=>this._pageAction(n)));t.push(this._createListItem(e.number==n,s))}let s=new o.a("Proxima","page-link","button",new a.a("click",()=>this._pageAction(e.next)));return t.push(this._createListItem(!e.hasNext,s)),t}_createListItem(e=!1,t){let n=document.createElement("li");return n.classList="page-item "+(e?"disabled":""),n.appendChild(t),n}_template(e){let t=e?`\n        <div>\n            <p class='text-muted'>Exibindo ${e.numberOfElements} de ${e.totalElements}</p>\n            <nav aria-label="Page navigation example">\n                <ul class="pagination justify-content-center">\n                </ul>\n            </nav>\n        </div>\n        `:"";return i.a.parse(t)}_base(e){return`\n        <div class="row>\n            <div class="col-sm-12 col-md-5">\n                <div id='${e.id}'><div>\n            </div>\n        </div>\n        `}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var s=n(4),i=n(22),o=n(23);class a{constructor(){this._serverURL="http://localhost:8080/customers",this._http=new s.a}getCustomers(e=null){let t=this._serverURL+"/search";return e&&(t=t+"?"+e),this._http.get(t).then(e=>o.a.buildFrom(e,e.content.map(e=>this._getCustomerFromData(e)))).catch(e=>{throw console.log(e),new Error("Não foi possivel conectar ao servidor")})}getCustomerByID(e){let t=`${this._serverURL}/${e}`;return this._http.get(t).then(e=>this._getCustomerFromData(e)).catch(e=>{throw console.log(e),new Error("Ocorreu um error na comunição com o servidor e não foi possivel encontrar o cliente solicitado")})}createCustomer(e){let t=this._serverURL;return this._http.post(t,JSON.stringify(e)).then(e=>this._getCustomerFromData(e))}updateCustomer(e){let t=`${this._serverURL}/${e.id}`;return this._http.put(t,JSON.stringify(e)).then(e=>this._getCustomerFromData(e))}deleteCustomer(e){let t=`${this._serverURL}/${e}`;return this._http.delete(t).catch(e=>{throw console.log(e),new Error("Não foi possivel remover o cliente solicitado")})}_getPageableCustomersFromData(e){let t=e.pageable;return new o.a(t.pageNumber,t.pageSize,e.totalElements,e.totalPages,e.numberOfElements,e.first,e.last,e.number,e.size,e.empty)}_getCustomerFromData(e){return new i.a(e.fullname,e.residencialPhone,e.cellphone,e.indicatedBy,e.professionalEngagedName,e.id)}_getFilterData(e){if(e.hasOwnProperty("name")||e.hasOwnProperty("professionalEngagedName")){return`name=${e.name?e.name:""}&professionalEngagedName=${e.professionalEngagedName?e.professionalEngagedName:""}`}return""}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));class s{constructor(e){this._paymentMethod=e,this._labels={CREDIT_CARD:"Cartão de Crédito",MONEY:"Dinheiro"}}equals(e){return null!=this._paymentMethod&&this._paymentMethod==e}get label(){return this._labels[this._paymentMethod]}get method(){return this._paymentMethod}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var s=n(5),i=n(22),o=n(1);class a{constructor(e,t,n,s,i,o=""){this.fullname=e,this.residencialPhone=t,this.cellphone=n,this.indicatedBy=s,this.professionalEngagedID=i,this.id=o}}var r=n(17);class l extends s.a{constructor(e,...t){super(e,{id:"customerForm",listeners:t}),this._customer=new i.a,this._professionalList=[],(new r.a).getAllProfessionals().then(e=>{this._professionalList=e,this.updateFields()})}set customer(e){this._customer=e,this.updateFields()}getCustomerDTO(){let e=this.getData();return new a(e.fullname,e.residencialPhone,e.cellphone,e.indicatedBy,e.professionalEngaged,e.id)}_template(){let e=`\n            <div>\n                <input type="hidden" class="form-control" id="id" name="id" value="${this._customer.id?this._customer.id:""}">\n                <div class="form-group">\n                    <label for="fullname">Nome</label>\n                    <input type="text" min="3" max="20" class="form-control" id="fullname" name="fullname" \n                        placeholder="Juliana Bandeiras" value="${this._customer.fullname?this._customer.fullname:""}">\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="residencialPhone">Telefone</label>\n                        <input type="text" class="form-control" id="residencialPhone" name="residencialPhone" value="${this._customer.residencialPhone?this._customer.residencialPhone:""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="cellphone">Celular</label>\n                        <input type="text" class="form-control" id="cellphone" name="cellphone" value="${this._customer.cellphone?this._customer.cellphone:""}">\n                    </div>\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="indicatedBy">Indicado Por</label>\n                        <input type="text" class="form-control" id="indicatedBy" name="indicatedBy" value="${this._customer.indicatedBy?this._customer.indicatedBy:""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="professionalEngaged">Profissional Responsável</label>\n                        <select id="professionalEngaged" class="form-control" name="professionalEngaged">\n                            ${this._professionalList.map(e=>`\n                                <option value="${e.id}" ${this._customer.professionalEngaged==e.name?"selected":""}>${e.name}</option>\n                            `).join("")}\n                        </select>\n                    </div>\n                </div>\n            </div>\n        `;return o.a.parse(e)}}},function(e,t,n){"use strict";n.r(t);var s=n(10),i=n(4),o=n(23),a=n(8),r=n(13);class l extends a.a{constructor(e,t,n,s,i,o,a,l=null,d=""){super(),this._customer=e,this._professional=t,this._date=n?new Date(r.a.toDate(n)):null,this._time=s,this._title=i,this._notes=o,this._done=a,this._service=l,this._id=d}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}set customer(e){this._customer=e}get customer(){return this._customer}get professional(){return this._professional}get date(){return this._date}get time(){return this._time}get title(){return this._title}get notes(){return this._notes}get done(){return this._done}get service(){return this._service}get id(){return this._id}}var d=n(22),c=n(12);class u extends a.a{constructor(e,t,n=null){super(),this._notes=e,this._payment=t,this._id=n}equals(e){return this._id==e.id}equalsFor(e){return this._id==other.id}get notes(){return this._notes}get payment(){return this._payment}get id(){return this._id}}var h=n(28);class p extends a.a{constructor(e,t,n,s,i=null){super(),this._value=e,this._method=t?new h.a(t):new h.a("MONEY"),this._date=n?new Date(r.a.toDate(n)):null,this._notes=s,this._id=i}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get value(){return this._value}get method(){return this._method}get date(){return this._date}get notes(){return this._notes}get id(){return this._id}}class m{constructor(){this._serverUrl="http://localhost:8080/appointments",this._http=new i.a}getPageableAppointments(e){let t=this._serverUrl+"/search";return e&&(t=t+"?"+e),this._http.get(t).then(e=>o.a.buildFrom(e,e.content.map(e=>this._getAppointmentFromData(e))))}getDetailed(e){let t=this._serverUrl+"/"+e;return this._http.get(t).then(e=>this._getAppointmentFromData(e))}createAppointment(e){let t=this._serverUrl;return this._http.post(t,JSON.stringify(e)).then(e=>this._getAppointmentFromData(e))}updateAppointment(e){let t=this._serverUrl+"/"+e.id;return this._http.put(t,JSON.stringify(e)).then(e=>this._getAppointmentFromData(e))}deleteAppointment(e){let t=this._serverUrl+"/"+e;return this._http.delete(t)}_getAppointmentFromData(e){let t=this._getCustomerFromData(e.customer),n=this._getProfessionalFromData(e.professional),s=e.service?this._getServiceFromData(e.service):null;return new l(t,n,e.date,e.time,e.title,e.notes,e.done,s,e.id)}_getCustomerFromData(e){return new d.a(e.fullname,e.residencialPhone,e.cellphone,e.indicatedBy,e.professionalEngagedName,e.id)}_getProfessionalFromData(e){return new c.a(e.name,e.residencialPhone,e.cellphone,e.department,e.email,e.id)}_getServiceFromData(e){let t=this._getPaymentFromData(e.payment);return new u(e.notes,t,e.id)}_getPaymentFromData(e){return new p(e.value,e.method,e.date,e.notes,e.id)}}var _=n(14),v=n(15),f=n(16),g=n(21),b=n(18),y=n(24),w=n(5),C=n(1),S=n(3),F=n(17);class T extends w.a{constructor(e,...t){super(e,{id:"appointmentSearchForm",buttons:!0,initialButtons:[new S.a("Filtrar","btn btn-primary btn-sm float-right","submit"),new S.a("Limpar Filtro","btn btn-secondary btn-sm","reset")],listeners:t}),(new F.a).getAllProfessionals().then(e=>{this._professionalsList=e,this.updateFields()})}_template(){let e=`\n            <div>\n                <div class="form-group">\n                    <label for="title">Titulo</label>\n                    <input type="text" class="form-control" name="title">\n                </div>\n\n                <div class="form-group">\n                    <label for="customerName">Cliente</label>\n                    <input type="text" class="form-control" name="customerName">\n                </div>\n\n                <div class="form-group">\n                    <label for="professionalId">Profissional</label>\n                    <select name="professionalId" class="form-control">\n                        <option value="">Todos</option>\n                        ${this._professionalsList.map(e=>`\n                            <option value="${e.id}">${e.name}</option>\n                        `).join("")}\n                    </select>\n                </div>\n\n                <div class="form-group">\n                    <label for="date">Data</label>\n                    <div class="input-group">\n                        <div class="input-group-prepend">\n                            <select name="dateOperation">\n                                <option value="EQUAL">Igual a</option>\n                                <option value="GREATER_THAN">Maior que</option>\n                                <option value="LESS_THAN">Menor que</option>\n                                <option value="BETWEEN">Entre</option>\n                            </select>\n                        </div> \n\n                        <input type="date" class="form-control" id="date" name="date">\n                        <input type="date" class="form-control" id="dateMax" name="dateMax">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="time">Horário</label>\n                    <div class="input-group">\n                        <div class="input-group-prepend">\n                            <select name="timeOperation">\n                                <option value="EQUAL">Igual a</option>\n                                <option value="GREATER_THAN">Maior que</option>\n                                <option value="LESS_THAN">Menor que</option>\n                                <option value="BETWEEN">Entre</option>\n                            </select>\n                        </div> \n\n                        <input type="time" class="form-control" name="time">\n                        <input type="time" class="form-control" name="timeMax">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="paymentValue">Valor Pago</label>\n                    <div class="input-group">\n                        <div class="input-group-prepend">\n                            <select name="paymentValueOperation">\n                                <option value="EQUAL">Igual a</option>\n                                <option value="GREATER_THAN">Maior que</option>\n                                <option value="LESS_THAN">Menor que</option>\n                                <option value="BETWEEN">Entre</option>\n                            </select>\n                        </div>    \n                        <input type="number" min="0.00" step="0.01" class="form-control" name="paymentValue">\n                        <input type="number" min="0.00" step="0.01" class="form-control" name="paymentValueMax">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="paymentDate">Data do Pagamento</label>\n                    <div class="input-group">\n                        <div class="input-group-prepend">\n                            <select name="paymentDateOperation">\n                                <option value="EQUAL">Igual a</option>\n                                <option value="GREATER_THAN">Maior que</option>\n                                <option value="LESS_THAN">Menor que</option>\n                                <option value="BETWEEN">Entre</option>\n                            </select>\n                        </div> \n\n                        <input type="date" class="form-control" name="paymentDate">\n                        <input type="date" class="form-control" name="paymentDateMax">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="paymentMethod">Tipo de Pagamento</label>\n                    <select name="paymentMethod" class="form-control">\n                        <option value="">Todos</option>\n                        <option value="CREDIT_CARD">Cartão de Crédito</option>\n                        <option value="MONEY">Dinheiro</option>\n                    </select>\n                </div>\n\n                <div class="form-group">\n                    <label for="done">Finalizado</label>\n                    <select name="done" class="form-control">\n                        <option value="">Todos</option>\n                        <option value="true">Finalizados</option>\n                        <option value="false">Em Aberto</option>\n                    </select>\n                </div>\n\n                <div class="row">\n                    <div class="form-group col-md-6">\n                        <label for="size">Itens por Pagina</label>\n                        <select name="size" class="form-control">\n                            <option value="20">20</option>\n                            <option value="10">10</option>\n                            <option value="5">5</option>\n                            <option value="2">2</option>\n                        </select>\n                    </div>\n\n                    <div class="form-group col-md-6">\n                        <label for="sort">Ordenar Por:</label>\n                        <select name="sort" class="form-control">\n                            <option value="">Sem Ordenação</option>\n                            <option value="title,ASC">Titulo (crescente)</option>\n                            <option value="title,DESC">Titulo (Decrescente)</option>\n                            <option value="date,ASC">Data (Crescente)</option>\n                            <option value="date,DESC">Data (Decrescente)</option>\n                        </select>\n                    </div>\n                </div>\n\n            </div>\n        `;return C.a.parse(e)}}var E=n(6),A=n(19),M=n(2);class L extends A.a{constructor(e,t,n){super(e,{id:"appointmentsTable",headers:["Cliente","Profissional","Data","Horário","Titulo","Concluido","Ações"]}),this._editAction=t,this._removeAction=n}_createLineTableFromModel(e){let t=new S.a("Editar","btn btn-outline-primary btn-sm","button",new M.a("click",()=>this._editAction(e.id))),n=new S.a("Remover","btn btn-outline-danger btn-sm","button",new M.a("click",()=>this._removeAction(e.id)));return this._createTableLine(e.id,[e.customer.fullname,e.professional.name,r.a.toString(e.date),e.time,e.title,e.done?"Sim":"Não"],t,n)}}var D=n(0);class x extends D.a{constructor(e,t){super(e,t)}addTab(e,t,n=!1){return this._component.querySelector("ul.nav-tabs").appendChild(this._createTabItem(e,t,n)),this._component.querySelector("div.tab-content").appendChild(this._createTabContent(t,n)),{contentId:"#"+t+"-content",tabId:"#"+t+"-tab"}}setTabAs(e,t=!0){t?this._component.querySelector("ul.nav-tabs "+e).classList.add("disabled"):this._component.querySelector("ul.nav-tabs "+e).classList.remove("disabled")}setAsActive(e,t){this._component.querySelectorAll("ul.nav-tabs li a").forEach(e=>e.classList.remove("active")),this._component.querySelectorAll("div.tab-content div").forEach(e=>{e.classList.remove("active"),e.classList.remove("show")}),this._component.querySelector(e).classList.add("active"),this._component.querySelector(t).classList.add("show"),this._component.querySelector(t).classList.add("active")}_createTabItem(e,t,n=!1){let s=`   \n        <li class="nav-item" role="presentation">\n            <a class="nav-link ${n?"active":""}" id="${t}-tab" data-toggle="tab" href="#${t}-content" role="tab" aria-controls="${e}" aria-selected="true">${e}</a>\n        </li>\n        `;return C.a.parse(s)}_createTabContent(e,t=!1){let n=`\n            <div class="tab-pane fade ${t?"show active":""}" id="${e}-content" role="tabpanel" aria-labelledby="${e}-tab"></div>\n        `;return C.a.parse(n)}_base(e){return'\n            <div>\n                <ul class="nav nav-tabs" role="tablist">\n                </ul>\n                <div class="tab-content">\n                </div>\n            </div>\n        '}}var P=n(30),$=n(26);class k extends A.a{constructor(e,t){super(e,{id:"customerSelectTable",headers:["Nome","Indicado Por","Profissional Responsável","Selecionar"]}),this._selectAction=t,this._customers=new b.a,this._customerService=new $.a,this._component.querySelector("#btnSearchCustomer").addEventListener("click",()=>{this.search()})}search(){let e="fullname="+this._component.querySelector("#searchCustomerName").value+"&size=3";this._customers.clean(),this._customerService.getCustomers(e).then(e=>{e.content.forEach(e=>{this._customers.add(e)}),this.updateFromModel(this._customers)})}_base(e){return'\n            <div>\n                <div class="form-group">\n                    <label for="customerName">Nome do Cliente</label>\n                    <div class="input-group">\n                        <input type="text" class="form-control" aria-describedby="button-addon25" id="searchCustomerName">\n                        <div class="input-group-append" id="button-addon25">\n                            <button class="btn btn-outline-primary" type="button" id="btnSearchCustomer">Buscar</button>\n                        </div>\n                    </div>\n                </div>\n            <div>\n        '+super._base(e)}_createLineTableFromModel(e){let t=new S.a("Selecionar","btn btn-outline-primary btn-sm","button",new M.a("click",()=>{this._selectAction(e)}));return this._createTableLine(e.id,[e.fullname,e.indicatedBy,e.professionalEngaged],t)}}class q{constructor(e,t,n,s,i,o,a=!1,l=null,d=null,c=null,u=null,h=null,p=null){this.customerId=e,this.professionalId=t,this.date=n?new Date(r.a.toDate(n)):null,this.time=s,this.title=i,this.notes=o,this.done=a,this.id=l,this.serviceNotes=d,this.paymentValue=c,this.paymentMethod=u,this.paymentDate=h,this.paymentNotes=p}setService(e){this.serviceNotes=e}setPayment(e,t,n,s){this.paymentValue=e,this.paymentMethod=t,this.paymentDate=n?new Date(r.a.toDate(n)):null,this.paymentNotes=s}}class N extends w.a{constructor(e,...t){super(e,{id:"appointmentForm",listeners:t}),this._appointment=new l,this._professionalList=[],(new F.a).getAllProfessionals().then(e=>{this._professionalList=e,this.updateFields()}),this._customerModal=new E.a("main",{id:"customerSelectionModal",title:"Cadastrar novo Cliente",footer:!0}),this._customerService=new $.a}_showForNewCustomer(){this._customerModal.cleanContent(),this._customerForm=new P.a(this._customerModal.contentSelector),this._customerModal.updateFooter(new S.a("Cadastrar","btn btn-primary btn-block","button",new M.a("click",()=>{this._submitNewCustomerForm()}))),this._customerModal.show()}_showForSearchCustomer(){this._customerModal.cleanContent(),this._customerForm=new k(this._customerModal.contentSelector,e=>{this._setCustomer(e),this._customerModal.hide()}),this._customerModal.cleanFooter(),this._customerModal.show()}_submitNewCustomerForm(){let e=this._customerForm.getCustomerDTO();this._customerService.createCustomer(e).then(e=>{this._setCustomer(e),this._customerModal.hide()})}_setCustomer(e){this._appointment.customer=e,this.updateFields()}set appointment(e){this._appointment=e,this.updateFields()}getAsDTO(){let e=this.getData();return new q(e.customerId,e.professionalId,e.date,e.time,e.title,e.notes,e.done,e.id)}_template(){let e=`\n            <div>\n                <input type="hidden" class="form-control" name="id" \n                    value="${this._appointment.id?this._appointment.id:""}" />\n                <input type="hidden" class="form-control" name="customerId"\n                    value="${this._appointment.customer?this._appointment.customer.id:""}" />\n                \n                <div class="form-group">\n                    <label for="customerName">Cliente</label>\n                    <div class="input-group">\n                        <input type="text" class="form-control" aria-describedby="button-addon4" readonly name="customerName"\n                            value="${this._appointment.customer?this._appointment.customer.fullname:""}">\n                        <div class="input-group-append" id="button-addon4">\n                            <button class="btn btn-outline-primary" type="button" id="btnCreateCustomer">Novo</button>\n                            <button class="btn btn-outline-secondary" type="button" id="btnSearchCustomer">Encontrar</button>\n                        </div>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="professionalId">Professional Responsável</label>\n                    <select name="professionalId" class="form-control">\n                        ${this._professionalList.map(e=>`\n                            <option value="${e.id}" ${this._appointment.professional&&this._appointment.professional.id==e.id?"selected":""}>\n                                    ${e.name}\n                            </option>\n                        `).join("")}\n                    </select>\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="date">Data</label>\n                        <input type="date" class="form-control" name="date" \n                            value="${this._appointment.date?this._appointment.date.toISOString().slice(0,10):""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="time">Horário</label>\n                        <input type="time" class="form-control" name="time"\n                            value="${this._appointment.time?this._appointment.time:""}">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="title">Titulo</label>\n                    <input type="text" class="form-control" name="title"\n                        value="${this._appointment.title?this._appointment.title:""}">\n                </div>\n\n                <div class="form-group">\n                    <label for="notes">Anotações</label>\n                    <textarea class="form-control" name="notes">${this._appointment.notes?this._appointment.notes:""}</textarea>\n                </div>\n\n                ${this._appointment.id?`\n                    <div class="form-group form-check">\n                        <input type="checkbox" class="form-check-input" name="done" value="true" ${this._appointment.done?"checked":""}>\n                        <label class="form-check-label">Concluido</label>\n                    </div>\n                `:""}\n            </div>\n        `,t=C.a.parse(e);return t.querySelector("#btnCreateCustomer").addEventListener("click",()=>{this._showForNewCustomer()}),t.querySelector("#btnSearchCustomer").addEventListener("click",()=>{this._showForSearchCustomer()}),t}}class I extends w.a{constructor(e,...t){super(e,{id:"serviceForm",listeners:t}),this._service=new u,this.updateFields()}set service(e){this._service=e,this.updateFields()}_template(){let e=`\n            <div>\n                <div class="form-group">\n                    <label for="notes">Anotações/Informações</label>\n                    <textarea class="form-control" name="serviceNotes">${this._service.notes?this._service.notes:""}</textarea>\n                </div>\n            </div>\n        `;return C.a.parse(e)}}class R extends w.a{constructor(e,...t){super(e,{id:"paymentForm",listeners:t}),this._payment=new p,this.updateFields()}set payment(e){this._payment=e,this.updateFields()}_template(){let e=`\n            <div>       \n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="paymentValue">Valor</label>\n                        <input type="number" min="0.00" step="0.01" class="form-control" name="paymentValue"\n                            value="${this._payment.value?this._payment.value:""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="paymentMethod">Forma de Pagamento</label>\n                        <select name="paymentMethod" class="form-control">\n                            <option value="CREDIT_CARD" ${this._payment.method.equals("CREDIT_CARD")?"selected":""}>Cartão de Crédito</option>\n                            <option value="MONEY" ${this._payment.method.equals("CREDIT_CARD")?"selected":""}>Dinheiro</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="paymentDate">Data</label>\n                        <input type="date" class="form-control" name="paymentDate"\n                            value="${this._payment.date?this._payment.date.toISOString().slice(0,10):""}">\n                    </div>\n                </div>\n    \n                <div class="form-group">\n                    <label for="paymentNotes">Anotações</label>\n                    <textarea class="form-control" name="paymentNotes">${this._payment.notes?this._payment.notes:""}</textarea>\n                </div>\n            </div>\n        `;return C.a.parse(e)}}class O extends x{constructor(e){super(e),this._appointmentTab=this.addTab("Atendimento","appointment",!0),this._appointmentForm=new N(this._appointmentTab.contentId),this._serviceTab=this.addTab("Serviço","service"),this._serviceForm=new I(this._serviceTab.contentId),this._paymentTab=this.addTab("Pagamento","payment"),this._paymentForm=new R(this._paymentTab.contentId),this._updateMode=!1}get appointmentForm(){return this._appointmentForm}getAppointmentDTO(){let e=this._appointmentForm.getAsDTO();if(this._updateMode){let t=this._serviceForm.getData();e.setService(t.serviceNotes);let n=this._paymentForm.getData();e.setPayment(n.paymentValue,n.paymentMethod,n.paymentDate,n.paymentNotes)}return e}newMode(){this._appointmentForm.appointment=new l,this.setTabAs(this._serviceTab.tabId,!0),this.setTabAs(this._paymentTab.tabId,!0),this.setAsActive(this._appointmentTab.tabId,this._appointmentTab.contentId),this._updateMode=!1}updateMode(e){this._appointmentForm.appointment=e,this._serviceForm.service=e.service?e.service:new u,this._paymentForm.payment=e.service&&e.service.payment?e.service.payment:new p,this.setTabAs(this._serviceTab.tabId,!1),this.setTabAs(this._paymentTab.tabId,!1),this.setAsActive(this._appointmentTab.tabId,this._appointmentTab.contentId),this._updateMode=!0}isUpdateMode(){return this._updateMode}}var H=n(20);class B extends s.a{_init(){this._service=new m,this._initAlertMessages(),this._initAppointmentsTable(),this._initAppointmentFormModal(),this._initRemoveConfirmationModal()}_initAlertMessages(){this._message=new _.a(new v.a,new f.a(document.querySelector("#alertMessage")),"update")}_initAppointmentsTable(){this._appointments=new g.a(new b.a,new L("#appointmentList",e=>{this._editAppointment(e)},e=>{this._showRemoveModalConfirmation(e)}),"add","remove","clean"),this._tableNav=new y.a("#appointmentList",{id:"tableNav"},e=>{this.searchAppointments(e)}),this._initAppointmentsSearchForm(),this.searchAppointments()}_initAppointmentsSearchForm(){this._searchModal=new E.a("main",{id:"searchModal",title:"Filtro de Pesquisa"}),document.querySelector(".btn-show-search-modal").addEventListener("click",()=>{this._searchModal.show()}),this._searchForm=new T(this._searchModal.contentSelector,new M.a("submit",e=>{e.preventDefault(),this.searchAppointments(),this._searchModal.hide()}))}_initAppointmentFormModal(){this._modalForm=new E.a("main",{id:"appointmentFormModal",title:"Formulário de Atendimento",footer:!0}),this._panelForm=new O(this._modalForm.contentSelector),this._modalForm.updateFooter(new S.a("Salvar","btn btn-primary btn-lg","button",new M.a("click",()=>{this.saveAppointmentForm()}))),document.querySelector(".btn-create-appointment").addEventListener("click",()=>{this._createAppointment()})}_initRemoveConfirmationModal(){this._modalRemoveConfirmation=new H.a("main",{id:"removeConfirmationModal",title:"Remover Atendimento",buttonLabel:"Remover Definitivamente"},e=>{this.deleteAppointment(e)})}_createAppointment(){this._panelForm.newMode(),this._modalForm.show()}_editAppointment(e){this._preLoader.run(this._service.getDetailed(e).then(e=>{this._panelForm.updateMode(e),this._modalForm.show()}))}_showRemoveModalConfirmation(e){let t=this._appointments.find(e);this._modalRemoveConfirmation.update(`\n            Você tem certeza que deseja remover definitivamente o atendimento do\n            cliente ${t.customer.fullname} marcado para o dia\n            ${r.a.toString(t.date)}?\n        `,e),this._modalRemoveConfirmation.show()}saveAppointmentForm(){let e=this._panelForm.getAppointmentDTO(),t=this._panelForm.isUpdateMode()?this._service.updateAppointment(e):this._service.createAppointment(e);this._preLoader.run(t.then(e=>{this._appointments.add(e),this._modalForm.hide(),this._message.update("","Os dados do atendimento foram salvos com sucesso","success")}))}searchAppointments(e=null){let t=this._searchForm.getDataAsParams();null!=e&&(t=t+"&page="+e),this._appointments.clean(),this._preLoader.run(this._service.getPageableAppointments(t).then(e=>{e.content.forEach(e=>{this._appointments.add(e)}),this._tableNav.update(e),this._message.update("A lista de atendimentos está atualizada","Lista Atualizada","info")}))}deleteAppointment(e){this._preLoader.run(this._service.deleteAppointment(e).then(()=>{this._modalRemoveConfirmation.hide(),this._appointments.remove(e),this._message.update("","Atendimento removido com sucesso","success")}))}}new B}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,