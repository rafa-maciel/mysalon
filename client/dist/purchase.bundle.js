!function(e){var t={};function n(a){if(t[a])return t[a].exports;var s=t[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(a,s,function(t){return e[t]}.bind(null,s));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=32)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(1);class s{constructor(e,t={}){this._component=a.a.parse(this._base(t)),this._tag="#"+t.id,this._parentSelector=e,this._info=t,this._init(),document.querySelector(this._parentSelector).appendChild(this._component)}_init(){this._initListeners(this._info.listeners)}_initListeners(e){e&&e.forEach(e=>{this._component.addEventListener(e.type,e.action)})}_base(e){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{static parse(e){return(new DOMParser).parseFromString(e,"text/html").documentElement.querySelector("body").firstChild}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{constructor(e,t){this._type=e,this._action=t}get type(){return this._type}get action(){return this._action}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{constructor(e,t,n="submit",...a){let s=document.createElement("button");return s.classList=t,s.setAttribute("type",n),s.innerHTML=e,a&&a.forEach(e=>s.addEventListener(e.type,e.action)),s}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));n(11),n(7);class a{addToken(e,t){let n=`${e} ${t}`;window.localStorage.setItem("msaloonwbtoken",n)}storeItem(e,t){window.localStorage.setItem(e,t)}cleanToken(){window.localStorage.setItem("msaloonwbtoken",null)}get token(){return window.localStorage.getItem("msaloonwbtoken")}getStoredItem(e){return window.localStorage.getItem(e)}post(e,t){let n=this._buildTransactionDetails("POST",t);return this._buildFetchTransaction(e,n)}get(e){let t=this._buildTransactionDetails("GET",null);return this._buildFetchTransaction(e,t)}put(e,t){let n=this._buildTransactionDetails("PUT",t);return this._buildFetchTransaction(e,n)}delete(e){let t=this._buildTransactionDetails("DELETE",null);return fetch(e,t).then(e=>{if(e.ok)return!0;throw new Error("A transactional error has been happened.")})}_buildTransactionHeaders(){return new Headers({"Content-type":"Application/json",Authorization:this.token})}_buildTransactionDetails(e,t){return{method:e,body:t,headers:this._buildTransactionHeaders()}}_buildFetchTransaction(e,t){return fetch(e,t).then(e=>{if(e.ok)return e.json().then(e=>e).catch(e=>!0);throw new Error("A transactional error has been happened.")})}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(0);class s extends a.a{updateFields(){document.querySelector(this._tag+" .fields").innerHTML="",document.querySelector(this._tag+" .fields").appendChild(this._template())}submit(){document.querySelector(this._tag).submit()}reset(){document.querySelector(this._tag).reset()}getData(){let e=[];return $(this._tag).serializeArray().forEach(t=>{e[t.name]=t.value}),e}getDataAsParams(){return $(this._tag).serialize()}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".fields").appendChild(this._info.initialContent),this._info.buttons&&this._info.initialButtons&&this._info.initialButtons.forEach(e=>this._component.querySelector(".buttons").appendChild(e))}_base(e){return`\n        <form id=${e.id} ${e.formClass?`class='${e.formClass}'`:""}>\n           <div class='fields'></div>\n           <div class='buttons'>\n                ${e.defaultButtons?'\n                <button type="submit" class="btn btn-primary">Salvar</button>\n                <button type="reset" class="btn btn-secondary">Limpar</button>\n                ':""}\n           </div>\n        </form>\n        `}_template(){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));n(1);var a=n(0);class s extends a.a{show(){$(this._tag).modal("show")}hide(){$(this._tag).modal("hide")}updateContent(e){document.querySelector(this._tag+" .modal-body").innerHTML="",document.querySelector(this._tag+" .modal-body").appendChild(e)}cleanContent(){document.querySelector(this._tag+" .modal-body").innerHTML=""}updateContentText(e){document.querySelector(this._tag+" .modal-body").innerHTML="<pre>"+e+"</pre>"}updateFooter(e){document.querySelector(this._tag+" .modal-footer").innerHTML="",document.querySelector(this._tag+" .modal-footer").appendChild(e)}cleanFooter(){document.querySelector(this._tag+" .modal-footer").innerHTML=""}get contentSelector(){return this._tag+" .modal-body"}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".modal-body").appendChild(this._info.initialContent),this._info.footer&&this._info.initialFooter&&this._component.querySelector(".modal-footer").appendChild(this._info.initialFooter)}_initListeners(e){e&&e.forEach(e=>{$(this._component).on(e.type,e.action)})}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="${e.label?e.label:"myLargeModal"}" aria-hidden="true">\n            <div class="modal-dialog ${e.modalClass?e.modalClass:""}" role="document">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title">${e.title}</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                            <span aria-hidden="true">&times;</span>\n                        </button>\n                    </div>\n            \n                    <div class="modal-body">\n                    </div>\n\n                    ${e.footer?'\n                    <div class="modal-footer">\n                        \n                    </div>\n                    ':""}\n                </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(4);class s{constructor(){this._serverURL="http://localhost:8080/auth",this._webtoken="msaloonwbtoken",this._http=new a.a}hasValidToken(){return this._http.get(this._serverURL)}authenticate(e){let t={method:"POST",body:JSON.stringify(e),headers:{"Content-type":"Application/json"}};return fetch(this._serverURL,t).then(e=>{if(e.ok&&200==e.status)return e.json();throw new Error("The signin data is not correct")}).then(e=>{this._http.addToken(e.type,e.token)})}logout(){this._http.cleanToken()}redirectToLoginPage(){window.location.href="/login.html"}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{equals(e){throw new Error("The equals method must be implemented")}equalsFor(e){throw new Error("The equalsFor method must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{static create(e,t,n){return new Proxy(e,{get:(e,s,r)=>t.includes(s)&&a._isFuntion(e[s])?function(){let t=Reflect.apply(e[s],e,arguments);return n(e),t}:Reflect.get(e,s,r),set(e,a,s,r){let i=Reflect.set(e,a,s,r);return t.includes(a)&&n(e),i}})}static _isFuntion(e){return typeof e==typeof Function}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(0);class s extends a.a{constructor(e){super(e)}_base(e){return'\n        <nav class="sidebar">\n          <div class="sidebar-sticky">\n            <ul class="nav flex-column">\n              <li class="nav-item">\n                <a class="nav-link active" href="./schedule.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>\n                  Dashboard <span class="sr-only">(current)</span>\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./customers.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>\n                  Clientes\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./professionals.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Profissionais\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./vendors.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Fornecedores\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./purchases.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Compras\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./appointments.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Atendimentos (Consultas)\n                </a>\n              </li>\n            </ul>\n    \n            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">\n              <span>Minha Conta</span>\n            </h6>\n            <ul class="nav flex-column mb-2">\n              <li class="nav-item">\n                <a class="nav-link" href="./profile.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>\n                  Meu Perfil\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        '}}class r extends a.a{constructor(e,t){super(e),this._initHeaderNavigation(t)}_initHeaderNavigation(e){this._component.querySelector("a.logout").addEventListener(e.type,e.action)}_base(e){return'\n        <nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">\n            <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">My Saloon Web</a>\n            <input class="form-control form-control-dark w-100" type="text" placeholder="Pesquisar" aria-label="Pesquisar">\n            <ul class="navbar-nav px-3">\n                <li class="nav-item text-nowrap">\n                <a class="nav-link logout" href="#">Logoff</a>\n                </li>\n            </ul>\n        </nav>\n        '}}var i=n(2),o=n(7),l=n(1);class d extends a.a{constructor(){super("#headerNavigation"),this._initLoaderComponent()}start(){this._component.appendChild(this._loaderComponent),this._component.classList.add("pre-loader-running")}stop(){this._component.innerHTML="",this._component.classList.remove("pre-loader-running")}run(e){this.start(),e.then(()=>{this.stop()})}_initLoaderComponent(){this._loaderComponent=l.a.parse('\n        <div class="loader-panel">\n            <div id="loader4">\n                <span class="loader loader-1"></span>\n                <span class="loader loader-2"></span>\n                <span class="loader loader-3"></span>\n                <span class="loader loader-4"></span>\n            </div>\n        </div>\n        ')}_base(){return'\n        <div class="row" id="preLoader">\n            \n        </div>\n        '}}class c{constructor(){this._preLoader=new d,this._authService=new o.a,this._validAuthenticatedClient(),this._headerNav=new r("#headerNavigation",new i.a("click",e=>{this.doLogoff()})),this._dashboardNav=new s("#dashboardNavigation"),this._init()}doLogoff(){this._authService.logout(),this._authService.redirectToLoginPage()}_init(){throw new Error("the _init() method must be implemented")}_validAuthenticatedClient(){this._authService.hasValidToken().catch(()=>{this._authService.redirectToLoginPage()})}}},function(e,t,n){"use strict"},,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{static toString(e){return`${e.getDate()}/${e.getMonth()+1}/${e.getFullYear()}`}static toDate(e){return new Date(e+"T03:00:00Z")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(9);class s{constructor(e,t,...n){let s=a.a.create(e,n,e=>t.update(e));return t.update(e),s}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{constructor(){this._title="",this._message="",this._type="primary"}update(e,t="",n="primary"){this._title=t,this._message=e,this._type=n}get title(){return this._title}get message(){return this._message}get type(){return this._type}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a extends class{constructor(e){this._element=e}_template(e){throw new Error("Template method must be implemented")}update(e){this._element.innerHTML=this._template(e)}}{_template(e){return`\n        <div class="alert alert-${e.type} alert-dismissible fade show" role="alert">\n            <h4 class="alert-heading">${e.title}</h4>\n            <p class='text-muted'>${e.message}</p>\n            <button type="button" class="close" data-dismiss="alert" aria-label="Close">\n                <span aria-hidden="true">&times;</span>\n            </button>\n        </div>\n        `}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{constructor(){this._list=[],this._pageableInfo=void 0}clean(){this._list=[],this._pageableInfo=void 0}add(e){this._list.some(t=>t.equals(e))?this._list.forEach((t,n)=>{t.equals(e)&&(this._list[n]=e)}):this._list.push(e)}find(e){return this._list.find(t=>t.equalsFor(e))}updatePageableInfo(e){this._pageableInfo=e}remove(e){this._list.forEach((t,n)=>{t.equalsFor(e)&&this._list.splice(n,1)})}get list(){return this._list}get pageableInfo(){return this._pageableInfo}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(0);class s extends a.a{_updateList(e){let t=document.querySelector(this._tag+" tbody");t.innerHTML="",e.forEach(e=>t.appendChild(e))}_appendItem(e){document.querySelector(this._tag+" tbody").appendChild(e)}_cleanTable(){document.querySelector(this._tag+" tbody").innerHTML=""}_removeLine(e){document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`).remove()}_updateLine(e,t){let n=document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`);n.parentNode.replaceChild(t,n)}_createTableLine(e,t,...n){let a=document.createElement("tr");if(a.setAttribute("data-key",e),t.forEach(e=>{let t=document.createElement("td");t.innerHTML=e,a.appendChild(t)}),n){let e=document.createElement("td");n.forEach(t=>e.appendChild(t)),a.appendChild(e)}return a}_base(e){return`\n        <table class="table table-hover" id=${e.id}>\n            <thead>\n                <tr>\n                    ${e.headers.map(e=>`\n                        <th scope="col">${e}</th>\n                    `).join("")}\n                </tr>\n            </thead>\n            <tbody>\n                ${e.initialContent?initialContent:""}\n            </tbody>\n        </table>\n        `}}class r extends s{updateFromModel(e){this._cleanTable(),e.list.forEach(e=>this._appendItem(this._createLineTableFromModel(e)))}_createLineTableFromModel(e){throw new Error("_createLineTableFromModel must been implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(6);class s extends a.a{constructor(e,t,n){super(e,t),this._removeAction=n}_init(){super._init(),this._component.querySelector(this._tag+" form").addEventListener("submit",e=>{e.preventDefault();let t=document.querySelector(this._tag+' form input[name="key"]').value;this._removeAction(t)})}update(e,t){document.querySelector(this._tag+" .modal-body .alert").innerHTML=e,document.querySelector(this._tag+' form input[name="key"]').value=t}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog">\n            <div class="modal-dialog modal-sm" role="document">\n            <div class="modal-content">\n                <div class="modal-header">\n                <h5 class="modal-title">${e.title}</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n                </div>\n                <div class="modal-body">\n                <div class="alert alert-danger" role="alert">\n                    ${e.message}\n                </div>\n                <p class="text-muted">Essa ação não poderá ser desfeita</p>\n                <form>\n                    <input type="hidden" name="key">\n                    <button class="btn btn-danger btn-sm btn-block" type="submit">${e.buttonLabel}</button>\n                </form>\n                </div>\n            </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(9);class s{constructor(e,t,...n){let s=a.a.create(e,n,e=>t.updateFromModel(e));return t.updateFromModel(e),s}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{constructor(e,t,n,a,s,r,i,o,l,d,c=[]){this._pageNumber=e,this._pageSize=t,this._totalElements=n,this._totalPages=a,this._numberOfElements=s,this._first=r,this._last=i,this._number=o,this._size=l,this._empty=d,this._content=c}static buildFrom(e,t){let n=e.pageable;return new a(n.pageNumber,n.pageSize,e.totalElements,e.totalPages,e.numberOfElements,e.first,e.last,e.number,e.size,e.empty,t)}get pageNumber(){return this._pageNumber}get pageSize(){return this._pageSize}get totalElements(){return this._totalElements}get totalPages(){return this._totalPages}get numberOfElements(){return this._numberOfElements}get first(){return this._first}get last(){return this._last}get number(){return this._number}get size(){return this._size}get empty(){return this._empty}get content(){return this._content}get previous(){return this.number-1}get next(){return this.number+1}get hasNext(){return this._number<this._totalPages-1}get hasPrevious(){return this._number>0}get paged(){return this._totalPages>1}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(0),s=n(1),r=n(3),i=n(2);class o extends a.a{constructor(e,t={},n){super(e,t),this._pageAction=n}update(e){document.querySelector(this._tag).innerHTML="",document.querySelector(this._tag).appendChild(this._template(e)),this._createPaginationNavButtons(e).forEach(e=>document.querySelector(this._tag+" .pagination").appendChild(e))}_createPaginationNavButtons(e){let t=[],n=new r.a("Anterior","page-link","button",new i.a("click",()=>this._pageAction(e.previous)));t.push(this._createListItem(!e.hasPrevious,n));for(let n=0;n<e.totalPages;n++){let a=new r.a(n+1,"page-link","button",new i.a("click",()=>this._pageAction(n)));t.push(this._createListItem(e.number==n,a))}let a=new r.a("Proxima","page-link","button",new i.a("click",()=>this._pageAction(e.next)));return t.push(this._createListItem(!e.hasNext,a)),t}_createListItem(e=!1,t){let n=document.createElement("li");return n.classList="page-item "+(e?"disabled":""),n.appendChild(t),n}_template(e){let t=e?`\n        <div>\n            <p class='text-muted'>Exibindo ${e.numberOfElements} de ${e.totalElements}</p>\n            <nav aria-label="Page navigation example">\n                <ul class="pagination justify-content-center">\n                </ul>\n            </nav>\n        </div>\n        `:"";return s.a.parse(t)}_base(e){return`\n        <div class="row>\n            <div class="col-sm-12 col-md-5">\n                <div id='${e.id}'><div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var a=n(8);class s extends a.a{constructor(e,t,n,a,s=""){super(),this._name=e,this._phone=t,this._secondaryPhone=n,this._notes=a,this._id=s}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get name(){return this._name}get phone(){return this._phone}get secondaryPhone(){return this._secondaryPhone}get notes(){return this._notes}get id(){return this._id}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(4),s=n(25);class r{constructor(){this._serverUrl="http://localhost:8080/vendors",this._http=new a.a}getAll(){return this._http.get(this._serverUrl).then(e=>e.map(e=>this._getFromData(e))).catch(e=>{throw console.log(e),new Error("Não foi possivel listar os fornecedores")})}getById(e){let t=`${this._serverUrl}/${e}`;return this._http.get(t).then(e=>this._getFromData(e))}create(e){return this._http.post(this._serverUrl,JSON.stringify(e)).then(e=>this._getFromData(e))}update(e){let t=`${this._serverUrl}/${e.id}`;return this._http.put(t,JSON.stringify(e)).then(e=>this._getFromData(e))}delete(e){let t=`${this._serverUrl}/${e}`;return this._http.delete(t)}_getFromData(e){return new s.a(e.name,e.phone,e.secondaryPhone,e.notes,e.id)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{constructor(e){this._paymentMethod=e,this._labels={CREDIT_CARD:"Cartão de Crédito",MONEY:"Dinheiro"}}equals(e){return null!=this._paymentMethod&&this._paymentMethod==e}get label(){return this._labels[this._paymentMethod]}get method(){return this._paymentMethod}}},,,,function(e,t,n){"use strict";n.r(t);var a=n(10),s=n(14),r=n(15),i=n(16),o=n(21),l=n(18),d=n(19),c=n(3),u=n(2),h=n(13);class p extends d.a{constructor(e,t,n,a){super(e,{id:"purchasesTable",headers:["Data","Valor","Metodo De Pagamento","Fornecedor","Ações"]}),this._editAction=t,this._removeAction=n,this._showNotes=a}_createLineTableFromModel(e){let t=new c.a("Editar","btn btn-outline-primary btn-sm","button",new u.a("click",()=>this._editAction(e.id))),n=new c.a("Remover","btn btn-outline-danger btn-sm","button",new u.a("click",()=>this._removeAction(e.id))),a=new c.a("Notas","btn btn-outline-info btn-sm","button",new u.a("click",()=>this._showNotes(e.notes)));return this._createTableLine(e.id,[h.a.toString(e.date),e.value,e.paymentMethod.label,e.vendor],a,t,n)}}var m=n(4),_=n(8),v=n(28);class f extends _.a{constructor(e,t,n,a,s,r=""){super(),this._value=e,this._date=null!=t?new Date(h.a.toDate(t)):null,this._notes=n,this._paymentMethod=new v.a(a),this._vendor=s,this._id=r}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get value(){return this._value}get date(){return this._date}get notes(){return this._notes}get paymentMethod(){return this._paymentMethod}get vendor(){return this._vendor}get id(){return this._id}}var g=n(23);class b{constructor(){this._serverUrl="http://localhost:8080/purchases",this._http=new m.a}getPageablePurchases(e=null){let t=this._serverUrl+"/search";return null!=e&&(t=t+"?"+e),this._http.get(t).then(e=>g.a.buildFrom(e,e.content.map(e=>this._getPurchaseFromData(e))))}updatePurchase(e){let t=this._serverUrl+"/"+e.id;return this._http.put(t,JSON.stringify(e)).then(e=>this._getPurchaseFromData(e))}createPurchase(e){let t=this._serverUrl;return this._http.post(t,JSON.stringify(e)).then(e=>this._getPurchaseFromData(e))}deletePurchase(e){let t=this._serverUrl+"/"+e;return this._http.delete(t)}_getPurchaseFromData(e){return new f(e.value,e.date,e.notes,e.paymentMethod,e.vendorName,e.id)}}var y=n(5),w=n(1),M=n(27);class C extends y.a{constructor(e,...t){super(e,{id:"purchaseSearchForm",buttons:!0,initialButtons:[new c.a("Filtrar","btn btn-primary btn-sm float-right","submit"),new c.a("Limpar Filtro","btn btn-secondary btn-sm","reset")],listeners:t}),this._vendorList=[],(new M.a).getAll().then(e=>{this._vendorList=e,this.updateFields()})}_template(){let e=`\n            <div>\n                <div class="form-group">\n                    <label for="value">Valor</label>\n                    <div class="input-group">\n                        <div class="input-group-prepend">\n                            <select name="valueOperation">\n                                <option value="EQUAL">Igual a</option>\n                                <option value="GREATER_THAN">Maior que</option>\n                                <option value="LESS_THAN">Menor que</option>\n                                <option value="BETWEEN">Entre</option>\n                            </select>\n                        </div>    \n                        <input type="number" min="0.00" step="0.01" class="form-control" id="value" name="value">\n                        <input type="number" min="0.00" step="0.01" class="form-control" id="valueMax" name="valueMax">\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="date">Data</label>\n                    <div class="input-group">\n                        <div class="input-group-prepend">\n                            <select name="dateOperation">\n                                <option value="EQUAL">Igual a</option>\n                                <option value="GREATER_THAN">Maior que</option>\n                                <option value="LESS_THAN">Menor que</option>\n                                <option value="BETWEEN">Entre</option>\n                            </select>\n                        </div> \n\n                        <input type="date" class="form-control" id="date" name="date">\n                        <input type="date" class="form-control" id="dateMax" name="dateMax">\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label for="paymentMethod">Tipo de Pagamento</label>\n                    <select name="paymentMethod" class="form-control">\n                        <option value="">Todos</option>\n                        <option value="CREDIT_CARD">Cartão de Crédito</option>\n                        <option value="MONEY">Dinheiro</option>\n                    </select>\n                </div>\n\n                <div class="form-group">\n                    <label for="vendor">Fornecedor</label>\n                    <select name="vendorId" class="form-control">\n                        <option value="">Todos</option>\n                        ${this._vendorList.map(e=>`\n                            <option value="${e.id}">${e.name}</option>\n                        `).join("")}\n                    </select>\n                </div>\n\n                <div class="row">\n                    <div class="form-group col-md-6">\n                        <label for="size">Itens por Pagina</label>\n                        <select name="size" class="form-control">\n                            <option value="20">20</option>\n                            <option value="10">10</option>\n                            <option value="5">5</option>\n                            <option value="2">2</option>\n                        </select>\n                    </div>\n\n                    <div class="form-group col-md-6">\n                        <label for="sort">Ordenar Por:</label>\n                        <select name="sort" class="form-control">\n                            <option value="">Sem Ordenação</option>\n                            <option value="value,ASC">Valor (crescente)</option>\n                            <option value="value,DESC">Valor (Decrescente)</option>\n                            <option value="date,ASC">Data (Crescente)</option>\n                            <option value="date,DESC">Data (Decrescente)</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        `;return w.a.parse(e)}}var S=n(6);class E{constructor(e,t,n,a,s,r=""){this.value=e,this.date=new Date(t),this.notes=n,this.paymentMethod=a,this.vendorId=s,this.id=r}}class P extends y.a{constructor(e,...t){super(e,{id:"purchaseForm",listeners:t}),this._purchase=new f,this._vendorList=[],(new M.a).getAll().then(e=>{this._vendorList=e,this.updateFields()})}set purchase(e){this._purchase=e,this.updateFields()}get purchase(){let e=this.getData();return new E(e.value,e.date,e.notes,e.paymentMethod,e.vendorId,e.id)}_template(){let e=`\n        <div>\n            <input type="hidden" class="form-control" name="id" value="${this._purchase.id?this._purchase.id:""}">\n            <div class="form-row">\n                <div class="form-group col-md-6">\n                    <label for="date">Data</label>\n                    <input type="date" class="form-control" name="date" \n                        value="${this._purchase.date?this._purchase.date.toISOString().slice(0,10):""}">\n                </div>\n                <div class="form-group col-md-6">\n                    <label for="value">Fornecedor</label>\n                    <select class="form-control" name="vendorId">\n                        ${this._vendorList.map(e=>`\n                            <option value="${e.id}">${e.name}</option>\n                        `).join("")}\n                    </select>\n                </div>\n            </div>\n\n            <div class="form-row">\n                <div class="form-group col-md-6">\n                    <label for="value">Valor</label>\n                    <input type="number" min="0.00" step="0.01" class="form-control" name="value"\n                        value="${this._purchase.value?this._purchase.value:""}">\n                </div>\n                <div class="form-group col-md-6">\n                    <label for="paymentMethod">Meio de Pagamento</label>\n                    <select class="form-control" name="paymentMethod">\n                        <option value="CREDIT_CARD" ${this._purchase.paymentMethod.equals("CREDIT_CARD")?"selected":""}>Cartão de Crédito</option>\n                        <option value="MONEY" ${this._purchase.paymentMethod.equals("MONEY")?"selected":""}>Dinheiro</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class="form-group">\n                <label for="notes">Notas/Produtos</label>\n                <textarea class="form-control" name="notes">${this._purchase.notes?this._purchase.notes:""}</textarea>\n            </div>\n        </div>\n        `;return w.a.parse(e)}}var k=n(20),L=n(24);class T extends a.a{_init(){this._service=new b,this._initAlertMessages(),this._initPurchaseTable(),this._initPurchaseFormModal(),this._initRemoveConfirmationModal()}savePurchaseForm(){let e=this._purchaseForm.purchase,t=e.id?this._service.updatePurchase(e):this._service.createPurchase(e);this._preLoader.run(t.then(e=>{this._purchases.add(e),this._modalForm.hide(),this._message.update("","Os dados da compra foram salvos com sucesso","success")}))}deletePurchase(e){this._preLoader.run(this._service.deletePurchase(e).then(()=>{this._modalRemoveConfirmation.hide(),this._purchases.remove(e),this._message.update("","Compra removida com sucesso","success")}))}searchPurchases(e=null){let t=this._purchasesSearchForm.getDataAsParams();null!=e&&(t=t+"&page="+e),this._purchases.clean(),this._preLoader.run(this._service.getPageablePurchases(t).then(e=>{e.content.forEach(e=>this._purchases.add(e)),this._tableNav.update(e),this._message.update("A lista de compras está atualizar com o servidor","Lista atualizada de compras","info")}))}_initAlertMessages(){this._message=new s.a(new r.a,new i.a(document.querySelector("#alertMessage")),"update")}_initPurchaseTable(){this._purchases=new o.a(new l.a,new p("#purchaseList",e=>{this._editPurchase(e)},e=>{this._showRemoveConfirmation(e)},e=>{this._showNotes(e)}),"add","remove","clean"),this._tableNav=new L.a("#purchaseList",{id:"tableNav"},e=>this.searchPurchases(e)),this._searchModal=new S.a("#searchPanel",{id:"searchModal",title:"Filtro de Pesquisa"}),this._purchasesSearchForm=new C(this._searchModal.contentSelector,new u.a("submit",e=>{e.preventDefault(),this.searchPurchases(),this._searchModal.hide()})),this._notesModal=new S.a("#purchaseList",{id:"notesModal",title:"Notas da compra"}),document.querySelector(".btn-show-search-modal").addEventListener("click",()=>{this._searchModal.show()}),this.searchPurchases()}_initPurchaseFormModal(){this._modalForm=new S.a("main",{id:"PurchaseFormModal",title:"Formulário de Compras",footer:!0}),this._purchaseForm=new P(this._modalForm.contentSelector),this._initPurchaseFormModalButtons(),document.querySelector(".btn-create-purchase").addEventListener("click",()=>{this._createPurchase()})}_initPurchaseFormModalButtons(){this._modalForm.updateFooter(new c.a("Salvar","btn btn-primary btn-lg","button",new u.a("click",()=>{this.savePurchaseForm()})))}_initRemoveConfirmationModal(){this._modalRemoveConfirmation=new k.a("main",{id:"removeConfirmationModal",title:"Remover Compra",buttonLabel:"Remover Definitivamente"},e=>{this.deletePurchase(e)})}_createPurchase(){this._purchaseForm.purchase=new f,this._modalForm.show()}_editPurchase(e){let t=this._purchases.find(e);this._purchaseForm.purchase=t,this._modalForm.show()}_showRemoveConfirmation(e){let t=this._purchases.find(e);this._modalRemoveConfirmation.update(`\n            Você tem certeza que deseja remover definitivamente a compra \n            do dia ${h.a.toString(t.date)} no valor de\n            ${t.value}?\n        `,e),this._modalRemoveConfirmation.show()}_showNotes(e){this._notesModal.updateContentText(e),this._notesModal.show()}}new T}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,