!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=33)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var o=n(1);class r{constructor(e,t={}){this._component=o.a.parse(this._base(t)),this._tag="#"+t.id,this._parentSelector=e,this._info=t,this._init(),document.querySelector(this._parentSelector).appendChild(this._component)}_init(){this._initListeners(this._info.listeners)}_initListeners(e){e&&e.forEach(e=>{this._component.addEventListener(e.type,e.action)})}_base(e){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o{static parse(e){return(new DOMParser).parseFromString(e,"text/html").documentElement.querySelector("body").firstChild}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o{constructor(e,t){this._type=e,this._action=t}get type(){return this._type}get action(){return this._action}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o{constructor(e,t,n="submit",...o){let r=document.createElement("button");return r.classList=t,r.setAttribute("type",n),r.innerHTML=e,o&&o.forEach(e=>r.addEventListener(e.type,e.action)),r}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));n(11),n(7);class o{addToken(e,t){let n=`${e} ${t}`;window.localStorage.setItem("msaloonwbtoken",n)}storeItem(e,t){window.localStorage.setItem(e,t)}cleanToken(){window.localStorage.setItem("msaloonwbtoken",null)}get token(){return window.localStorage.getItem("msaloonwbtoken")}getStoredItem(e){return window.localStorage.getItem(e)}post(e,t){let n=this._buildTransactionDetails("POST",t);return this._buildFetchTransaction(e,n)}get(e){let t=this._buildTransactionDetails("GET",null);return this._buildFetchTransaction(e,t)}put(e,t){let n=this._buildTransactionDetails("PUT",t);return this._buildFetchTransaction(e,n)}delete(e){let t=this._buildTransactionDetails("DELETE",null);return fetch(e,t).then(e=>{if(e.ok)return!0;throw new Error("A transactional error has been happened.")})}_buildTransactionHeaders(){return new Headers({"Content-type":"Application/json",Authorization:this.token})}_buildTransactionDetails(e,t){return{method:e,body:t,headers:this._buildTransactionHeaders()}}_buildFetchTransaction(e,t){return fetch(e,t).then(e=>{if(e.ok)return e.json().then(e=>e).catch(e=>!0);throw new Error("A transactional error has been happened.")})}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var o=n(0);class r extends o.a{updateFields(){document.querySelector(this._tag+" .fields").innerHTML="",document.querySelector(this._tag+" .fields").appendChild(this._template())}submit(){document.querySelector(this._tag).submit()}reset(){document.querySelector(this._tag).reset()}getData(){let e=[];return $(this._tag).serializeArray().forEach(t=>{e[t.name]=t.value}),e}getDataAsParams(){return $(this._tag).serialize()}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".fields").appendChild(this._info.initialContent),this._info.buttons&&this._info.initialButtons&&this._info.initialButtons.forEach(e=>this._component.querySelector(".buttons").appendChild(e))}_base(e){return`\n        <form id=${e.id} ${e.formClass?`class='${e.formClass}'`:""}>\n           <div class='fields'></div>\n           <div class='buttons'>\n                ${e.defaultButtons?'\n                <button type="submit" class="btn btn-primary">Salvar</button>\n                <button type="reset" class="btn btn-secondary">Limpar</button>\n                ':""}\n           </div>\n        </form>\n        `}_template(){throw new Error("the method fieldsTempalte must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n(1);var o=n(0);class r extends o.a{show(){$(this._tag).modal("show")}hide(){$(this._tag).modal("hide")}updateContent(e){document.querySelector(this._tag+" .modal-body").innerHTML="",document.querySelector(this._tag+" .modal-body").appendChild(e)}cleanContent(){document.querySelector(this._tag+" .modal-body").innerHTML=""}updateContentText(e){document.querySelector(this._tag+" .modal-body").innerHTML="<pre>"+e+"</pre>"}updateFooter(e){document.querySelector(this._tag+" .modal-footer").innerHTML="",document.querySelector(this._tag+" .modal-footer").appendChild(e)}cleanFooter(){document.querySelector(this._tag+" .modal-footer").innerHTML=""}get contentSelector(){return this._tag+" .modal-body"}_init(){super._init(),this._info.initialContent&&this._component.querySelector(".modal-body").appendChild(this._info.initialContent),this._info.footer&&this._info.initialFooter&&this._component.querySelector(".modal-footer").appendChild(this._info.initialFooter)}_initListeners(e){e&&e.forEach(e=>{$(this._component).on(e.type,e.action)})}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="${e.label?e.label:"myLargeModal"}" aria-hidden="true">\n            <div class="modal-dialog ${e.modalClass?e.modalClass:""}" role="document">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title">${e.title}</h5>\n                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                            <span aria-hidden="true">&times;</span>\n                        </button>\n                    </div>\n            \n                    <div class="modal-body">\n                    </div>\n\n                    ${e.footer?'\n                    <div class="modal-footer">\n                        \n                    </div>\n                    ':""}\n                </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var o=n(4);class r{constructor(){this._serverURL="http://localhost:8080/auth",this._webtoken="msaloonwbtoken",this._http=new o.a}hasValidToken(){return this._http.get(this._serverURL)}authenticate(e){let t={method:"POST",body:JSON.stringify(e),headers:{"Content-type":"Application/json"}};return fetch(this._serverURL,t).then(e=>{if(e.ok&&200==e.status)return e.json();throw new Error("The signin data is not correct")}).then(e=>{this._http.addToken(e.type,e.token)})}logout(){this._http.cleanToken()}redirectToLoginPage(){window.location.href="/login.html"}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o{equals(e){throw new Error("The equals method must be implemented")}equalsFor(e){throw new Error("The equalsFor method must be implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o{static create(e,t,n){return new Proxy(e,{get:(e,r,s)=>t.includes(r)&&o._isFuntion(e[r])?function(){let t=Reflect.apply(e[r],e,arguments);return n(e),t}:Reflect.get(e,r,s),set(e,o,r,s){let i=Reflect.set(e,o,r,s);return t.includes(o)&&n(e),i}})}static _isFuntion(e){return typeof e==typeof Function}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var o=n(0);class r extends o.a{constructor(e){super(e)}_base(e){return'\n        <nav class="sidebar">\n          <div class="sidebar-sticky">\n            <ul class="nav flex-column">\n              <li class="nav-item">\n                <a class="nav-link active" href="./schedule.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>\n                  Dashboard <span class="sr-only">(current)</span>\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./customers.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>\n                  Clientes\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./professionals.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Profissionais\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./vendors.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Fornecedores\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./purchases.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Compras\n                </a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" href="./appointments.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>\n                  Atendimentos (Consultas)\n                </a>\n              </li>\n            </ul>\n    \n            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">\n              <span>Minha Conta</span>\n            </h6>\n            <ul class="nav flex-column mb-2">\n              <li class="nav-item">\n                <a class="nav-link" href="./profile.html">\n                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>\n                  Meu Perfil\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        '}}class s extends o.a{constructor(e,t){super(e),this._initHeaderNavigation(t)}_initHeaderNavigation(e){this._component.querySelector("a.logout").addEventListener(e.type,e.action)}_base(e){return'\n        <nav class="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">\n            <a class="navbar-brand col-sm-3 col-md-2 mr-0" href="#">My Saloon Web</a>\n            <input class="form-control form-control-dark w-100" type="text" placeholder="Pesquisar" aria-label="Pesquisar">\n            <ul class="navbar-nav px-3">\n                <li class="nav-item text-nowrap">\n                <a class="nav-link logout" href="#">Logoff</a>\n                </li>\n            </ul>\n        </nav>\n        '}}var i=n(2),a=n(7),l=n(1);class d extends o.a{constructor(){super("#headerNavigation"),this._initLoaderComponent()}start(){this._component.appendChild(this._loaderComponent),this._component.classList.add("pre-loader-running")}stop(){this._component.innerHTML="",this._component.classList.remove("pre-loader-running")}run(e){this.start(),e.then(()=>{this.stop()})}_initLoaderComponent(){this._loaderComponent=l.a.parse('\n        <div class="loader-panel">\n            <div id="loader4">\n                <span class="loader loader-1"></span>\n                <span class="loader loader-2"></span>\n                <span class="loader loader-3"></span>\n                <span class="loader loader-4"></span>\n            </div>\n        </div>\n        ')}_base(){return'\n        <div class="row" id="preLoader">\n            \n        </div>\n        '}}class c{constructor(){this._preLoader=new d,this._authService=new a.a,this._validAuthenticatedClient(),this._headerNav=new s("#headerNavigation",new i.a("click",e=>{this.doLogoff()})),this._dashboardNav=new r("#dashboardNavigation"),this._init()}doLogoff(){this._authService.logout(),this._authService.redirectToLoginPage()}_init(){throw new Error("the _init() method must be implemented")}_validAuthenticatedClient(){this._authService.hasValidToken().catch(()=>{this._authService.redirectToLoginPage()})}}},function(e,t,n){"use strict"},,,function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var o=n(9);class r{constructor(e,t,...n){let r=o.a.create(e,n,e=>t.update(e));return t.update(e),r}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o{constructor(){this._title="",this._message="",this._type="primary"}update(e,t="",n="primary"){this._title=t,this._message=e,this._type=n}get title(){return this._title}get message(){return this._message}get type(){return this._type}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o extends class{constructor(e){this._element=e}_template(e){throw new Error("Template method must be implemented")}update(e){this._element.innerHTML=this._template(e)}}{_template(e){return`\n        <div class="alert alert-${e.type} alert-dismissible fade show" role="alert">\n            <h4 class="alert-heading">${e.title}</h4>\n            <p class='text-muted'>${e.message}</p>\n            <button type="button" class="close" data-dismiss="alert" aria-label="Close">\n                <span aria-hidden="true">&times;</span>\n            </button>\n        </div>\n        `}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));class o{constructor(){this._list=[],this._pageableInfo=void 0}clean(){this._list=[],this._pageableInfo=void 0}add(e){this._list.some(t=>t.equals(e))?this._list.forEach((t,n)=>{t.equals(e)&&(this._list[n]=e)}):this._list.push(e)}find(e){return this._list.find(t=>t.equalsFor(e))}updatePageableInfo(e){this._pageableInfo=e}remove(e){this._list.forEach((t,n)=>{t.equalsFor(e)&&this._list.splice(n,1)})}get list(){return this._list}get pageableInfo(){return this._pageableInfo}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var o=n(0);class r extends o.a{_updateList(e){let t=document.querySelector(this._tag+" tbody");t.innerHTML="",e.forEach(e=>t.appendChild(e))}_appendItem(e){document.querySelector(this._tag+" tbody").appendChild(e)}_cleanTable(){document.querySelector(this._tag+" tbody").innerHTML=""}_removeLine(e){document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`).remove()}_updateLine(e,t){let n=document.querySelector(`${this._tag} tbody tr[data-key="${e}"]`);n.parentNode.replaceChild(t,n)}_createTableLine(e,t,...n){let o=document.createElement("tr");if(o.setAttribute("data-key",e),t.forEach(e=>{let t=document.createElement("td");t.innerHTML=e,o.appendChild(t)}),n){let e=document.createElement("td");n.forEach(t=>e.appendChild(t)),o.appendChild(e)}return o}_base(e){return`\n        <table class="table table-hover" id=${e.id}>\n            <thead>\n                <tr>\n                    ${e.headers.map(e=>`\n                        <th scope="col">${e}</th>\n                    `).join("")}\n                </tr>\n            </thead>\n            <tbody>\n                ${e.initialContent?initialContent:""}\n            </tbody>\n        </table>\n        `}}class s extends r{updateFromModel(e){this._cleanTable(),e.list.forEach(e=>this._appendItem(this._createLineTableFromModel(e)))}_createLineTableFromModel(e){throw new Error("_createLineTableFromModel must been implemented")}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var o=n(6);class r extends o.a{constructor(e,t,n){super(e,t),this._removeAction=n}_init(){super._init(),this._component.querySelector(this._tag+" form").addEventListener("submit",e=>{e.preventDefault();let t=document.querySelector(this._tag+' form input[name="key"]').value;this._removeAction(t)})}update(e,t){document.querySelector(this._tag+" .modal-body .alert").innerHTML=e,document.querySelector(this._tag+' form input[name="key"]').value=t}_base(e){return`\n        <div id="${e.id}" class="modal fade" tabindex="-1" role="dialog">\n            <div class="modal-dialog modal-sm" role="document">\n            <div class="modal-content">\n                <div class="modal-header">\n                <h5 class="modal-title">${e.title}</h5>\n                <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n                </div>\n                <div class="modal-body">\n                <div class="alert alert-danger" role="alert">\n                    ${e.message}\n                </div>\n                <p class="text-muted">Essa ação não poderá ser desfeita</p>\n                <form>\n                    <input type="hidden" name="key">\n                    <button class="btn btn-danger btn-sm btn-block" type="submit">${e.buttonLabel}</button>\n                </form>\n                </div>\n            </div>\n            </div>\n        </div>\n        `}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var o=n(9);class r{constructor(e,t,...n){let r=o.a.create(e,n,e=>t.updateFromModel(e));return t.updateFromModel(e),r}}},,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var o=n(8);class r extends o.a{constructor(e,t,n,o,r=""){super(),this._name=e,this._phone=t,this._secondaryPhone=n,this._notes=o,this._id=r}equals(e){return this._id==e.id}equalsFor(e){return this._id==e}get name(){return this._name}get phone(){return this._phone}get secondaryPhone(){return this._secondaryPhone}get notes(){return this._notes}get id(){return this._id}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var o=n(4),r=n(25);class s{constructor(){this._serverUrl="http://localhost:8080/vendors",this._http=new o.a}getAll(){return this._http.get(this._serverUrl).then(e=>e.map(e=>this._getFromData(e))).catch(e=>{throw console.log(e),new Error("Não foi possivel listar os fornecedores")})}getById(e){let t=`${this._serverUrl}/${e}`;return this._http.get(t).then(e=>this._getFromData(e))}create(e){return this._http.post(this._serverUrl,JSON.stringify(e)).then(e=>this._getFromData(e))}update(e){let t=`${this._serverUrl}/${e.id}`;return this._http.put(t,JSON.stringify(e)).then(e=>this._getFromData(e))}delete(e){let t=`${this._serverUrl}/${e}`;return this._http.delete(t)}_getFromData(e){return new r.a(e.name,e.phone,e.secondaryPhone,e.notes,e.id)}}},,,,,,function(e,t,n){"use strict";n.r(t);var o=n(14),r=n(18),s=n(27),i=n(15),a=n(16),l=n(6),d=n(5),c=n(25);class h{constructor(e,t,n,o,r=""){this.name=e,this.phone=t,this.secondaryPhone=n,this.notes=o,this.id=r}}var u=n(1);class m extends d.a{constructor(e,...t){super(e,{id:"vendorForm",listeners:t}),this._vendor=new c.a,this.updateFields()}set vendor(e){this._vendor=e,this.updateFields()}getVendorDTO(){let e=this.getData();return new h(e.name,e.phone,e.secondaryPhone,e.notes,e.id)}_template(){let e=`\n            <div>\n                <input type="hidden" class="form-control" id="id" name="id" value="${this._vendor.id?this._vendor.id:""}">\n                <div class="form-group">\n                    <label for="name">Nome</label>\n                    <input type="text" min="3" max="20" class="form-control id="name" name="name" \n                        placeholder="Maria Souza Silva" value="${this._vendor.name?this._vendor.name:""}">\n                </div>\n        \n                <div class="form-row">\n                    <div class="form-group col-md-6">\n                        <label for="phone">Telefone</label>\n                        <input type="text" class="form-control" id="phone" name="phone" value="${this._vendor.phone?this._vendor.phone:""}">\n                    </div>\n                    <div class="form-group col-md-6">\n                        <label for="secondaryPhone">Telefone</label>\n                        <input type="text" class="form-control" id="secondaryPhone" name="secondaryPhone" value="${this._vendor.secondaryPhone?this._vendor.secondaryPhone:""}">\n                    </div>\n                </div>\n        \n                <div class="form-group">\n                    <label for="notes">Outras Informações</label>\n                    <textarea class="form-control" id="notes" name="notes">${this._vendor.notes?this._vendor.notes:""}</textarea>\n                </div>\n            </div>\n        `;return u.a.parse(e)}}var p=n(3),_=n(2),v=n(19);class f extends v.a{constructor(e,t,n){super(e,{id:"vendorsList",headers:["Nome","Telefone","Telefone","Notas","Ações"]}),this._editAction=t,this._removeAction=n}_createLineTableFromModel(e){let t=new p.a("Editar","btn btn-outline-primary btn-sm","button",new _.a("click",()=>this._editAction(e.id))),n=new p.a("Remover","btn btn-outline-danger btn-sm","button",new _.a("click",()=>this._removeAction(e.id)));return this._createTableLine(e.id,[e.name,e.phone,e.secondaryPhone,"<pre>"+e.notes+"</pre>"],t,n)}}var g=n(21),b=n(20),y=n(10);class w extends y.a{_init(){this._service=new s.a,this._initVendorsTable(),this._initAlertMessages(),this._initVendorFormModal(),this._initRemoveConfirmationModal(),this._initModalFormButtons(),document.querySelector(".btn-create-vendor").addEventListener("click",()=>{this._createVendor()})}saveVendorForm(){let e=this._vendorForm.getVendorDTO(),t=e.id?this._service.update(e):this._service.create(e);this._preLoader.run(t.then(e=>{this._vendors.add(e),this._message.update("","Os dados do fornecedors foram salvos com sucesso.","success"),this._modalForm.hide()}))}delete(e){this._preLoader.run(this._service.delete(e).then(()=>{this._vendors.remove(e),this._message.update("","O fornecedor foi removido","info")}).catch(e=>{this._message.update(e.message,"A operação falhou","warning")})),this._modalConfirmRemove.hide()}searchVendors(){this._preLoader.run(this._service.getAll().then(e=>{e.forEach(e=>this._vendors.add(e)),this._message.update("","Lista de fornecedores atualizada!","info")}).catch(e=>{this._message.update("Erro ao conectar ao servidor",e.message,"warning")}))}_initVendorFormModal(){this._modalForm=new l.a("main",{id:"mForm",title:"Formulário do Fornecedor",footer:!0}),this._vendorForm=new m(this._modalForm.contentSelector)}_initVendorsTable(){this._vendors=new g.a(new r.a,new f("#vendorsList",e=>{this._editVendor(e)},e=>{this._confirmRemoveVendor(e)}),"add","remove"),this.searchVendors()}_initAlertMessages(){this._message=new o.a(new i.a,new a.a(document.querySelector("#alertMessage")),"update")}_initRemoveConfirmationModal(){this._modalConfirmRemove=new b.a("main",{id:"modalConfirmRemove",title:"Remover Fornecedor",buttonLabel:"Remover definitivamente"},e=>{this.delete(e)})}_initModalFormButtons(){this._modalForm.updateFooter(new p.a("Salvar","btn btn-primary btn-lg","button",new _.a("click",()=>{this.saveVendorForm()})))}_createVendor(){this._vendorForm.vendor=new c.a,this._modalForm.show()}_editVendor(e){let t=this._vendors.find(e);this._vendorForm.vendor=t,this._modalForm.show()}_confirmRemoveVendor(e){let t=this._vendors.find(e);this._modalConfirmRemove.update(`Você tem certeza que deseja remover definitivamente o(a) professional <strong>${t.name}</strong> do sistema?`,t.id),this._modalConfirmRemove.show()}}new w}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,